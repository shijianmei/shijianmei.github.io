{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1682045300168},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1682045300163},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1682045300163},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1682045300163},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1682045300163},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1682045300163},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1682045300163},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1682045300164},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1682045300164},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1682045300164},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1682045300164},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1682045300164},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1682045300164},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1682045300165},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1682045300164},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1682045300165},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1682045300165},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1682045300165},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1682045300165},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1682045300165},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1682045300166},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1682045300166},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1682045300166},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1682045300166},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1682045300166},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1682045300166},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1682045300164},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1682045300166},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1682045300167},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1682045300167},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1682045300167},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1682045300167},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1682045300167},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1682045300167},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1682045300167},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1682045300167},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1682045300167},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1682045300167},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1682045300167},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1682045300167},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1682045300168},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1682045300168},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1682045300170},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1682045300170},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1682045300167},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1682045300170},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1682045300169},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1682045300169},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1682045300169},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1682045300170},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1682045300169},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1682045300169},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1682045300170},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1682045300170},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1682045300168},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1682045300169},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1682045300169},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1682045300168},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1682045300168},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1682045300168},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1682045300168},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1682045300168},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1682045300170},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1682045300172},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1682045300172},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1682045300172},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1682045300172},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1682045300172},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1682045300172},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1682045300172},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1682045300172},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1682045300172},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1682045300173},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1682045300170},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1682045300169},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1682045300170},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1682045300172},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1682045300171},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1682045300170},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1682045300170},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1682045300171},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1682045300171},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1682045300171},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1682045300172},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1682045300172},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1682045300171},{"_id":"public/2023/04/21/hello-world/index.html","hash":"5157eada6b4ec0bf954e8a7db1e71701fff7096f","modified":1682060658391},{"_id":"public/archives/index.html","hash":"238fdf6d7d51c5e3f4d9b1db01210b541d5fabb3","modified":1684916465149},{"_id":"public/archives/2023/index.html","hash":"20c947d23f70cd40e56a0f70d37305a49654e758","modified":1684916465149},{"_id":"public/archives/2023/04/index.html","hash":"844ffebb44f26d39355e3aad5049a210b9806b90","modified":1684916465149},{"_id":"public/index.html","hash":"ef789b68793fac546b03007ce3b901ee2ba2ae02","modified":1684916465149},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1682045462223},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1682045462223},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1682045462223},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1682045462223},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1682045462223},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1682045462223},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1682045462223},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1682045462223},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1682045462223},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1682045462223},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1682045462223},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1682045462223},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1682045462223},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1682045462223},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1682045462223},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1682045462223},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1682045462223},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1682045462223},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1682045462223},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1682045462223},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1682045462223},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1682045462223},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1682045462223},{"_id":"themes/maple/README.zh-CN.md","hash":"1c641b9df0614e6cba2269f130dd4af376067037","modified":1682043704727},{"_id":"themes/maple/.editorconfig","hash":"b16f01a7b04ad512e15ebb32c5786d432a536779","modified":1682043704726},{"_id":"themes/maple/LICENSE","hash":"632b916dd7e4f5c11790ab808388cda6610210ed","modified":1682043704726},{"_id":"themes/maple/.gitignore","hash":"67656f75e8113a4275ba5ef394b7662fab3ebea0","modified":1682043704726},{"_id":"themes/maple/package.json","hash":"7e498554f43498e7d5077c731f4d82d0f17ec8f9","modified":1682043704731},{"_id":"themes/maple/README.md","hash":"7e7179813a261535974f8ac70241cb2f73c6aa2f","modified":1682043704726},{"_id":"themes/maple/_config.yml","hash":"36633cdaebac543143cc3e68df5a49e8f7c5ff04","modified":1682046585328},{"_id":"themes/maple/package-lock.json","hash":"2ebe70688ab36ccf628e2836a950bc21957f95eb","modified":1682043704731},{"_id":"themes/maple/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1682043704727},{"_id":"themes/maple/languages/en.yml","hash":"72066419d6682a017c97910921ade125f21b04cd","modified":1682043704727},{"_id":"themes/maple/languages/es.yml","hash":"1e581098303181ed7927827d2388990f495cc873","modified":1682043704727},{"_id":"themes/maple/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1682043704727},{"_id":"themes/maple/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1682043704727},{"_id":"themes/maple/languages/default.yml","hash":"da38f00bb45a318f118db0d74df24a137351777e","modified":1682043704727},{"_id":"themes/maple/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1682043704727},{"_id":"themes/maple/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1682043704728},{"_id":"themes/maple/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1682043704727},{"_id":"themes/maple/languages/no.yml","hash":"182bd9ea76313ec9dc769b5dd2845c0d1c56e3a0","modified":1682043704728},{"_id":"themes/maple/languages/ru.yml","hash":"50d08403ca204fba074f616b0d054a657f8d642f","modified":1682043704728},{"_id":"themes/maple/layout/category.ejs","hash":"4011aa116f3256fe5ab4934193108aa93e4a0f55","modified":1682043704730},{"_id":"themes/maple/languages/zh-TW.yml","hash":"d2cb9d5d8a4a80479547da0bb63e2feee0fffe47","modified":1682043704728},{"_id":"themes/maple/languages/zh-CN.yml","hash":"e41d1e0e3a9e15c30b7142491bed39dc50371e96","modified":1682043704728},{"_id":"themes/maple/layout/archive.ejs","hash":"289e07997b6424a1959d18a3a40ed2002152a106","modified":1682043704730},{"_id":"themes/maple/layout/post.ejs","hash":"cc25231a129648642df85955435b57448c13d8d5","modified":1682043704731},{"_id":"themes/maple/scripts/echarts.js","hash":"2c5a1439a12b3c3ab3fd51b3572748a0ccd8667a","modified":1682043704731},{"_id":"themes/maple/scripts/mermaid.js","hash":"778f3daf90edab9bd5c007cfb131e69e3e65709f","modified":1682043704731},{"_id":"themes/maple/scripts/wordcount.js","hash":"bbab5a5c5f28da2d75f36fc95b4c817e33e9e17a","modified":1682043704731},{"_id":"themes/maple/layout/index.ejs","hash":"d4bd174f3b8136034df484fa26ec10eae7ad7432","modified":1682043704730},{"_id":"themes/maple/layout/layout.ejs","hash":"d0f6322f2c7860fc31d8c2ae7c451fbaba37d011","modified":1682043704730},{"_id":"themes/maple/layout/tag.ejs","hash":"b61a25d7767b75b1168b6b9f7f212ba0c3145f98","modified":1682043704731},{"_id":"themes/maple/layout/_partial/head.ejs","hash":"6155a5e4ce7ac90340fef979d1c6714eb9492f76","modified":1682043704728},{"_id":"themes/maple/layout/_partial/after-footer.ejs","hash":"48f56bcea9820ca347f509703ecc626ee4154276","modified":1682043704728},{"_id":"themes/maple/layout/_partial/footer.ejs","hash":"bc5b64b710679061c24b8f732987502a5d6faa49","modified":1682043704728},{"_id":"themes/maple/layout/_partial/header.ejs","hash":"291ddbd944b522405368c0f1e2ea2dd5b4970c18","modified":1682043704728},{"_id":"themes/maple/layout/_partial/toc.ejs","hash":"53b822671f4049da30d3742c1cc9774751dee8f4","modified":1682043704729},{"_id":"themes/maple/layout/_plugins/baidu-analytics.ejs","hash":"7b92fafbaab42c32780a7716a41aa9130e8f6352","modified":1682043704729},{"_id":"themes/maple/layout/_partial/paginator.ejs","hash":"7c64dd99baf13eb3c1b25435f3617635f351dbad","modified":1682043704729},{"_id":"themes/maple/layout/_plugins/busuanzi.ejs","hash":"9d83808314d7ea73fba2f637940b5d1b1c6920db","modified":1682043704729},{"_id":"themes/maple/layout/_plugins/disqusjs.ejs","hash":"5f9b22b65eb828e3af178379c3d5be56d93a7aaa","modified":1682043704729},{"_id":"themes/maple/layout/_plugins/fancybox.ejs","hash":"4591ed1a13ed32b67844a4505f3ac613535fd23f","modified":1682043704729},{"_id":"themes/maple/layout/_plugins/giscus.ejs","hash":"88349567e00d8d46d45b7da14b935c61d20f2317","modified":1682043704729},{"_id":"themes/maple/layout/_plugins/google-analytics.ejs","hash":"295659ef0d9c902cf7a3d0f2671e83c38be2645b","modified":1682043704729},{"_id":"themes/maple/layout/_plugins/tailwindcss.ejs","hash":"ff6a9e9180453fcc8c67515e1baa564d181f1836","modified":1682043704730},{"_id":"themes/maple/layout/_plugins/maple.ejs","hash":"3bd0be7eb8ea9f4aea5144af961955d9070164bc","modified":1682043704729},{"_id":"themes/maple/layout/_plugins/mathjax.ejs","hash":"c358356a7595b5e1fe1d65aee10616eec8eb00e7","modified":1682043704730},{"_id":"themes/maple/layout/_plugins/mermaid.ejs","hash":"804c36256f9232a1fe6f308e06ae89642fe0eb1b","modified":1682043704730},{"_id":"themes/maple/layout/_plugins/nprogress.ejs","hash":"0c2a73e67ffe2563c58c5274f007df02765ec08a","modified":1682043704730},{"_id":"themes/maple/layout/_plugins/theme.ejs","hash":"5bf66aed090abddbe0eb7a1755c205f37bb01c5b","modified":1682043704730},{"_id":"themes/maple/layout/_plugins/tocbot.ejs","hash":"e28198bc5ff2dc563838b9eaa39b399eb8b9e47f","modified":1682043704730},{"_id":"themes/maple/source/css/highlight.styl","hash":"d2772f30760aa99f7d8995e3f65c96bd10da29b6","modified":1682043704732},{"_id":"themes/maple/source/css/main.styl","hash":"f26f4ed5df18f8a11d6100327975d44c4de0b802","modified":1682043704732},{"_id":"themes/maple/source/images/logo.svg","hash":"1b7a73d948e593dcec7549d63e5ac60ad6db6a8f","modified":1682043704737},{"_id":"themes/maple/source/img/logo.svg","hash":"75341fbd657844a29dc5e217f67c71295ad1239c","modified":1682043704742},{"_id":"themes/maple/source/js/main.js","hash":"fd7f2a01ddca42d4fc5f0735fc37eda240f71d6e","modified":1682043704742},{"_id":"themes/maple/source/lib/fancybox/fancybox.min.css","hash":"1564bb6a6b930a61875610c05001c4f7bfe9939a","modified":1682043704743},{"_id":"themes/maple/source/lib/clipboard.min.js","hash":"f48e9bfeca83e5057cc751e8c44fc07e9d976c06","modified":1682043704742},{"_id":"themes/maple/source/lib/iconify-icon.min.js","hash":"7526cf2b54b9e657f377083129cc00c5aa4dc110","modified":1682043704743},{"_id":"themes/maple/source/lib/nprogress/nprogress.css","hash":"d8a2825a6fb35a3eeb3743e09184c18be9dbfcdc","modified":1682043704744},{"_id":"themes/maple/source/lib/nprogress/nprogress.js","hash":"e328b676f7e93bd78cd5d31cd0899cba2a423097","modified":1682043704744},{"_id":"themes/maple/source/lib/tocbot/tocbot.min.css","hash":"0029d92ce7f1a59c7c57feb6d5f80649daba3db8","modified":1682043704744},{"_id":"themes/maple/source/lib/tocbot/tocbot.min.js","hash":"4f1b40a6818fe6e955f2ce7de3b79aec4dcd0a7c","modified":1682043704744},{"_id":"themes/maple/source/lib/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1682043704744},{"_id":"themes/maple/source/lib/fancybox/fancybox.umd.min.js","hash":"e766e468e4f017b51a643648f6b4f05187c41d6b","modified":1682043704743},{"_id":"themes/maple/source/images/avatar.jpg","hash":"0eb2de59901a55c792898ddf5d1da3ed96f2e2d8","modified":1682043704737},{"_id":"themes/maple/source/img/avatar.jpg","hash":"0eb2de59901a55c792898ddf5d1da3ed96f2e2d8","modified":1682043704742},{"_id":"source/_posts/启动优化.md","hash":"4c83ae517a1373e151b3ab5ec74c5f6f4caabc3c","modified":1682419642929},{"_id":"public/archives/2023/01/index.html","hash":"e43015cd5de6b636bdf39dba49ca0533cc298053","modified":1684916465149},{"_id":"public/2023/01/21/启动优化/index.html","hash":"ac6a9505c9be56b4d89dd56172a019622bdedee1","modified":1684916465149},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1682060658391},{"_id":"public/css/main.css","hash":"bc61d4e125b284c6ac8698d2adced29504349459","modified":1682060658391},{"_id":"public/css/highlight.css","hash":"58217c19313bd9b12b768a4fcd09e66a980fea2c","modified":1682053844475},{"_id":"public/js/main.js","hash":"fd7f2a01ddca42d4fc5f0735fc37eda240f71d6e","modified":1682053844475},{"_id":"public/img/logo.svg","hash":"75341fbd657844a29dc5e217f67c71295ad1239c","modified":1682053844475},{"_id":"public/lib/clipboard.min.js","hash":"f48e9bfeca83e5057cc751e8c44fc07e9d976c06","modified":1682053844475},{"_id":"public/lib/fancybox/fancybox.min.css","hash":"1564bb6a6b930a61875610c05001c4f7bfe9939a","modified":1682053844475},{"_id":"public/lib/nprogress/nprogress.js","hash":"e328b676f7e93bd78cd5d31cd0899cba2a423097","modified":1682053844475},{"_id":"public/lib/tocbot/tocbot.min.css","hash":"0029d92ce7f1a59c7c57feb6d5f80649daba3db8","modified":1682053844475},{"_id":"public/lib/tocbot/tocbot.min.js","hash":"4f1b40a6818fe6e955f2ce7de3b79aec4dcd0a7c","modified":1682053844475},{"_id":"public/lib/nprogress/nprogress.css","hash":"d8a2825a6fb35a3eeb3743e09184c18be9dbfcdc","modified":1682053844475},{"_id":"public/lib/iconify-icon.min.js","hash":"7526cf2b54b9e657f377083129cc00c5aa4dc110","modified":1682053844475},{"_id":"public/lib/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1682053844475},{"_id":"public/lib/fancybox/fancybox.umd.min.js","hash":"e766e468e4f017b51a643648f6b4f05187c41d6b","modified":1682053844475},{"_id":"public/images/avatar.jpg","hash":"0eb2de59901a55c792898ddf5d1da3ed96f2e2d8","modified":1682053844475},{"_id":"public/img/avatar.jpg","hash":"0eb2de59901a55c792898ddf5d1da3ed96f2e2d8","modified":1682053844475},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1682057615311},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1682057615298},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1682057615298},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1682057615308},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1682057615308},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1682057615308},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1682057615310},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1682057615310},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1682057615293},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1682057615293},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1682057615293},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1682058468990},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1682058468990},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1682057615293},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1682057615294},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1682057615294},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1682057615294},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1682057615293},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1682058468997},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1682058468990},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1682057615294},{"_id":"themes/next/_config.yml","hash":"6576f34441ed131e07b8968ddc4d10027fcfb333","modified":1682058468990},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1682058468990},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1682058468990},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1682058468990},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1682058468991},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1682058468991},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1682058468991},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1682058468991},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1682057615293},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1682058468991},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1682058468991},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1682058468991},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1682058468991},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1682058468992},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1682058468991},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1682058468992},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1682058468992},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1682058468992},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1682058468992},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1682058468996},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1682058468992},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1682058468996},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1682058468996},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1682058468996},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1682058468996},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1682058468996},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1682058468997},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1682057615302},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1682057615301},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1682057615331},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1682057615296},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1682057615331},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1682057615295},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1682057615331},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1682057615296},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1682058468993},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1682058468993},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1682058468993},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1682058468993},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1682057615297},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1682058468993},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1682058468993},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1682058468993},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1682057615297},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1682057615297},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1682057615297},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1682057615298},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1682058468996},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1682058468993},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1682057615298},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1682057615300},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1682057615300},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1682057615300},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1682057615300},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1682057615302},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1682057615300},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1682058468997},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1682057615302},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1682057615302},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1682057615302},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1682057615302},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1682057615302},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1682058468997},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1682057615302},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1682057615300},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1682057615310},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1682058469000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1682057615311},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1682057615311},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1682057615311},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1682057615311},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1682057615311},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1682057615311},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1682057615311},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1682057615311},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1682057615312},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1682057615312},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1682057615312},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1682057615312},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1682057615297},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1682057615312},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1682057615297},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1682058468994},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1682057615297},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1682057615298},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1682057615297},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1682057615298},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1682057615298},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1682057615298},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1682057615298},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1682057615298},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1682057615298},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1682057615299},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1682057615299},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1682057615299},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1682057615299},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1682057615299},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1682057615299},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1682057615299},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1682057615299},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1682057615299},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1682057615299},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1682057615299},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1682057615299},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1682057615300},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1682057615299},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1682057615300},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1682057615300},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1682057615300},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1682057615300},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1682057615301},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1682058468999},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1682057615301},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1682057615301},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1682057615308},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1682058468999},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1682057615299},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1682057615308},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1682057615310},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1682057615310},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1682058469000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1682058469000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1682058469000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1682057615312},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1682058469000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1682057615312},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1682058469000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1682057615312},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1682058469001},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1682057615312},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1682057615313},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1682058469001},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1682057615313},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1682057615316},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1682057615316},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1682057615316},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1682057615316},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1682057615315},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1682057615319},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1682058469001},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1682057615319},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1682057615319},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1682057615320},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1682057615319},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1682057615320},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1682057615320},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1682057615326},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1682057615325},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1682057615326},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1682057615326},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1682057615326},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1682057615326},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1682057615326},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1682057615326},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1682057615326},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1682057615326},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1682057615318},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1682057615326},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1682057615326},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1682057615327},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1682057615327},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1682057615326},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1682057615327},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1682057615327},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1682057615327},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1682057615327},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1682057615327},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1682057615327},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1682057615327},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1682057615327},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1682057615327},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1682057615329},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1682057615329},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1682057615330},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1682057615330},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1682057615330},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1682057615300},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1682057615300},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1682057615303},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1682058468997},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1682057615303},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1682058468997},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1682057615303},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1682057615304},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1682058468999},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1682057615307},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1682057615307},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1682057615307},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1682057615307},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1682058468999},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1682057615308},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1682057615308},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1682057615308},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1682057615308},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1682057615308},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1682057615309},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1682057615309},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1682057615310},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1682057615309},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1682057615309},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1682057615310},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1682058469000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1682057615310},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1682057615310},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1682057615309},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1682057615310},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1682057615309},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1682057615309},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1682057615309},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1682057615309},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1682057615314},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1682057615313},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1682057615316},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1682057615314},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1682057615317},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1682057615314},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1682057615317},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1682057615317},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1682057615317},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1682057615317},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1682057615318},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1682057615318},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1682057615319},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1682057615318},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1682057615319},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1682058469001},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1682057615320},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1682058469001},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1682057615329},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1682057615303},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1682057615329},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1682057615303},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1682057615303},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1682057615303},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1682058468997},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1682057615303},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1682057615303},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1682057615303},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1682057615304},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1682057615303},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1682057615304},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1682057615304},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1682057615304},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1682057615305},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1682057615304},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1682057615305},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1682058468998},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1682058468998},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1682058468998},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1682058468998},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1682058468998},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1682057615304},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1682058468997},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1682057615304},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1682058468997},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1682057615304},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1682058468998},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1682057615304},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1682057615305},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1682058468998},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1682057615305},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1682057615305},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1682057615305},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1682057615305},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1682057615305},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1682057615305},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1682058468998},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1682058468998},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1682057615306},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1682058468998},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1682057615307},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1682057615307},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1682057615307},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1682057615307},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1682058468999},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1682057615307},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1682057615307},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1682058468999},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1682058468999},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1682057615309},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1682057615313},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1682058468999},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1682057615313},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1682057615313},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1682057615317},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1682057615314},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1682057615317},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1682057615317},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1682057615317},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1682057615318},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1682057615318},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1682057615325},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1682057615314},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1682058469006},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1682058469006},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1682058469002},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1682058469003},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1682058469005},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1682057615330},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1682057615316},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1682058469004},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1682057615329},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1682057833696},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1682060658391},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1682060658391},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1682057833696},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1682057833696},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1682057833696},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1682057833696},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1682057833696},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1682057833696},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1682057833696},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1682057833696},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1682057833696},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1682057833696},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1682057833696},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1682057833696},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1682057833696},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1682057833696},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1682057833696},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1682057833696},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1682057833696},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1682057833696},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1682057833696},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1682057833696},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1682057833696},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1682057833696},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1682057833696},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1682057833696},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1682057833696},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1682057833696},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1682057833696},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1682057833696},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1682058491680},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1682058491680},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1682058491680},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1682057833696},{"_id":"public/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1682058491680},{"_id":"public/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1682058491680},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1682057833696},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1682057833696},{"_id":"public/lib/fastclick/README.html","hash":"c88ed76304392b9e77b266fcbbc05f443c5df133","modified":1682057833696},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1682057833696},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1682057833696},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1682057833696},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1682057833696},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1682057833696},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1682057833696},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1682057833696},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1682057833696},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1682057833696},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1682057833696},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1682057833696},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1682057833696},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1682057833696},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1682057833696},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1682057833696},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1682057833696},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1682057833696},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1682057833696},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1682057833696},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1682057833696},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1682057833696},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1682057833696},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1682057833696},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1682057833696},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1682057833696},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1682057833696},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1682057833696},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1682057833696},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1682057833696},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1682057833696},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1682057833696},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1682057833696},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1682057833696},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1682057833696},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1682057833696},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1682057833696},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1682057833696},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1682057833696},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1682058491680},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1682058491680},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1682057833696},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1682057833696},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1682058491680},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1682058491680},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1682058491680},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1682058491680},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1682058491680},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1682058491680},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1682058468994},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1682058468992},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1682058468993},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1682058468994},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1682058468992},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1682058468995},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1682058468995},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1682058468995},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1682058468996},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1682058468996},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1682058468995},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1682058468994},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1682058468994},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1682058468994},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1682058468994},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1682058468994},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1682058468994},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1682058468994},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1682058468995},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1682058468995},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1682058468994},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1682058468994},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1682058468995},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1682058468995},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1682058468995},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1682058468999},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1682058468995},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1682059707593},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1682059707593},{"_id":"themes/hexo-theme-next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1682059707595},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1682059707593},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1682059707595},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1682059707595},{"_id":"themes/hexo-theme-next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1682059707605},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1682059707595},{"_id":"themes/hexo-theme-next/_config.yml","hash":"997f369d27a7de3a6d2edb02a61457542ed7e9bd","modified":1684916078171},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1682059707594},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1682059707595},{"_id":"themes/hexo-theme-next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1682059707595},{"_id":"themes/hexo-theme-next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1682059707598},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1682059707594},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1682059707594},{"_id":"themes/hexo-theme-next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1682059707594},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1682059707594},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1682059707594},{"_id":"themes/hexo-theme-next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1682059707594},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1682059707595},{"_id":"themes/hexo-theme-next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1682059707595},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1682059707595},{"_id":"themes/hexo-theme-next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1682059707594},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1682059707596},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1682059707596},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1682059707596},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1682059707596},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1682059707596},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1682059707596},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1682059707596},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1682059707596},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1682059707598},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1682059707596},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1682059707598},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1682059707598},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1682059707598},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1682059707598},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1682059707598},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1682059707598},{"_id":"themes/hexo-theme-next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1682059707598},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1682059707598},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1682059707599},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1682059707599},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1682059707600},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1682059707605},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1682059707605},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1682059707605},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1682059707605},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1682059707605},{"_id":"themes/hexo-theme-next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1682059707607},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1682059707594},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1682059707594},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1682059707594},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1682059707596},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1682059707596},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1682059707594},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1682059707605},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1682059707596},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1682059707597},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1682059707597},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1682059707597},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1682059707597},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1682059707597},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1682059707597},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1682059707598},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1682059707597},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1682059707598},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1682059707597},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1682059707600},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1682059707600},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1682059707600},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1682059707600},{"_id":"themes/hexo-theme-next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1682059707600},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1682059707604},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1682059707605},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1682059707604},{"_id":"themes/hexo-theme-next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1682059707607},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1682059707603},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1682059707607},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1682059707607},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1682059707608},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1682059707615},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1682059707617},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1682059707617},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1682059707617},{"_id":"themes/hexo-theme-next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1682059707617},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1682059707617},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1682059707617},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1682059707617},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1682059707615},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1682059707616},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1682059707616},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1682059707616},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1682059707616},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1682059707616},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1682059707616},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1682059707616},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1682059707616},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1682059707616},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1682059707616},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1682059707616},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1682059707600},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1682059707616},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1682059707600},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1682059707600},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1682059707600},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1682059707600},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1682059707601},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1682059707602},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1682059707604},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1682059707604},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1682059707604},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1682059707603},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1682059707604},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1682059707604},{"_id":"themes/hexo-theme-next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1682059707604},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1682059707604},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1682059707604},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1682059707604},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1682059707605},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1682059707605},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1682059707604},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1682059707606},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1682059707605},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1682059707606},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1682059707605},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1682059707605},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1682059707606},{"_id":"themes/hexo-theme-next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1682059707606},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1682059707604},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1682059707615},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1682059707615},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1682059707615},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1682059707615},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1682059707615},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1682059707617},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1682059707617},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1682059707608},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1682059707608},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1682059707608},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1682059707620},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1682059707620},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1682059707615},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1682059707615},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1682059707615},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1682059707614},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1682059707618},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1682059707618},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1682059707608},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1682059707608},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1682059707608},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1682059707608},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1682059707608},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1682059707609},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1682059707610},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1682059707611},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1682059707612},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1682059707613},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1682059707618},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1682059707618},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1682060658391},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1682060658391},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1682060658391},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1682060658391},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1682060658391},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1682060658391},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1682060658391},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1682060658391},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1682060658391},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1682060658391},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1682060658391},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1682060658391},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1682060658391},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1682060658391},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1682060658391},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1682060658391},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1682061294687},{"_id":"source/_posts/二进制重排.md","hash":"0ff458131d32bef2d8e05fbc50462a0db3e4d649","modified":1682419659966},{"_id":"public/2023/04/21/二进制重排/index.html","hash":"af7f60e1132e1f4262054b6fda1ac47f68434adc","modified":1682065199973},{"_id":"public/2023/01/16/二进制重排/index.html","hash":"b0867212ab9035e38fc81ad5bc4a4bbc4bab9b56","modified":1684916465149},{"_id":"source/_posts/一次卡顿优化.md","hash":"3554cbbbc1f284673cd8841ad5a0a039c785a961","modified":1682419653124},{"_id":"public/2023/04/25/一次卡顿优化/index.html","hash":"02964cf98ac575bfd669e3bfbf21ad67185bdfe2","modified":1682414996931},{"_id":"public/archives/2022/08/index.html","hash":"50ffa710b9def157c69eb456d30bf140a7c463d8","modified":1684916465149},{"_id":"public/archives/2022/index.html","hash":"fc6ea729639e4e1ba2c3f490e5ac3ba066dd8bd8","modified":1684916465149},{"_id":"public/2022/08/20/一次卡顿优化/index.html","hash":"272bad421f2257a1ca60c303463a0b636ab89017","modified":1684916465149},{"_id":"source/categories/index.md","hash":"ebcaeaea94be06da3caddf696226e7173c68f863","modified":1682419569175},{"_id":"public/categories/index.html","hash":"5e1e820d23e9e9296aa2ca90a3dd6e0050c85620","modified":1684916465149},{"_id":"public/source/categories/web前端/index.html","hash":"ceb10f7fe465d05ced4da8f355261afdd0301ef7","modified":1682419594859},{"_id":"source/_posts/iOS接入Flutter.md","hash":"83063df601614772192aaf46e693ace550af4036","modified":1682419833403},{"_id":"source/_posts/iOS接入U3d.md","hash":"48165525a6fdbaa1af63b60e8c62e67ccec341ca","modified":1682420017563},{"_id":"public/2023/04/25/iOS接入Flutter/index.html","hash":"003a166f0da9acacf0de4c4b5d725d494ee1a524","modified":1684916465149},{"_id":"public/2023/04/25/iOS接入U3d/index.html","hash":"5139048ad6b95075ccbae65ab272cf61298248bd","modified":1684912664379},{"_id":"public/source/categories/Flutter/index.html","hash":"1ab06eca4b2c9266632f6e5f51408c03b41e24a1","modified":1684916465149},{"_id":"public/source/categories/iOS优化/index.html","hash":"4de30805599d2b49d766ccf89ed9694167e584b3","modified":1684916465149},{"_id":"source/_posts/Git不常用解决方案.md","hash":"8cc8dcb242fd475ba19bea0632202e08eb3bf4f1","modified":1684916214626},{"_id":"source/_posts/Git常用命令.md","hash":"020b0f1a26f4836c894f0ffe2a5b8362d3b0ade4","modified":1684916219900},{"_id":"public/2023/04/26/Git不常用解决方案/index.html","hash":"1968deed1b527e65f86572633c2b1ddb164bd978","modified":1682488797453},{"_id":"public/archives/2019/index.html","hash":"fb11c1692c1e786c4e03eada8e835649766556e4","modified":1684913614019},{"_id":"public/archives/2019/04/index.html","hash":"5469401b48fd83783fe84312c690adfc600c33ee","modified":1684913614019},{"_id":"public/source/categories/u3d/index.html","hash":"6a83d199365656e1e4c25ddd73ec28c88344c165","modified":1684912664379},{"_id":"public/source/categories/工具/index.html","hash":"bcafa342fdd86ee91ae5f2e2eb94680734c78c25","modified":1682488797453},{"_id":"public/2019/04/26/Git常用命令/index.html","hash":"6e59ad135e9b7a61128e1b8bddd85bcf15ae50a0","modified":1684913614019},{"_id":"source/_posts/热修复设计.md","hash":"d6136a76f4783ca19b979050d4706ecdc93ef025","modified":1684383929544},{"_id":"public/2023/05/06/热修复设计/index.html","hash":"c0e2f47d69bc74a74e637c58c804509aff909a1e","modified":1684916465149},{"_id":"public/archives/2023/05/index.html","hash":"5cabcdbb24591191f27a7c76c4f1d90332ac966f","modified":1684916465149},{"_id":"public/source/categories/效能工具/index.html","hash":"0bd9ae561db79b01999803498bcaaf76754f59b2","modified":1684383722346},{"_id":"public/2019/04/26/Git不常用解决方案/index.html","hash":"703029f5955f4da1ddd61528037abda27052f6de","modified":1684913614019},{"_id":"source/_posts/卡顿监控.md","hash":"34161ee1eb6b5b9dc7291cae1402129f6cf82aab","modified":1684912815470},{"_id":"public/2023/05/18/卡顿监控/index.html","hash":"02e7a922dc3d00bac71d09ff9caa3fb74f2ca9c9","modified":1684383722346},{"_id":"public/archives/2022/09/index.html","hash":"db09f10dc3e73579982e53cba2ff9a5dbd124429","modified":1684912664379},{"_id":"public/2022/09/18/卡顿监控/index.html","hash":"8f1d74766a188c7302766bf4c6ef1a76652c9b14","modified":1684912664379},{"_id":"source/_posts/CPU.md","hash":"756f7bb3dd91e604a4c0c58fd8315e5f48df6109","modified":1684912442006},{"_id":"public/2023/05/24/CPU/index.html","hash":"ea5fab8617d9d9ae53a8fa09a9b884b5ea6b47f9","modified":1684912445884},{"_id":"public/source/categories/Git/index.html","hash":"3812f6efbdeb46655b8be38576329451a861bfbf","modified":1684916465149},{"_id":"public/source/categories/系统设计/index.html","hash":"e5143483e3de3e231bed4ec4aa782a7d2fbacd76","modified":1684916465149},{"_id":"source/_posts/CPU & 内存监控.md","hash":"d1c9330be2dc6fee4f9936a726982bfe7b521f33","modified":1684912652896},{"_id":"public/archives/2021/index.html","hash":"9586b6e4214a2dc0021df8b9fb8e461fcc557430","modified":1684916465149},{"_id":"public/archives/2021/03/index.html","hash":"3935763e07d6eacf6616b5b408a4ddd2c342d1cd","modified":1684916465149},{"_id":"public/2021/03/24/CPU & 内存监控/index.html","hash":"3f485b10417fb1ab3c70fc79758b536497040a91","modified":1684916465149},{"_id":"public/source/categories/性能/index.html","hash":"174424dc1a249cd716ef55432253602ac8777b4c","modified":1684916465149},{"_id":"public/archives/2021/09/index.html","hash":"66b3dda29dfb324a202240dc6abcbf6fbb777e7c","modified":1684916465149},{"_id":"public/2021/09/18/卡顿监控/index.html","hash":"4adfdb2d2bdb62c2a4549f5cfb2c0bc89c1e6645","modified":1684916465149},{"_id":"public/archives/2020/index.html","hash":"e805f68868927e3e66186edbec09135b0797b104","modified":1684916465149},{"_id":"public/archives/2020/03/index.html","hash":"a70c7c78e5e7e8812f8675d036f0adf9f1f5c4a7","modified":1684916465149},{"_id":"public/archives/2020/04/index.html","hash":"ad81018db643a3258cc527fa6f1878ec71e14c62","modified":1684916465149},{"_id":"public/2020/04/26/Git不常用解决方案/index.html","hash":"c49824934a8bd1b4e54ce1383a4300e28885f7a3","modified":1684916465149},{"_id":"public/2020/03/25/Git常用命令/index.html","hash":"2f76117c6cfc975923bab3b055502947dcd3e2a6","modified":1684916465149}],"Category":[{"name":"web前端","_id":"clgw56mtk0000t2zrbzat06st"},{"name":"iOS优化","_id":"clgw57t0f0000u6zr4sg45l75"},{"name":"Flutter","_id":"clgw5f3ze0002vqzrg8rwck74"},{"name":"u3d","_id":"clgw5fu1j0000vzzre87s331o"},{"name":"工具","_id":"clgxae0ug0002ghzr6a6qamhs"},{"name":"tool","_id":"clgxdqyas0001nczrcm489smg"},{"name":"效能工具","_id":"clgxdrens0004nczr8m0zgcqq"},{"name":"Git","_id":"cli1da3vk00006szrfp1v4bm5"},{"name":"系统设计","_id":"cli1da3vm00026szrc3ap5vw5"},{"name":"性能","_id":"cli1dh7nj00029szr688a0clf"}],"Data":[],"Page":[{"title":"categories","date":"2023-04-25T10:27:22.000Z","type":"categories","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-04-25 18:27:22\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n","updated":"2023-04-25T10:46:09.175Z","path":"categories/index.html","_id":"clgw4k0mq0000njzr7unk4588","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"启动优化","date":"2023-01-21T03:17:46.000Z","_content":"# 启动过程：\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%89%87.png)\n\n启动过程以main为界限，分为pre-main和main之后两部分\n\n## pre-main\n### 加载dyld\n动态库载入过程，会去装载app使用的动态库。而每一个动态库有它自己的依赖关系，会消耗时间去查找和读取。\n### rebase&binding\nrebase：主要是调整镜像内部的指针，这里使用了ASLR(Address Space Layout Randomization 地址空间布局随机化)。程序每次启动后地址都会随机变化，这样程序里的所有代码地址都需要重新进行计算修复\n\nbinding：修复指向外部的指针。比如app中调用了NSLog函数打印信息，NSLog是系统函数，在程序开始运行的时候app是不知道NSLog函数指针是多少，此时就需要通过dyld_stub_binder技术找到NSLog指针地址进行调用。\n\n### Objc setup\nruntime在此处初始化，对class和category进行注 册，selector唯一性判断\n\nload&constructor&initialize\n\n调用所有类的load的方法，初始化C&C++的静态化变量，然后调用 constructor 函数\n\n## main之后\n### main函数\n创建整个app的autoreleasepool，初始化初始window，app界面开始展示\n\n### LifeCyle\n指定rootviewcontroller，调用业务代码，完成各阶段业务\n\n### First Frame\nmain页面viewDidAppear 完成页面第一帧渲染。至此启动完成。\n\n# 分析工具\n## pre-main阶段耗时分析:\n在 Xcode 中 Edit scheme -> Run -> Auguments 将环境变量 DYLD_PRINT_STATISTICS 设为1\n\n```powershell\nTotal pre-main time: 1.2 seconds (100.0%)\ndylib loading time: 297.95 milliseconds (23.5%)\nrebase/binding time: 100.67 milliseconds (7.9%)\nObjC setup time: 110.68 milliseconds (8.7%)\ninitializer time: 758.19 milliseconds (59.8%)\nslowest intializers :\nlibSystem.B.dylib : 6.71 milliseconds (0.5%)\nlibMainThreadChecker.dylib : 40.29 milliseconds (3.1%)\nGPUToolsCore : 37.95 milliseconds (2.9%)\nlibglInterpose.dylib : 363.65 milliseconds (28.6%)\nAiWayFashionCar : 471.71 milliseconds (37.2%)\n```\n如果将 Edit scheme -> Run > Auguments 将环境变量 DYLD_PRINT_STATISTICS_DETAILS 设为1，则可以更多详细的pre-main阶段的耗时：\n```plain\ntotal time: 2.1 seconds (100.0%)\ntotal images loaded: 526 (508 from dyld shared cache)\ntotal segments mapped: 66, into 8235 pages\ntotal images loading time: 1.0 seconds (49.3%)\ntotal load time in ObjC: 124.33 milliseconds (5.8%)\ntotal debugger pause time: 753.19 milliseconds (35.7%)\ntotal dtrace DOF registration time: 0.00 milliseconds (0.0%)\ntotal rebase fixups: 830,184\ntotal rebase fixups time: 95.24 milliseconds (4.5%)\ntotal binding fixups: 851,403\ntotal binding fixups time: 523.97 milliseconds (24.8%)\ntotal weak binding fixups time: 3.85 milliseconds (0.1%)\ntotal redo shared cached bindings time: 533.55 milliseconds (25.3%)\ntotal bindings lazily fixed up: 0 of 0\ntotal time in initializers and ObjC +load: 320.90 milliseconds (15.2%)\nkscrash libSystem.B.dylib : 6.78 milliseconds (0.3%)\nlibBacktraceRecording.dylib : 6.98 milliseconds (0.3%)\nlibobjc.A.dylib : 2.52 milliseconds (0.1%)\nlibMainThreadChecker.dylib : 40.53 milliseconds (1.9%)\nFlutter : 2.95 milliseconds (0.1%)\nAiWayFashionCar : 396.86 milliseconds (18.8%)\ntotal symbol trie searches: 1793354\ntotal symbol table binary searches: 0\ntotal images defining weak symbols: 63\ntotal images using weak symbols: 143\n```\n备注:这里要跑低于ios 15.0的系统,才会在控制台打印\n## 项目里用到的动态库：\n\n通过命令 **otool****-****L** +  包路径查看使用了的动态库（包含系统库、嵌入的动态库）：\n\n```plain\notool -L /Users/mac/Desktop/Debugiphoneos/AiWayFashionCar.app/AiWayFashionCar\n```\n执行结果如下:\n```plain\n/usr/lib/libbz2.1.0.dylib (compatibility version 1.0.0, current version 1.0.8)\n/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n/usr/lib/libsqlite3.dylib (compatibility version 9.0.0, current version 331.0.0)\n/usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11)\n@rpath/ATAuthSDK_D.framework/ATAuthSDK_D (compatibility version 1.0.0, current version 1.0.0)\n@rpath/App.framework/App (compatibility version 0.0.0, current version 0.0.0)\n/System/Library/Frameworks/AssetsLibrary.framework/AssetsLibrary (compatibility version 1.0.0, current version 1.0.0)\n/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox (compatibility version 1.0.0, current version 1000.0.0)\n/System/Library/Frameworks/CFNetwork.framework/CFNetwork (compatibility version 1.0.0, current version 1327.0.4)\n/System/Library/Frameworks/EventKit.framework/EventKit (compatibility version 1.0.0, current version 1716.2.2)\n@rpath/FMDB.framework/FMDB (compatibility version 1.0.0, current version 1.0.0)\n@rpath/Flutter.framework/Flutter (compatibility version 0.0.0, current version 0.0.0)\n/System/Library/Frameworks/Foundation.framework/Foundation (compatibility version 300.0.0, current version 1856.105.0)\n/System/Library/Frameworks/GLKit.framework/GLKit (compatibility version 1.0.0, current version 126.0.0)\n/System/Library/Frameworks/ImageIO.framework/ImageIO (compatibility version 1.0.0, current version 1.0.0)\n/System/Library/Frameworks/WebKit.framework/WebKit (compatibility version 1.0.0, current version 612.3.6)\n@rpath/flutter_boost.framework/flutter_boost (compatibility version 1.0.0, current version 1.0.0)\n@rpath/path_provider.framework/path_provider (compatibility version 1.0.0, current version 1.0.0)\n@rpath/shared_preferences.framework/shared_preferences (compatibility version 1.0.0, current version 1.0.0)\n@rpath/sqflite.framework/sqflite (compatibility version 1.0.0, current version 1.0.0)\n@rpath/video_player.framework/video_player (compatibility version 1.0.0, current version 1.0.0)\n@rpath/wakelock.framework/wakelock (compatibility version 1.0.0, current version 1.0.0)\n@rpath/webview_flutter.framework/webview_flutter (compatibility version 1.0.0, current version 1.0.0)\n/System/Library/Frameworks/AppTrackingTransparency.framework/AppTrackingTransparency (compatibility version 1.0.0, current version 1.0.0, weak)\n/System/Library/Frameworks/UserNotifications.framework/UserNotifications (compatibility version 1.0.0, current version 1.0.0, weak)\n/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)\n/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n/System/Library/Frameworks/AVKit.framework/AVKit (compatibility version 1.0.0, current version 1.0.0)\n/usr/lib/libnetwork.dylib (compatibility version 1.0.0, current version 1.0.0, weak)\n...\n```\n* 这里以/System ,/usr开头的是系统动态库\n* 以@rpath开头的是嵌入动态库,如u3d,flutter及其依赖项使用了动态库\n## 查找无用类、分类\n\n代码覆盖率检测等\n\n[AppCode](https://www.jetbrains.com/objc/download/)\n\n基于LLVM插件检测重复代码或者未被使用的代码\n\n[GitHub - erduoniba/hdcoverage: iOS（swift&amp;oc）自动注入代码覆盖率指令脚本，](https://github.com/erduoniba/hdcoverage)\n\n## 查看项目里调了哪些load方法：\n\n如果将 Edit scheme -> Run > Auguments 环境变量里加：OBJC_PRINT_LOAD_METHODS 设为YES\n\n```plain\nobjc[11939]: LOAD: +[NSMutableDictionary(SwizzlSafe) load]\nobjc[11939]: LOAD: +[NSNull(SwizzSafe) load]\nobjc[11939]: LOAD: +[NSString(SwizzlSafe) load]\nobjc[11939]: LOAD: +[NSMutableString(SwizzlSafe) load]\nobjc[11939]: LOAD: +[UIControl(AW) load]\nobjc[11939]: LOAD: +[UIApplication(MemoryLeak) load]\nobjc[11939]: LOAD: +[UINavigationController(MemoryLeak) load]\nobjc[11939]: LOAD: +[UITouch(MemoryLeak) load]\nobjc[11939]: LOAD: +[UIViewController(MemoryLeak) load]\nobjc[11939]: LOAD: +[NSObject(JPInjecting) load]\nobjc[11939]: LOAD: +[UITextView(RCSBackWord) load]\nobjc[11939]: LOAD: +[UITabBarController(ShouldAutorotate) load]\nobjc[11939]: LOAD: +[UIApplication(BaiduMobStatApplication) load]\nobjc[11939]: LOAD: +[UICollectionViewLayout(MJRefresh) load]\nobjc[11939]: LOAD: +[UIScrollView(MJExtension) load]\nobjc[11939]: LOAD: +[NSObject(MJKeyValue) load]\n```\n## 缺页异常引起的耗时分析:\n打开 `Instruments` , 选择 System Trace \n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png)\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%90%8E.png)\n## main之后各阶段耗时分析:\n打开 `Instruments` , 选择 App Launch , Time Profile\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E8%80%97%E6%97%B6%E5%88%86%E6%9E%90.png)\n结合\n```plain\nNSDate* tmpStartData = [NSDate date];    \n//耗时函数    \ndouble deltaTime = [[NSDate date] timeIntervalSinceDate:tmpStartData];\nNSLog(@\">>>>>>>>>>unity_launch_costTime = %f ms\", deltaTime*1000);\n```\n# 优化思路\n## pre-main优化\n### 二进制重排\n为了能减少系统因缺页中断产生的 Page In 操作，我们需要做的就是把启动链路上所有用到的方法都排在连续的页上，这样系统在加载符号的时候就可以减少相应的内存页数量的访问，从而减少整个启动过程的耗时\n\n### 动态库改造:\n项目用到的嵌入动态库主要是U3d,Flutter及其依赖库\n\nU3d库因为有要求必须得用动态库,故不作改造\n\n这里只把flutter依赖库改造为静态库,思路是在flutter模块的podfile里添加:\n\n```plain\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|    \n      config.build_settings['MACH_O_TYPE'] = 'staticlib'\n    end\n  end\nend\n```\nFlutter的引入是通过构建脚本生成动态库,然后导入到私有库引用,故这里直接更改构建脚本\n脚本更改：\n\n```plain\nsed -i '' '38a\\\n    target.build_configurations.each do |config|\\\n     config.build_settings['MACH_O_TYPE'] = 'staticlib'\\\n    end\\    \n' Podfile\n\n```\n需要安装gsed\n```plain\nbrew install gnu-sed\nalias sed='gsed'\n```\n### load方法改造\n从原则上来说，我们在开发过程中不应该使用 +load,针对 +load 方法的优化，主要是采用如下几种方案：\n\n* 删除不必要的代码； \n*  +load中代码延迟到 main 之后子线程处理或者首页显示之后； \n* 业务代码接口懒加载； \n*  改为 initialize 中执行，针对 initialize 中处理需要注意的是分类 initialize 会覆盖主类 initialize 以及有子类后 initialize 执行多次的问题，需要使用 dispatch_once 来保证代码只执行一次; \n### 删除无用代码\n删减没有被调用或者已经废弃的方法\n\n## main后优化：\n### 三方SDK\n有些三方 SDK 的启动耗时很高，将第三方SDK延后或并发。\n\n### 远程配置\n一些远程配置,如社区详情页支持flutter和H5方式展示,通过开关来控制,城市列表信息等,改为并发请求\n\n### 图片\n用 Asset 管理图片而不是直接放在 bundle 里。\n\nAsset 会在编译期做优化，让加载的时候更快。此外在 Asset 中加载图片是要比 Bundle 快的，因为 UIImage imageNamed 要遍历 Bundle 才能找到图。\n\n### 高耗时方法\nFlutter引擎初始化较为耗时,项目里用到的主要是二级页,故将它放在加载第一帧之后再初始化\n\n### 首帧渲染\n#### 自动布局\n自动布局改为frame布局方式,以提升布局性能\n\n#### 默认启动页\n除了第一次装包会显示倒计时启动页,之后每次启动都会显示一个默认启动页,和该默认启动页并发展示的是最终要展示的社区首页,因为社区首页需要网络请求加载数据,之前的方案为了每次冷启后不先展示一片空白影响用户体验,故先展示一个1s的默认启动页.\n\n这里把默认启动页去掉,对首页数据进行了缓存,初次装包后会对请求的数据进行缓存,之后启动会直接初始化社区首页,并从缓存加载数据\n\n#### 懒加载其它Tab页\n启动只加载推荐页，发现页、口碑页、排行榜、活动页等，点击时候再加载\n\n# 优化效果\n| 阶段        | 优化耗时 |\n| --------   |  :----:  |\n| 动态库改造     |  90ms     |\n| 二进制重排      |    270ms   |\n| load方法改造      |   160ms  |\n| main之后 | 1.3s |\n\n\n\n\n\n\n","source":"_posts/启动优化.md","raw":"---\ntitle: 启动优化\ndate: 2023-01-21 11:17:46\ntags:\ncategories: \n- iOS优化\n\n---\n# 启动过程：\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%89%87.png)\n\n启动过程以main为界限，分为pre-main和main之后两部分\n\n## pre-main\n### 加载dyld\n动态库载入过程，会去装载app使用的动态库。而每一个动态库有它自己的依赖关系，会消耗时间去查找和读取。\n### rebase&binding\nrebase：主要是调整镜像内部的指针，这里使用了ASLR(Address Space Layout Randomization 地址空间布局随机化)。程序每次启动后地址都会随机变化，这样程序里的所有代码地址都需要重新进行计算修复\n\nbinding：修复指向外部的指针。比如app中调用了NSLog函数打印信息，NSLog是系统函数，在程序开始运行的时候app是不知道NSLog函数指针是多少，此时就需要通过dyld_stub_binder技术找到NSLog指针地址进行调用。\n\n### Objc setup\nruntime在此处初始化，对class和category进行注 册，selector唯一性判断\n\nload&constructor&initialize\n\n调用所有类的load的方法，初始化C&C++的静态化变量，然后调用 constructor 函数\n\n## main之后\n### main函数\n创建整个app的autoreleasepool，初始化初始window，app界面开始展示\n\n### LifeCyle\n指定rootviewcontroller，调用业务代码，完成各阶段业务\n\n### First Frame\nmain页面viewDidAppear 完成页面第一帧渲染。至此启动完成。\n\n# 分析工具\n## pre-main阶段耗时分析:\n在 Xcode 中 Edit scheme -> Run -> Auguments 将环境变量 DYLD_PRINT_STATISTICS 设为1\n\n```powershell\nTotal pre-main time: 1.2 seconds (100.0%)\ndylib loading time: 297.95 milliseconds (23.5%)\nrebase/binding time: 100.67 milliseconds (7.9%)\nObjC setup time: 110.68 milliseconds (8.7%)\ninitializer time: 758.19 milliseconds (59.8%)\nslowest intializers :\nlibSystem.B.dylib : 6.71 milliseconds (0.5%)\nlibMainThreadChecker.dylib : 40.29 milliseconds (3.1%)\nGPUToolsCore : 37.95 milliseconds (2.9%)\nlibglInterpose.dylib : 363.65 milliseconds (28.6%)\nAiWayFashionCar : 471.71 milliseconds (37.2%)\n```\n如果将 Edit scheme -> Run > Auguments 将环境变量 DYLD_PRINT_STATISTICS_DETAILS 设为1，则可以更多详细的pre-main阶段的耗时：\n```plain\ntotal time: 2.1 seconds (100.0%)\ntotal images loaded: 526 (508 from dyld shared cache)\ntotal segments mapped: 66, into 8235 pages\ntotal images loading time: 1.0 seconds (49.3%)\ntotal load time in ObjC: 124.33 milliseconds (5.8%)\ntotal debugger pause time: 753.19 milliseconds (35.7%)\ntotal dtrace DOF registration time: 0.00 milliseconds (0.0%)\ntotal rebase fixups: 830,184\ntotal rebase fixups time: 95.24 milliseconds (4.5%)\ntotal binding fixups: 851,403\ntotal binding fixups time: 523.97 milliseconds (24.8%)\ntotal weak binding fixups time: 3.85 milliseconds (0.1%)\ntotal redo shared cached bindings time: 533.55 milliseconds (25.3%)\ntotal bindings lazily fixed up: 0 of 0\ntotal time in initializers and ObjC +load: 320.90 milliseconds (15.2%)\nkscrash libSystem.B.dylib : 6.78 milliseconds (0.3%)\nlibBacktraceRecording.dylib : 6.98 milliseconds (0.3%)\nlibobjc.A.dylib : 2.52 milliseconds (0.1%)\nlibMainThreadChecker.dylib : 40.53 milliseconds (1.9%)\nFlutter : 2.95 milliseconds (0.1%)\nAiWayFashionCar : 396.86 milliseconds (18.8%)\ntotal symbol trie searches: 1793354\ntotal symbol table binary searches: 0\ntotal images defining weak symbols: 63\ntotal images using weak symbols: 143\n```\n备注:这里要跑低于ios 15.0的系统,才会在控制台打印\n## 项目里用到的动态库：\n\n通过命令 **otool****-****L** +  包路径查看使用了的动态库（包含系统库、嵌入的动态库）：\n\n```plain\notool -L /Users/mac/Desktop/Debugiphoneos/AiWayFashionCar.app/AiWayFashionCar\n```\n执行结果如下:\n```plain\n/usr/lib/libbz2.1.0.dylib (compatibility version 1.0.0, current version 1.0.8)\n/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n/usr/lib/libsqlite3.dylib (compatibility version 9.0.0, current version 331.0.0)\n/usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11)\n@rpath/ATAuthSDK_D.framework/ATAuthSDK_D (compatibility version 1.0.0, current version 1.0.0)\n@rpath/App.framework/App (compatibility version 0.0.0, current version 0.0.0)\n/System/Library/Frameworks/AssetsLibrary.framework/AssetsLibrary (compatibility version 1.0.0, current version 1.0.0)\n/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox (compatibility version 1.0.0, current version 1000.0.0)\n/System/Library/Frameworks/CFNetwork.framework/CFNetwork (compatibility version 1.0.0, current version 1327.0.4)\n/System/Library/Frameworks/EventKit.framework/EventKit (compatibility version 1.0.0, current version 1716.2.2)\n@rpath/FMDB.framework/FMDB (compatibility version 1.0.0, current version 1.0.0)\n@rpath/Flutter.framework/Flutter (compatibility version 0.0.0, current version 0.0.0)\n/System/Library/Frameworks/Foundation.framework/Foundation (compatibility version 300.0.0, current version 1856.105.0)\n/System/Library/Frameworks/GLKit.framework/GLKit (compatibility version 1.0.0, current version 126.0.0)\n/System/Library/Frameworks/ImageIO.framework/ImageIO (compatibility version 1.0.0, current version 1.0.0)\n/System/Library/Frameworks/WebKit.framework/WebKit (compatibility version 1.0.0, current version 612.3.6)\n@rpath/flutter_boost.framework/flutter_boost (compatibility version 1.0.0, current version 1.0.0)\n@rpath/path_provider.framework/path_provider (compatibility version 1.0.0, current version 1.0.0)\n@rpath/shared_preferences.framework/shared_preferences (compatibility version 1.0.0, current version 1.0.0)\n@rpath/sqflite.framework/sqflite (compatibility version 1.0.0, current version 1.0.0)\n@rpath/video_player.framework/video_player (compatibility version 1.0.0, current version 1.0.0)\n@rpath/wakelock.framework/wakelock (compatibility version 1.0.0, current version 1.0.0)\n@rpath/webview_flutter.framework/webview_flutter (compatibility version 1.0.0, current version 1.0.0)\n/System/Library/Frameworks/AppTrackingTransparency.framework/AppTrackingTransparency (compatibility version 1.0.0, current version 1.0.0, weak)\n/System/Library/Frameworks/UserNotifications.framework/UserNotifications (compatibility version 1.0.0, current version 1.0.0, weak)\n/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)\n/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n/System/Library/Frameworks/AVKit.framework/AVKit (compatibility version 1.0.0, current version 1.0.0)\n/usr/lib/libnetwork.dylib (compatibility version 1.0.0, current version 1.0.0, weak)\n...\n```\n* 这里以/System ,/usr开头的是系统动态库\n* 以@rpath开头的是嵌入动态库,如u3d,flutter及其依赖项使用了动态库\n## 查找无用类、分类\n\n代码覆盖率检测等\n\n[AppCode](https://www.jetbrains.com/objc/download/)\n\n基于LLVM插件检测重复代码或者未被使用的代码\n\n[GitHub - erduoniba/hdcoverage: iOS（swift&amp;oc）自动注入代码覆盖率指令脚本，](https://github.com/erduoniba/hdcoverage)\n\n## 查看项目里调了哪些load方法：\n\n如果将 Edit scheme -> Run > Auguments 环境变量里加：OBJC_PRINT_LOAD_METHODS 设为YES\n\n```plain\nobjc[11939]: LOAD: +[NSMutableDictionary(SwizzlSafe) load]\nobjc[11939]: LOAD: +[NSNull(SwizzSafe) load]\nobjc[11939]: LOAD: +[NSString(SwizzlSafe) load]\nobjc[11939]: LOAD: +[NSMutableString(SwizzlSafe) load]\nobjc[11939]: LOAD: +[UIControl(AW) load]\nobjc[11939]: LOAD: +[UIApplication(MemoryLeak) load]\nobjc[11939]: LOAD: +[UINavigationController(MemoryLeak) load]\nobjc[11939]: LOAD: +[UITouch(MemoryLeak) load]\nobjc[11939]: LOAD: +[UIViewController(MemoryLeak) load]\nobjc[11939]: LOAD: +[NSObject(JPInjecting) load]\nobjc[11939]: LOAD: +[UITextView(RCSBackWord) load]\nobjc[11939]: LOAD: +[UITabBarController(ShouldAutorotate) load]\nobjc[11939]: LOAD: +[UIApplication(BaiduMobStatApplication) load]\nobjc[11939]: LOAD: +[UICollectionViewLayout(MJRefresh) load]\nobjc[11939]: LOAD: +[UIScrollView(MJExtension) load]\nobjc[11939]: LOAD: +[NSObject(MJKeyValue) load]\n```\n## 缺页异常引起的耗时分析:\n打开 `Instruments` , 选择 System Trace \n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png)\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%90%8E.png)\n## main之后各阶段耗时分析:\n打开 `Instruments` , 选择 App Launch , Time Profile\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E8%80%97%E6%97%B6%E5%88%86%E6%9E%90.png)\n结合\n```plain\nNSDate* tmpStartData = [NSDate date];    \n//耗时函数    \ndouble deltaTime = [[NSDate date] timeIntervalSinceDate:tmpStartData];\nNSLog(@\">>>>>>>>>>unity_launch_costTime = %f ms\", deltaTime*1000);\n```\n# 优化思路\n## pre-main优化\n### 二进制重排\n为了能减少系统因缺页中断产生的 Page In 操作，我们需要做的就是把启动链路上所有用到的方法都排在连续的页上，这样系统在加载符号的时候就可以减少相应的内存页数量的访问，从而减少整个启动过程的耗时\n\n### 动态库改造:\n项目用到的嵌入动态库主要是U3d,Flutter及其依赖库\n\nU3d库因为有要求必须得用动态库,故不作改造\n\n这里只把flutter依赖库改造为静态库,思路是在flutter模块的podfile里添加:\n\n```plain\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|    \n      config.build_settings['MACH_O_TYPE'] = 'staticlib'\n    end\n  end\nend\n```\nFlutter的引入是通过构建脚本生成动态库,然后导入到私有库引用,故这里直接更改构建脚本\n脚本更改：\n\n```plain\nsed -i '' '38a\\\n    target.build_configurations.each do |config|\\\n     config.build_settings['MACH_O_TYPE'] = 'staticlib'\\\n    end\\    \n' Podfile\n\n```\n需要安装gsed\n```plain\nbrew install gnu-sed\nalias sed='gsed'\n```\n### load方法改造\n从原则上来说，我们在开发过程中不应该使用 +load,针对 +load 方法的优化，主要是采用如下几种方案：\n\n* 删除不必要的代码； \n*  +load中代码延迟到 main 之后子线程处理或者首页显示之后； \n* 业务代码接口懒加载； \n*  改为 initialize 中执行，针对 initialize 中处理需要注意的是分类 initialize 会覆盖主类 initialize 以及有子类后 initialize 执行多次的问题，需要使用 dispatch_once 来保证代码只执行一次; \n### 删除无用代码\n删减没有被调用或者已经废弃的方法\n\n## main后优化：\n### 三方SDK\n有些三方 SDK 的启动耗时很高，将第三方SDK延后或并发。\n\n### 远程配置\n一些远程配置,如社区详情页支持flutter和H5方式展示,通过开关来控制,城市列表信息等,改为并发请求\n\n### 图片\n用 Asset 管理图片而不是直接放在 bundle 里。\n\nAsset 会在编译期做优化，让加载的时候更快。此外在 Asset 中加载图片是要比 Bundle 快的，因为 UIImage imageNamed 要遍历 Bundle 才能找到图。\n\n### 高耗时方法\nFlutter引擎初始化较为耗时,项目里用到的主要是二级页,故将它放在加载第一帧之后再初始化\n\n### 首帧渲染\n#### 自动布局\n自动布局改为frame布局方式,以提升布局性能\n\n#### 默认启动页\n除了第一次装包会显示倒计时启动页,之后每次启动都会显示一个默认启动页,和该默认启动页并发展示的是最终要展示的社区首页,因为社区首页需要网络请求加载数据,之前的方案为了每次冷启后不先展示一片空白影响用户体验,故先展示一个1s的默认启动页.\n\n这里把默认启动页去掉,对首页数据进行了缓存,初次装包后会对请求的数据进行缓存,之后启动会直接初始化社区首页,并从缓存加载数据\n\n#### 懒加载其它Tab页\n启动只加载推荐页，发现页、口碑页、排行榜、活动页等，点击时候再加载\n\n# 优化效果\n| 阶段        | 优化耗时 |\n| --------   |  :----:  |\n| 动态库改造     |  90ms     |\n| 二进制重排      |    270ms   |\n| load方法改造      |   160ms  |\n| main之后 | 1.3s |\n\n\n\n\n\n\n","slug":"启动优化","published":1,"updated":"2023-04-26T05:48:13.461Z","_id":"clgq3fgxm0000knzrhlva3v80","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"启动过程：\"><a href=\"#启动过程：\" class=\"headerlink\" title=\"启动过程：\"></a>启动过程：</h1><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%89%87.png\"></p>\n<p>启动过程以main为界限，分为pre-main和main之后两部分</p>\n<h2 id=\"pre-main\"><a href=\"#pre-main\" class=\"headerlink\" title=\"pre-main\"></a>pre-main</h2><h3 id=\"加载dyld\"><a href=\"#加载dyld\" class=\"headerlink\" title=\"加载dyld\"></a>加载dyld</h3><p>动态库载入过程，会去装载app使用的动态库。而每一个动态库有它自己的依赖关系，会消耗时间去查找和读取。</p>\n<h3 id=\"rebase-amp-binding\"><a href=\"#rebase-amp-binding\" class=\"headerlink\" title=\"rebase&amp;binding\"></a>rebase&amp;binding</h3><p>rebase：主要是调整镜像内部的指针，这里使用了ASLR(Address Space Layout Randomization 地址空间布局随机化)。程序每次启动后地址都会随机变化，这样程序里的所有代码地址都需要重新进行计算修复</p>\n<p>binding：修复指向外部的指针。比如app中调用了NSLog函数打印信息，NSLog是系统函数，在程序开始运行的时候app是不知道NSLog函数指针是多少，此时就需要通过dyld_stub_binder技术找到NSLog指针地址进行调用。</p>\n<h3 id=\"Objc-setup\"><a href=\"#Objc-setup\" class=\"headerlink\" title=\"Objc setup\"></a>Objc setup</h3><p>runtime在此处初始化，对class和category进行注 册，selector唯一性判断</p>\n<p>load&amp;constructor&amp;initialize</p>\n<p>调用所有类的load的方法，初始化C&amp;C++的静态化变量，然后调用 constructor 函数</p>\n<h2 id=\"main之后\"><a href=\"#main之后\" class=\"headerlink\" title=\"main之后\"></a>main之后</h2><h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p>创建整个app的autoreleasepool，初始化初始window，app界面开始展示</p>\n<h3 id=\"LifeCyle\"><a href=\"#LifeCyle\" class=\"headerlink\" title=\"LifeCyle\"></a>LifeCyle</h3><p>指定rootviewcontroller，调用业务代码，完成各阶段业务</p>\n<h3 id=\"First-Frame\"><a href=\"#First-Frame\" class=\"headerlink\" title=\"First Frame\"></a>First Frame</h3><p>main页面viewDidAppear 完成页面第一帧渲染。至此启动完成。</p>\n<h1 id=\"分析工具\"><a href=\"#分析工具\" class=\"headerlink\" title=\"分析工具\"></a>分析工具</h1><h2 id=\"pre-main阶段耗时分析\"><a href=\"#pre-main阶段耗时分析\" class=\"headerlink\" title=\"pre-main阶段耗时分析:\"></a>pre-main阶段耗时分析:</h2><p>在 Xcode 中 Edit scheme -&gt; Run -&gt; Auguments 将环境变量 DYLD_PRINT_STATISTICS 设为1</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Total pre<span class=\"literal\">-main</span> time: <span class=\"number\">1.2</span> seconds (<span class=\"number\">100.0</span>%)</span><br><span class=\"line\">dylib loading time: <span class=\"number\">297.95</span> milliseconds (<span class=\"number\">23.5</span>%)</span><br><span class=\"line\">rebase/binding time: <span class=\"number\">100.67</span> milliseconds (<span class=\"number\">7.9</span>%)</span><br><span class=\"line\">ObjC setup time: <span class=\"number\">110.68</span> milliseconds (<span class=\"number\">8.7</span>%)</span><br><span class=\"line\">initializer time: <span class=\"number\">758.19</span> milliseconds (<span class=\"number\">59.8</span>%)</span><br><span class=\"line\">slowest intializers :</span><br><span class=\"line\">libSystem.B.dylib : <span class=\"number\">6.71</span> milliseconds (<span class=\"number\">0.5</span>%)</span><br><span class=\"line\">libMainThreadChecker.dylib : <span class=\"number\">40.29</span> milliseconds (<span class=\"number\">3.1</span>%)</span><br><span class=\"line\">GPUToolsCore : <span class=\"number\">37.95</span> milliseconds (<span class=\"number\">2.9</span>%)</span><br><span class=\"line\">libglInterpose.dylib : <span class=\"number\">363.65</span> milliseconds (<span class=\"number\">28.6</span>%)</span><br><span class=\"line\">AiWayFashionCar : <span class=\"number\">471.71</span> milliseconds (<span class=\"number\">37.2</span>%)</span><br></pre></td></tr></table></figure>\n<p>如果将 Edit scheme -&gt; Run &gt; Auguments 将环境变量 DYLD_PRINT_STATISTICS_DETAILS 设为1，则可以更多详细的pre-main阶段的耗时：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total time: 2.1 seconds (100.0%)</span><br><span class=\"line\">total images loaded: 526 (508 from dyld shared cache)</span><br><span class=\"line\">total segments mapped: 66, into 8235 pages</span><br><span class=\"line\">total images loading time: 1.0 seconds (49.3%)</span><br><span class=\"line\">total load time in ObjC: 124.33 milliseconds (5.8%)</span><br><span class=\"line\">total debugger pause time: 753.19 milliseconds (35.7%)</span><br><span class=\"line\">total dtrace DOF registration time: 0.00 milliseconds (0.0%)</span><br><span class=\"line\">total rebase fixups: 830,184</span><br><span class=\"line\">total rebase fixups time: 95.24 milliseconds (4.5%)</span><br><span class=\"line\">total binding fixups: 851,403</span><br><span class=\"line\">total binding fixups time: 523.97 milliseconds (24.8%)</span><br><span class=\"line\">total weak binding fixups time: 3.85 milliseconds (0.1%)</span><br><span class=\"line\">total redo shared cached bindings time: 533.55 milliseconds (25.3%)</span><br><span class=\"line\">total bindings lazily fixed up: 0 of 0</span><br><span class=\"line\">total time in initializers and ObjC +load: 320.90 milliseconds (15.2%)</span><br><span class=\"line\">kscrash libSystem.B.dylib : 6.78 milliseconds (0.3%)</span><br><span class=\"line\">libBacktraceRecording.dylib : 6.98 milliseconds (0.3%)</span><br><span class=\"line\">libobjc.A.dylib : 2.52 milliseconds (0.1%)</span><br><span class=\"line\">libMainThreadChecker.dylib : 40.53 milliseconds (1.9%)</span><br><span class=\"line\">Flutter : 2.95 milliseconds (0.1%)</span><br><span class=\"line\">AiWayFashionCar : 396.86 milliseconds (18.8%)</span><br><span class=\"line\">total symbol trie searches: 1793354</span><br><span class=\"line\">total symbol table binary searches: 0</span><br><span class=\"line\">total images defining weak symbols: 63</span><br><span class=\"line\">total images using weak symbols: 143</span><br></pre></td></tr></table></figure>\n<p>备注:这里要跑低于ios 15.0的系统,才会在控制台打印</p>\n<h2 id=\"项目里用到的动态库：\"><a href=\"#项目里用到的动态库：\" class=\"headerlink\" title=\"项目里用到的动态库：\"></a>项目里用到的动态库：</h2><p>通过命令 <strong>otool</strong>**-**<strong>L</strong> +  包路径查看使用了的动态库（包含系统库、嵌入的动态库）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">otool -L /Users/mac/Desktop/Debugiphoneos/AiWayFashionCar.app/AiWayFashionCar</span><br></pre></td></tr></table></figure>\n<p>执行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/lib/libbz2.1.0.dylib (compatibility version 1.0.0, current version 1.0.8)</span><br><span class=\"line\">/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)</span><br><span class=\"line\">/usr/lib/libsqlite3.dylib (compatibility version 9.0.0, current version 331.0.0)</span><br><span class=\"line\">/usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11)</span><br><span class=\"line\">@rpath/ATAuthSDK_D.framework/ATAuthSDK_D (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/App.framework/App (compatibility version 0.0.0, current version 0.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/AssetsLibrary.framework/AssetsLibrary (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox (compatibility version 1.0.0, current version 1000.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/CFNetwork.framework/CFNetwork (compatibility version 1.0.0, current version 1327.0.4)</span><br><span class=\"line\">/System/Library/Frameworks/EventKit.framework/EventKit (compatibility version 1.0.0, current version 1716.2.2)</span><br><span class=\"line\">@rpath/FMDB.framework/FMDB (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/Flutter.framework/Flutter (compatibility version 0.0.0, current version 0.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/Foundation.framework/Foundation (compatibility version 300.0.0, current version 1856.105.0)</span><br><span class=\"line\">/System/Library/Frameworks/GLKit.framework/GLKit (compatibility version 1.0.0, current version 126.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/ImageIO.framework/ImageIO (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/WebKit.framework/WebKit (compatibility version 1.0.0, current version 612.3.6)</span><br><span class=\"line\">@rpath/flutter_boost.framework/flutter_boost (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/path_provider.framework/path_provider (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/shared_preferences.framework/shared_preferences (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/sqflite.framework/sqflite (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/video_player.framework/video_player (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/wakelock.framework/wakelock (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/webview_flutter.framework/webview_flutter (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/AppTrackingTransparency.framework/AppTrackingTransparency (compatibility version 1.0.0, current version 1.0.0, weak)</span><br><span class=\"line\">/System/Library/Frameworks/UserNotifications.framework/UserNotifications (compatibility version 1.0.0, current version 1.0.0, weak)</span><br><span class=\"line\">/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)</span><br><span class=\"line\">/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/AVKit.framework/AVKit (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">/usr/lib/libnetwork.dylib (compatibility version 1.0.0, current version 1.0.0, weak)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这里以/System ,/usr开头的是系统动态库</li>\n<li>以@rpath开头的是嵌入动态库,如u3d,flutter及其依赖项使用了动态库<h2 id=\"查找无用类、分类\"><a href=\"#查找无用类、分类\" class=\"headerlink\" title=\"查找无用类、分类\"></a>查找无用类、分类</h2></li>\n</ul>\n<p>代码覆盖率检测等</p>\n<p><a href=\"https://www.jetbrains.com/objc/download/\">AppCode</a></p>\n<p>基于LLVM插件检测重复代码或者未被使用的代码</p>\n<p><a href=\"https://github.com/erduoniba/hdcoverage\">GitHub - erduoniba/hdcoverage: iOS（swift&amp;oc）自动注入代码覆盖率指令脚本，</a></p>\n<h2 id=\"查看项目里调了哪些load方法：\"><a href=\"#查看项目里调了哪些load方法：\" class=\"headerlink\" title=\"查看项目里调了哪些load方法：\"></a>查看项目里调了哪些load方法：</h2><p>如果将 Edit scheme -&gt; Run &gt; Auguments 环境变量里加：OBJC_PRINT_LOAD_METHODS 设为YES</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objc[11939]: LOAD: +[NSMutableDictionary(SwizzlSafe) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[NSNull(SwizzSafe) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[NSString(SwizzlSafe) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[NSMutableString(SwizzlSafe) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UIControl(AW) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UIApplication(MemoryLeak) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UINavigationController(MemoryLeak) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UITouch(MemoryLeak) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UIViewController(MemoryLeak) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[NSObject(JPInjecting) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UITextView(RCSBackWord) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UITabBarController(ShouldAutorotate) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UIApplication(BaiduMobStatApplication) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UICollectionViewLayout(MJRefresh) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UIScrollView(MJExtension) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[NSObject(MJKeyValue) load]</span><br></pre></td></tr></table></figure>\n<h2 id=\"缺页异常引起的耗时分析\"><a href=\"#缺页异常引起的耗时分析\" class=\"headerlink\" title=\"缺页异常引起的耗时分析:\"></a>缺页异常引起的耗时分析:</h2><p>打开 <code>Instruments</code> , 选择 System Trace<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png\"><br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%90%8E.png\"></p>\n<h2 id=\"main之后各阶段耗时分析\"><a href=\"#main之后各阶段耗时分析\" class=\"headerlink\" title=\"main之后各阶段耗时分析:\"></a>main之后各阶段耗时分析:</h2><p>打开 <code>Instruments</code> , 选择 App Launch , Time Profile<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E8%80%97%E6%97%B6%E5%88%86%E6%9E%90.png\"><br>结合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDate* tmpStartData = [NSDate date];    </span><br><span class=\"line\">//耗时函数    </span><br><span class=\"line\">double deltaTime = [[NSDate date] timeIntervalSinceDate:tmpStartData];</span><br><span class=\"line\">NSLog(@&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;unity_launch_costTime = %f ms&quot;, deltaTime*1000);</span><br></pre></td></tr></table></figure>\n<h1 id=\"优化思路\"><a href=\"#优化思路\" class=\"headerlink\" title=\"优化思路\"></a>优化思路</h1><h2 id=\"pre-main优化\"><a href=\"#pre-main优化\" class=\"headerlink\" title=\"pre-main优化\"></a>pre-main优化</h2><h3 id=\"二进制重排\"><a href=\"#二进制重排\" class=\"headerlink\" title=\"二进制重排\"></a>二进制重排</h3><p>为了能减少系统因缺页中断产生的 Page In 操作，我们需要做的就是把启动链路上所有用到的方法都排在连续的页上，这样系统在加载符号的时候就可以减少相应的内存页数量的访问，从而减少整个启动过程的耗时</p>\n<h3 id=\"动态库改造\"><a href=\"#动态库改造\" class=\"headerlink\" title=\"动态库改造:\"></a>动态库改造:</h3><p>项目用到的嵌入动态库主要是U3d,Flutter及其依赖库</p>\n<p>U3d库因为有要求必须得用动态库,故不作改造</p>\n<p>这里只把flutter依赖库改造为静态库,思路是在flutter模块的podfile里添加:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install do |installer|</span><br><span class=\"line\">  installer.pods_project.targets.each do |target|</span><br><span class=\"line\">    target.build_configurations.each do |config|    </span><br><span class=\"line\">      config.build_settings[&#x27;MACH_O_TYPE&#x27;] = &#x27;staticlib&#x27;</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>Flutter的引入是通过构建脚本生成动态库,然后导入到私有库引用,故这里直接更改构建脚本<br>脚本更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;&#x27; &#x27;38a\\</span><br><span class=\"line\">    target.build_configurations.each do |config|\\</span><br><span class=\"line\">     config.build_settings[&#x27;MACH_O_TYPE&#x27;] = &#x27;staticlib&#x27;\\</span><br><span class=\"line\">    end\\    </span><br><span class=\"line\">&#x27; Podfile</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需要安装gsed</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gnu-sed</span><br><span class=\"line\">alias sed=&#x27;gsed&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"load方法改造\"><a href=\"#load方法改造\" class=\"headerlink\" title=\"load方法改造\"></a>load方法改造</h3><p>从原则上来说，我们在开发过程中不应该使用 +load,针对 +load 方法的优化，主要是采用如下几种方案：</p>\n<ul>\n<li>删除不必要的代码； </li>\n<li> +load中代码延迟到 main 之后子线程处理或者首页显示之后； </li>\n<li>业务代码接口懒加载； </li>\n<li> 改为 initialize 中执行，针对 initialize 中处理需要注意的是分类 initialize 会覆盖主类 initialize 以及有子类后 initialize 执行多次的问题，需要使用 dispatch_once 来保证代码只执行一次; <h3 id=\"删除无用代码\"><a href=\"#删除无用代码\" class=\"headerlink\" title=\"删除无用代码\"></a>删除无用代码</h3>删减没有被调用或者已经废弃的方法</li>\n</ul>\n<h2 id=\"main后优化：\"><a href=\"#main后优化：\" class=\"headerlink\" title=\"main后优化：\"></a>main后优化：</h2><h3 id=\"三方SDK\"><a href=\"#三方SDK\" class=\"headerlink\" title=\"三方SDK\"></a>三方SDK</h3><p>有些三方 SDK 的启动耗时很高，将第三方SDK延后或并发。</p>\n<h3 id=\"远程配置\"><a href=\"#远程配置\" class=\"headerlink\" title=\"远程配置\"></a>远程配置</h3><p>一些远程配置,如社区详情页支持flutter和H5方式展示,通过开关来控制,城市列表信息等,改为并发请求</p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>用 Asset 管理图片而不是直接放在 bundle 里。</p>\n<p>Asset 会在编译期做优化，让加载的时候更快。此外在 Asset 中加载图片是要比 Bundle 快的，因为 UIImage imageNamed 要遍历 Bundle 才能找到图。</p>\n<h3 id=\"高耗时方法\"><a href=\"#高耗时方法\" class=\"headerlink\" title=\"高耗时方法\"></a>高耗时方法</h3><p>Flutter引擎初始化较为耗时,项目里用到的主要是二级页,故将它放在加载第一帧之后再初始化</p>\n<h3 id=\"首帧渲染\"><a href=\"#首帧渲染\" class=\"headerlink\" title=\"首帧渲染\"></a>首帧渲染</h3><h4 id=\"自动布局\"><a href=\"#自动布局\" class=\"headerlink\" title=\"自动布局\"></a>自动布局</h4><p>自动布局改为frame布局方式,以提升布局性能</p>\n<h4 id=\"默认启动页\"><a href=\"#默认启动页\" class=\"headerlink\" title=\"默认启动页\"></a>默认启动页</h4><p>除了第一次装包会显示倒计时启动页,之后每次启动都会显示一个默认启动页,和该默认启动页并发展示的是最终要展示的社区首页,因为社区首页需要网络请求加载数据,之前的方案为了每次冷启后不先展示一片空白影响用户体验,故先展示一个1s的默认启动页.</p>\n<p>这里把默认启动页去掉,对首页数据进行了缓存,初次装包后会对请求的数据进行缓存,之后启动会直接初始化社区首页,并从缓存加载数据</p>\n<h4 id=\"懒加载其它Tab页\"><a href=\"#懒加载其它Tab页\" class=\"headerlink\" title=\"懒加载其它Tab页\"></a>懒加载其它Tab页</h4><p>启动只加载推荐页，发现页、口碑页、排行榜、活动页等，点击时候再加载</p>\n<h1 id=\"优化效果\"><a href=\"#优化效果\" class=\"headerlink\" title=\"优化效果\"></a>优化效果</h1><table>\n<thead>\n<tr>\n<th>阶段</th>\n<th align=\"center\">优化耗时</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>动态库改造</td>\n<td align=\"center\">90ms</td>\n</tr>\n<tr>\n<td>二进制重排</td>\n<td align=\"center\">270ms</td>\n</tr>\n<tr>\n<td>load方法改造</td>\n<td align=\"center\">160ms</td>\n</tr>\n<tr>\n<td>main之后</td>\n<td align=\"center\">1.3s</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"启动过程：\"><a href=\"#启动过程：\" class=\"headerlink\" title=\"启动过程：\"></a>启动过程：</h1><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%89%87.png\"></p>\n<p>启动过程以main为界限，分为pre-main和main之后两部分</p>\n<h2 id=\"pre-main\"><a href=\"#pre-main\" class=\"headerlink\" title=\"pre-main\"></a>pre-main</h2><h3 id=\"加载dyld\"><a href=\"#加载dyld\" class=\"headerlink\" title=\"加载dyld\"></a>加载dyld</h3><p>动态库载入过程，会去装载app使用的动态库。而每一个动态库有它自己的依赖关系，会消耗时间去查找和读取。</p>\n<h3 id=\"rebase-amp-binding\"><a href=\"#rebase-amp-binding\" class=\"headerlink\" title=\"rebase&amp;binding\"></a>rebase&amp;binding</h3><p>rebase：主要是调整镜像内部的指针，这里使用了ASLR(Address Space Layout Randomization 地址空间布局随机化)。程序每次启动后地址都会随机变化，这样程序里的所有代码地址都需要重新进行计算修复</p>\n<p>binding：修复指向外部的指针。比如app中调用了NSLog函数打印信息，NSLog是系统函数，在程序开始运行的时候app是不知道NSLog函数指针是多少，此时就需要通过dyld_stub_binder技术找到NSLog指针地址进行调用。</p>\n<h3 id=\"Objc-setup\"><a href=\"#Objc-setup\" class=\"headerlink\" title=\"Objc setup\"></a>Objc setup</h3><p>runtime在此处初始化，对class和category进行注 册，selector唯一性判断</p>\n<p>load&amp;constructor&amp;initialize</p>\n<p>调用所有类的load的方法，初始化C&amp;C++的静态化变量，然后调用 constructor 函数</p>\n<h2 id=\"main之后\"><a href=\"#main之后\" class=\"headerlink\" title=\"main之后\"></a>main之后</h2><h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p>创建整个app的autoreleasepool，初始化初始window，app界面开始展示</p>\n<h3 id=\"LifeCyle\"><a href=\"#LifeCyle\" class=\"headerlink\" title=\"LifeCyle\"></a>LifeCyle</h3><p>指定rootviewcontroller，调用业务代码，完成各阶段业务</p>\n<h3 id=\"First-Frame\"><a href=\"#First-Frame\" class=\"headerlink\" title=\"First Frame\"></a>First Frame</h3><p>main页面viewDidAppear 完成页面第一帧渲染。至此启动完成。</p>\n<h1 id=\"分析工具\"><a href=\"#分析工具\" class=\"headerlink\" title=\"分析工具\"></a>分析工具</h1><h2 id=\"pre-main阶段耗时分析\"><a href=\"#pre-main阶段耗时分析\" class=\"headerlink\" title=\"pre-main阶段耗时分析:\"></a>pre-main阶段耗时分析:</h2><p>在 Xcode 中 Edit scheme -&gt; Run -&gt; Auguments 将环境变量 DYLD_PRINT_STATISTICS 设为1</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Total pre<span class=\"literal\">-main</span> time: <span class=\"number\">1.2</span> seconds (<span class=\"number\">100.0</span>%)</span><br><span class=\"line\">dylib loading time: <span class=\"number\">297.95</span> milliseconds (<span class=\"number\">23.5</span>%)</span><br><span class=\"line\">rebase/binding time: <span class=\"number\">100.67</span> milliseconds (<span class=\"number\">7.9</span>%)</span><br><span class=\"line\">ObjC setup time: <span class=\"number\">110.68</span> milliseconds (<span class=\"number\">8.7</span>%)</span><br><span class=\"line\">initializer time: <span class=\"number\">758.19</span> milliseconds (<span class=\"number\">59.8</span>%)</span><br><span class=\"line\">slowest intializers :</span><br><span class=\"line\">libSystem.B.dylib : <span class=\"number\">6.71</span> milliseconds (<span class=\"number\">0.5</span>%)</span><br><span class=\"line\">libMainThreadChecker.dylib : <span class=\"number\">40.29</span> milliseconds (<span class=\"number\">3.1</span>%)</span><br><span class=\"line\">GPUToolsCore : <span class=\"number\">37.95</span> milliseconds (<span class=\"number\">2.9</span>%)</span><br><span class=\"line\">libglInterpose.dylib : <span class=\"number\">363.65</span> milliseconds (<span class=\"number\">28.6</span>%)</span><br><span class=\"line\">AiWayFashionCar : <span class=\"number\">471.71</span> milliseconds (<span class=\"number\">37.2</span>%)</span><br></pre></td></tr></table></figure>\n<p>如果将 Edit scheme -&gt; Run &gt; Auguments 将环境变量 DYLD_PRINT_STATISTICS_DETAILS 设为1，则可以更多详细的pre-main阶段的耗时：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total time: 2.1 seconds (100.0%)</span><br><span class=\"line\">total images loaded: 526 (508 from dyld shared cache)</span><br><span class=\"line\">total segments mapped: 66, into 8235 pages</span><br><span class=\"line\">total images loading time: 1.0 seconds (49.3%)</span><br><span class=\"line\">total load time in ObjC: 124.33 milliseconds (5.8%)</span><br><span class=\"line\">total debugger pause time: 753.19 milliseconds (35.7%)</span><br><span class=\"line\">total dtrace DOF registration time: 0.00 milliseconds (0.0%)</span><br><span class=\"line\">total rebase fixups: 830,184</span><br><span class=\"line\">total rebase fixups time: 95.24 milliseconds (4.5%)</span><br><span class=\"line\">total binding fixups: 851,403</span><br><span class=\"line\">total binding fixups time: 523.97 milliseconds (24.8%)</span><br><span class=\"line\">total weak binding fixups time: 3.85 milliseconds (0.1%)</span><br><span class=\"line\">total redo shared cached bindings time: 533.55 milliseconds (25.3%)</span><br><span class=\"line\">total bindings lazily fixed up: 0 of 0</span><br><span class=\"line\">total time in initializers and ObjC +load: 320.90 milliseconds (15.2%)</span><br><span class=\"line\">kscrash libSystem.B.dylib : 6.78 milliseconds (0.3%)</span><br><span class=\"line\">libBacktraceRecording.dylib : 6.98 milliseconds (0.3%)</span><br><span class=\"line\">libobjc.A.dylib : 2.52 milliseconds (0.1%)</span><br><span class=\"line\">libMainThreadChecker.dylib : 40.53 milliseconds (1.9%)</span><br><span class=\"line\">Flutter : 2.95 milliseconds (0.1%)</span><br><span class=\"line\">AiWayFashionCar : 396.86 milliseconds (18.8%)</span><br><span class=\"line\">total symbol trie searches: 1793354</span><br><span class=\"line\">total symbol table binary searches: 0</span><br><span class=\"line\">total images defining weak symbols: 63</span><br><span class=\"line\">total images using weak symbols: 143</span><br></pre></td></tr></table></figure>\n<p>备注:这里要跑低于ios 15.0的系统,才会在控制台打印</p>\n<h2 id=\"项目里用到的动态库：\"><a href=\"#项目里用到的动态库：\" class=\"headerlink\" title=\"项目里用到的动态库：\"></a>项目里用到的动态库：</h2><p>通过命令 <strong>otool</strong>**-**<strong>L</strong> +  包路径查看使用了的动态库（包含系统库、嵌入的动态库）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">otool -L /Users/mac/Desktop/Debugiphoneos/AiWayFashionCar.app/AiWayFashionCar</span><br></pre></td></tr></table></figure>\n<p>执行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/lib/libbz2.1.0.dylib (compatibility version 1.0.0, current version 1.0.8)</span><br><span class=\"line\">/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)</span><br><span class=\"line\">/usr/lib/libsqlite3.dylib (compatibility version 9.0.0, current version 331.0.0)</span><br><span class=\"line\">/usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11)</span><br><span class=\"line\">@rpath/ATAuthSDK_D.framework/ATAuthSDK_D (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/App.framework/App (compatibility version 0.0.0, current version 0.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/AssetsLibrary.framework/AssetsLibrary (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox (compatibility version 1.0.0, current version 1000.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/CFNetwork.framework/CFNetwork (compatibility version 1.0.0, current version 1327.0.4)</span><br><span class=\"line\">/System/Library/Frameworks/EventKit.framework/EventKit (compatibility version 1.0.0, current version 1716.2.2)</span><br><span class=\"line\">@rpath/FMDB.framework/FMDB (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/Flutter.framework/Flutter (compatibility version 0.0.0, current version 0.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/Foundation.framework/Foundation (compatibility version 300.0.0, current version 1856.105.0)</span><br><span class=\"line\">/System/Library/Frameworks/GLKit.framework/GLKit (compatibility version 1.0.0, current version 126.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/ImageIO.framework/ImageIO (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/WebKit.framework/WebKit (compatibility version 1.0.0, current version 612.3.6)</span><br><span class=\"line\">@rpath/flutter_boost.framework/flutter_boost (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/path_provider.framework/path_provider (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/shared_preferences.framework/shared_preferences (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/sqflite.framework/sqflite (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/video_player.framework/video_player (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/wakelock.framework/wakelock (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">@rpath/webview_flutter.framework/webview_flutter (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/AppTrackingTransparency.framework/AppTrackingTransparency (compatibility version 1.0.0, current version 1.0.0, weak)</span><br><span class=\"line\">/System/Library/Frameworks/UserNotifications.framework/UserNotifications (compatibility version 1.0.0, current version 1.0.0, weak)</span><br><span class=\"line\">/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)</span><br><span class=\"line\">/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)</span><br><span class=\"line\">/System/Library/Frameworks/AVKit.framework/AVKit (compatibility version 1.0.0, current version 1.0.0)</span><br><span class=\"line\">/usr/lib/libnetwork.dylib (compatibility version 1.0.0, current version 1.0.0, weak)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这里以/System ,/usr开头的是系统动态库</li>\n<li>以@rpath开头的是嵌入动态库,如u3d,flutter及其依赖项使用了动态库<h2 id=\"查找无用类、分类\"><a href=\"#查找无用类、分类\" class=\"headerlink\" title=\"查找无用类、分类\"></a>查找无用类、分类</h2></li>\n</ul>\n<p>代码覆盖率检测等</p>\n<p><a href=\"https://www.jetbrains.com/objc/download/\">AppCode</a></p>\n<p>基于LLVM插件检测重复代码或者未被使用的代码</p>\n<p><a href=\"https://github.com/erduoniba/hdcoverage\">GitHub - erduoniba/hdcoverage: iOS（swift&amp;oc）自动注入代码覆盖率指令脚本，</a></p>\n<h2 id=\"查看项目里调了哪些load方法：\"><a href=\"#查看项目里调了哪些load方法：\" class=\"headerlink\" title=\"查看项目里调了哪些load方法：\"></a>查看项目里调了哪些load方法：</h2><p>如果将 Edit scheme -&gt; Run &gt; Auguments 环境变量里加：OBJC_PRINT_LOAD_METHODS 设为YES</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objc[11939]: LOAD: +[NSMutableDictionary(SwizzlSafe) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[NSNull(SwizzSafe) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[NSString(SwizzlSafe) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[NSMutableString(SwizzlSafe) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UIControl(AW) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UIApplication(MemoryLeak) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UINavigationController(MemoryLeak) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UITouch(MemoryLeak) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UIViewController(MemoryLeak) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[NSObject(JPInjecting) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UITextView(RCSBackWord) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UITabBarController(ShouldAutorotate) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UIApplication(BaiduMobStatApplication) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UICollectionViewLayout(MJRefresh) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[UIScrollView(MJExtension) load]</span><br><span class=\"line\">objc[11939]: LOAD: +[NSObject(MJKeyValue) load]</span><br></pre></td></tr></table></figure>\n<h2 id=\"缺页异常引起的耗时分析\"><a href=\"#缺页异常引起的耗时分析\" class=\"headerlink\" title=\"缺页异常引起的耗时分析:\"></a>缺页异常引起的耗时分析:</h2><p>打开 <code>Instruments</code> , 选择 System Trace<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png\"><br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%90%8E.png\"></p>\n<h2 id=\"main之后各阶段耗时分析\"><a href=\"#main之后各阶段耗时分析\" class=\"headerlink\" title=\"main之后各阶段耗时分析:\"></a>main之后各阶段耗时分析:</h2><p>打开 <code>Instruments</code> , 选择 App Launch , Time Profile<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/%E8%80%97%E6%97%B6%E5%88%86%E6%9E%90.png\"><br>结合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDate* tmpStartData = [NSDate date];    </span><br><span class=\"line\">//耗时函数    </span><br><span class=\"line\">double deltaTime = [[NSDate date] timeIntervalSinceDate:tmpStartData];</span><br><span class=\"line\">NSLog(@&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;unity_launch_costTime = %f ms&quot;, deltaTime*1000);</span><br></pre></td></tr></table></figure>\n<h1 id=\"优化思路\"><a href=\"#优化思路\" class=\"headerlink\" title=\"优化思路\"></a>优化思路</h1><h2 id=\"pre-main优化\"><a href=\"#pre-main优化\" class=\"headerlink\" title=\"pre-main优化\"></a>pre-main优化</h2><h3 id=\"二进制重排\"><a href=\"#二进制重排\" class=\"headerlink\" title=\"二进制重排\"></a>二进制重排</h3><p>为了能减少系统因缺页中断产生的 Page In 操作，我们需要做的就是把启动链路上所有用到的方法都排在连续的页上，这样系统在加载符号的时候就可以减少相应的内存页数量的访问，从而减少整个启动过程的耗时</p>\n<h3 id=\"动态库改造\"><a href=\"#动态库改造\" class=\"headerlink\" title=\"动态库改造:\"></a>动态库改造:</h3><p>项目用到的嵌入动态库主要是U3d,Flutter及其依赖库</p>\n<p>U3d库因为有要求必须得用动态库,故不作改造</p>\n<p>这里只把flutter依赖库改造为静态库,思路是在flutter模块的podfile里添加:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install do |installer|</span><br><span class=\"line\">  installer.pods_project.targets.each do |target|</span><br><span class=\"line\">    target.build_configurations.each do |config|    </span><br><span class=\"line\">      config.build_settings[&#x27;MACH_O_TYPE&#x27;] = &#x27;staticlib&#x27;</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>Flutter的引入是通过构建脚本生成动态库,然后导入到私有库引用,故这里直接更改构建脚本<br>脚本更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;&#x27; &#x27;38a\\</span><br><span class=\"line\">    target.build_configurations.each do |config|\\</span><br><span class=\"line\">     config.build_settings[&#x27;MACH_O_TYPE&#x27;] = &#x27;staticlib&#x27;\\</span><br><span class=\"line\">    end\\    </span><br><span class=\"line\">&#x27; Podfile</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需要安装gsed</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gnu-sed</span><br><span class=\"line\">alias sed=&#x27;gsed&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"load方法改造\"><a href=\"#load方法改造\" class=\"headerlink\" title=\"load方法改造\"></a>load方法改造</h3><p>从原则上来说，我们在开发过程中不应该使用 +load,针对 +load 方法的优化，主要是采用如下几种方案：</p>\n<ul>\n<li>删除不必要的代码； </li>\n<li> +load中代码延迟到 main 之后子线程处理或者首页显示之后； </li>\n<li>业务代码接口懒加载； </li>\n<li> 改为 initialize 中执行，针对 initialize 中处理需要注意的是分类 initialize 会覆盖主类 initialize 以及有子类后 initialize 执行多次的问题，需要使用 dispatch_once 来保证代码只执行一次; <h3 id=\"删除无用代码\"><a href=\"#删除无用代码\" class=\"headerlink\" title=\"删除无用代码\"></a>删除无用代码</h3>删减没有被调用或者已经废弃的方法</li>\n</ul>\n<h2 id=\"main后优化：\"><a href=\"#main后优化：\" class=\"headerlink\" title=\"main后优化：\"></a>main后优化：</h2><h3 id=\"三方SDK\"><a href=\"#三方SDK\" class=\"headerlink\" title=\"三方SDK\"></a>三方SDK</h3><p>有些三方 SDK 的启动耗时很高，将第三方SDK延后或并发。</p>\n<h3 id=\"远程配置\"><a href=\"#远程配置\" class=\"headerlink\" title=\"远程配置\"></a>远程配置</h3><p>一些远程配置,如社区详情页支持flutter和H5方式展示,通过开关来控制,城市列表信息等,改为并发请求</p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>用 Asset 管理图片而不是直接放在 bundle 里。</p>\n<p>Asset 会在编译期做优化，让加载的时候更快。此外在 Asset 中加载图片是要比 Bundle 快的，因为 UIImage imageNamed 要遍历 Bundle 才能找到图。</p>\n<h3 id=\"高耗时方法\"><a href=\"#高耗时方法\" class=\"headerlink\" title=\"高耗时方法\"></a>高耗时方法</h3><p>Flutter引擎初始化较为耗时,项目里用到的主要是二级页,故将它放在加载第一帧之后再初始化</p>\n<h3 id=\"首帧渲染\"><a href=\"#首帧渲染\" class=\"headerlink\" title=\"首帧渲染\"></a>首帧渲染</h3><h4 id=\"自动布局\"><a href=\"#自动布局\" class=\"headerlink\" title=\"自动布局\"></a>自动布局</h4><p>自动布局改为frame布局方式,以提升布局性能</p>\n<h4 id=\"默认启动页\"><a href=\"#默认启动页\" class=\"headerlink\" title=\"默认启动页\"></a>默认启动页</h4><p>除了第一次装包会显示倒计时启动页,之后每次启动都会显示一个默认启动页,和该默认启动页并发展示的是最终要展示的社区首页,因为社区首页需要网络请求加载数据,之前的方案为了每次冷启后不先展示一片空白影响用户体验,故先展示一个1s的默认启动页.</p>\n<p>这里把默认启动页去掉,对首页数据进行了缓存,初次装包后会对请求的数据进行缓存,之后启动会直接初始化社区首页,并从缓存加载数据</p>\n<h4 id=\"懒加载其它Tab页\"><a href=\"#懒加载其它Tab页\" class=\"headerlink\" title=\"懒加载其它Tab页\"></a>懒加载其它Tab页</h4><p>启动只加载推荐页，发现页、口碑页、排行榜、活动页等，点击时候再加载</p>\n<h1 id=\"优化效果\"><a href=\"#优化效果\" class=\"headerlink\" title=\"优化效果\"></a>优化效果</h1><table>\n<thead>\n<tr>\n<th>阶段</th>\n<th align=\"center\">优化耗时</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>动态库改造</td>\n<td align=\"center\">90ms</td>\n</tr>\n<tr>\n<td>二进制重排</td>\n<td align=\"center\">270ms</td>\n</tr>\n<tr>\n<td>load方法改造</td>\n<td align=\"center\">160ms</td>\n</tr>\n<tr>\n<td>main之后</td>\n<td align=\"center\">1.3s</td>\n</tr>\n</tbody></table>\n"},{"title":"二进制重排","date":"2023-01-16T08:15:40.000Z","_content":"# 为什么进行二进制重排\n\n  当用户点击 App 启动的时候，系统会创建进程并为进程申请一块虚拟内存，虚拟内存和物理内存是需要映射的。当进程需要访问的一块虚拟内存页还没有映射对应的物理内存页时，就会触发一次缺页中断 Page In。这个过程中会发生 I/O 操作，将磁盘中的数据读入到物理内存页中。如果读入的是 Text 段的页，还需要解密，并且系统还会对解密后的页进行签名验证。所以，如果在启动过程中频繁的发生 Page In 的话，Page In 引起的 I/O 操作以及解密验证操作等的耗时也是影响很大的。需要注意的是，iOS13 及以后苹果对这个过程进行了优化，Page In 的时候不再需要解密了。\n\n  Page In 的具体情况我们可以通过 Instruments 中的 System Trace 工具来分析，其中找到 Main Thread 进程，再选择 Summary:Virtual Memory 选项，下面看到的 File Backed Page In 就是对应的缺页中断数据了，如下图所示：\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png)\n\n在启动过程中过多的 Page In 会产生过多的 I/O 操作以及解密验证操作，这些操作的耗时影响也会比较大。针对 Page In 的影响，我们可以通过二进制重排来减少这个过程的耗时。我们知道进程在访问虚拟内存的时候是以页为单位的，而启动过程中的两个方法如果在不同的页，系统就会进行两次缺页中断 Page In 操作来加载这两个页。而如果启动链路上的方法分散在不同的页的话，整个启动的过程就会产生非常多的 Page In 操作。为了能减少系统因缺页中断产生的 Page In 操作，我们需要做的就是把启动链路上所有用到的方法都排在连续的页上，这样系统在加载符号的时候就可以减少相应的内存页数量的访问，从而减少整个启动过程的耗时，如下图所示：\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/launchPage.png) \n\n  要实现符号的重排，一是需要我们收集整个启动链路上的方法和函数等符号，二是需要生成对应的 order 文件来配置 ld 中的 Order File 属性。当工程在编译的时候，Xcode 会读取这个 order 文件，在链接过程中会根据这个文件中的符号顺序来生成对应的 MachO。一般业界中收集符号的方案有两种：\n  \n*  Hook objc_msgSend，只能拿到 OC 以及 swift @objc dynamic 的符号； \n*  Clang 插桩，能完美拿到 OC、C/C++、Swift、Block 的符号；\n故这里采用Clang插桩方式来搜集符号,具体实现如下:\n\n# 具体实现\n\n## 1. 添加 Build Setting 设置\nTarget -> Build Setting -> Custom Complier Flags -> Other C Flags 添加\n\n```plain\n-fsanitize-coverage=func,trace-pc-guard\n```\nOther Swift Flags 添加\n```plain\n-sanitize-coverage=func -sanitize=undefined\n```\n 项目如果是组件化的话,需要分别对主工程,及各组件进行设置,可以通过脚本在podfile设置\n```plain\n# 二进制重排设置\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      if config.name == 'Debug'\n        config.build_settings['OTHER_CFLAGS'] ||= '$(inherited)'\n        config.build_settings['OTHER_CFLAGS'] << ' '\n        config.build_settings['OTHER_CFLAGS'] << '-fsanitize-coverage=func,trace-pc-guard'\n      end\n    end\n  end\n\n# 主工程二进制重排设置\n  app_project.native_targets.each do |target|\n    if target.name == 'AiWayFashionCar'\n      target.build_configurations.each do |config|\n        if config.name == 'Debug'\n          config.build_settings['OTHER_CFLAGS'] ||= '$(inherited)'\n          config.build_settings['OTHER_CFLAGS'] << ' '\n          config.build_settings['OTHER_CFLAGS'] << '-fsanitize-coverage=func,trace-pc-guard'\n        end\n      end\n    end\n  end\n```\n## 2. 添加代码\n 在启动队列添加代码\n\n```objectivec\n#if DEBUG\n    AppOrderFiles(^(NSString * _Nonnull orderFilePath) {\n        NSLog(@\"orderFilePath:%@\",orderFilePath);\n    });\n#endif\n```\n添加类\n```objectivec\n#import <Foundation/Foundation.h>\n\nNS_ASSUME_NONNULL_BEGIN\n@interface AWLaunchManager : NSObject\nextern void AppOrderFiles(void(^completion)(NSString *orderFilePath));\n@end\nNS_ASSUME_NONNULL_END\n```\n\n```objectivec\n#import \"AWLaunchAnalysisLog.h\"\n@implementation AWLaunchManager\n@end\n\n#if DEBUG\n\n#import <dlfcn.h>\n#import <libkern/OSAtomicQueue.h>\n#import <pthread.h>\n\n// 队列头的数据结构。\nstatic OSQueueHead queue = OS_ATOMIC_QUEUE_INIT;\nstatic BOOL collectFinished = NO;\ntypedef struct {\n    void *pc;\n    void *next;\n} PCNode;\n\n// The guards are [start, stop).\n// This function will be called at least once per DSO and may be called\n// more than once with the same values of start/stop.\nvoid __sanitizer_cov_trace_pc_guard_init(uint32_t *start,\n                                         uint32_t *stop) {\n    static uint32_t Counter;  // Counter for the guards.\n    if (start == stop || *start) return;  // Initialize only once.\n    printf(\"INIT: %p %p\\n\", start, stop);\n    for (uint32_t *x = start; x < stop; x++){\n        *x = ++Counter;  // Guards should start from 1.\n    }\n}\n\n// This callback is inserted by the compiler on every edge in the\n// control flow (some optimizations apply).\n// Typically, the compiler will emit the code like this:\n//    if(*guard)\n//      __sanitizer_cov_trace_pc_guard(guard);\n// But for large functions it will emit a simple call:\n//    __sanitizer_cov_trace_pc_guard(guard);\n// 该回调由编译器插入到\n// 控制流（适用一些优化）\n// 通常，编译器将发出如下代码：\n//    if(*guard)\n//      __sanitizer_cov_trace_pc_guard(guard);\n// But for large functions it will emit a simple call:\n//    __sanitizer_cov_trace_pc_guard(guard);\nvoid __sanitizer_cov_trace_pc_guard(uint32_t *guard) {\n    if (collectFinished || !*guard) {\n        return;\n    }\n    // If you set *guard to 0 this code will not be called again for this edge.\n    // Now you can get the PC and do whatever you want:\n    //   store it somewhere or symbolize it and print right away.\n    // The values of `*guard` are as you set them in\n    // __sanitizer_cov_trace_pc_guard_init and so you can make them consecutive\n    // and use them to dereference an array or a bit vector.\n    *guard = 0;\n    // __builtin_return_address(0)的含义是，得到当前函数返回地址，即此函数被别的函数调用，然后此函数执行完毕后，返回，所谓返回地址就是那时候的地址\n    void *PC = __builtin_return_address(0);\n    PCNode *node = malloc(sizeof(PCNode));\n    *node = (PCNode){PC, NULL};\n    OSAtomicEnqueue(&queue, node, offsetof(PCNode, next));\n}\n#endif\n\nextern void AppOrderFiles(void(^completion)(NSString *orderFilePath)) {\n#if DEBUG\n    collectFinished = YES;\n    __sync_synchronize();\n    NSString *functionExclude = [NSString stringWithFormat:@\"_%s\", __FUNCTION__];\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.01 * NSEC_PER_SEC)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        NSMutableArray <NSString *> *functions = [NSMutableArray array];\n        while (YES) {\n            PCNode *node = OSAtomicDequeue(&queue, offsetof(PCNode, next));\n            if (node == NULL) {\n                break;\n            }\n            Dl_info info = {0};\n            dladdr(node->pc, &info);\n            if (info.dli_sname) {\n                NSString *name = @(info.dli_sname);\n                BOOL isObjc = [name hasPrefix:@\"+[\"] || [name hasPrefix:@\"-[\"];\n                NSString *symbolName = isObjc ? name : [@\"_\" stringByAppendingString:name];\n                [functions addObject:symbolName];\n            }\n        }\n        if (functions.count == 0) {\n            if (completion) {\n                completion(nil);\n            }\n            return;\n        }\n        NSMutableArray<NSString *> *calls = [NSMutableArray arrayWithCapacity:functions.count];\n        NSEnumerator *enumerator = [functions reverseObjectEnumerator];\n        NSString *obj;\n        while (obj = [enumerator nextObject]) {\n            if (![calls containsObject:obj]) {\n                [calls addObject:obj];\n            }\n        }\n        [calls removeObject:functionExclude];\n        NSString *result = [calls componentsJoinedByString:@\"\\n\"];\n//        NSLog(@\"二进制重排MethodOrder地址:\\n%@\", result);\n//        printf(\"%s\",[result cStringUsingEncoding:NSUTF8StringEncoding]);\n        \n        NSString *filePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@\"app.order\"];\n        NSData *fileContents = [result dataUsingEncoding:NSUTF8StringEncoding];\n        BOOL success = [[NSFileManager defaultManager] createFileAtPath:filePath\n                                                               contents:fileContents\n                                                             attributes:nil];\n        if (success ) {\n            if (completion) {\n                completion(filePath);\n            }\n        }\n    });\n#endif\n}\n```\n## 3. 取出 order file\n* 在debug模式下编译代码后会在控制台打印 `lbfunc.order` 的路径\n* 在控制台搜 \"orderFilePath\"\n* `Finder` 前往路径取出 `order file`\n \n\n## 4. 设置 order file\n* 把 `lbfunc.order` 的路径放到主工程根目录\n* `Target -> Build Setting -> Linking -> Order File` 设置路径\n\n# 查看自己工程的符号顺序\n重排前后我们需要查看自己的符号顺序有没有修改成功 , 这时候就用到了 Link Map .\n\nLink Map 是编译期间产生的产物 ,  ( ld 的读取二进制文件顺序默认是按照 Compile Sources - GUI 里的顺序 ) ,  它记录了二进制文件的布局 . 通过设置 Write Link Map File 来设置输出与否 , 默认是 no ,在编译完成后通过验证 LinkMap 文件中 #Symbols: 部分符号顺序是否和 order 文件中的符号顺序一致来确定是否配置成功\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/linkMap.png)\n# 效果对比\n优化前\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png)\n优化后\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E4%BC%98%E5%8C%96%E5%90%8E%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%88%86%E6%9E%90.png)\n\n\n\n","source":"_posts/二进制重排.md","raw":"---\ntitle: 二进制重排\ndate: 2023-01-16 16:15:40\ncategories: \n- iOS优化\ntags:\n---\n# 为什么进行二进制重排\n\n  当用户点击 App 启动的时候，系统会创建进程并为进程申请一块虚拟内存，虚拟内存和物理内存是需要映射的。当进程需要访问的一块虚拟内存页还没有映射对应的物理内存页时，就会触发一次缺页中断 Page In。这个过程中会发生 I/O 操作，将磁盘中的数据读入到物理内存页中。如果读入的是 Text 段的页，还需要解密，并且系统还会对解密后的页进行签名验证。所以，如果在启动过程中频繁的发生 Page In 的话，Page In 引起的 I/O 操作以及解密验证操作等的耗时也是影响很大的。需要注意的是，iOS13 及以后苹果对这个过程进行了优化，Page In 的时候不再需要解密了。\n\n  Page In 的具体情况我们可以通过 Instruments 中的 System Trace 工具来分析，其中找到 Main Thread 进程，再选择 Summary:Virtual Memory 选项，下面看到的 File Backed Page In 就是对应的缺页中断数据了，如下图所示：\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png)\n\n在启动过程中过多的 Page In 会产生过多的 I/O 操作以及解密验证操作，这些操作的耗时影响也会比较大。针对 Page In 的影响，我们可以通过二进制重排来减少这个过程的耗时。我们知道进程在访问虚拟内存的时候是以页为单位的，而启动过程中的两个方法如果在不同的页，系统就会进行两次缺页中断 Page In 操作来加载这两个页。而如果启动链路上的方法分散在不同的页的话，整个启动的过程就会产生非常多的 Page In 操作。为了能减少系统因缺页中断产生的 Page In 操作，我们需要做的就是把启动链路上所有用到的方法都排在连续的页上，这样系统在加载符号的时候就可以减少相应的内存页数量的访问，从而减少整个启动过程的耗时，如下图所示：\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/launchPage.png) \n\n  要实现符号的重排，一是需要我们收集整个启动链路上的方法和函数等符号，二是需要生成对应的 order 文件来配置 ld 中的 Order File 属性。当工程在编译的时候，Xcode 会读取这个 order 文件，在链接过程中会根据这个文件中的符号顺序来生成对应的 MachO。一般业界中收集符号的方案有两种：\n  \n*  Hook objc_msgSend，只能拿到 OC 以及 swift @objc dynamic 的符号； \n*  Clang 插桩，能完美拿到 OC、C/C++、Swift、Block 的符号；\n故这里采用Clang插桩方式来搜集符号,具体实现如下:\n\n# 具体实现\n\n## 1. 添加 Build Setting 设置\nTarget -> Build Setting -> Custom Complier Flags -> Other C Flags 添加\n\n```plain\n-fsanitize-coverage=func,trace-pc-guard\n```\nOther Swift Flags 添加\n```plain\n-sanitize-coverage=func -sanitize=undefined\n```\n 项目如果是组件化的话,需要分别对主工程,及各组件进行设置,可以通过脚本在podfile设置\n```plain\n# 二进制重排设置\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      if config.name == 'Debug'\n        config.build_settings['OTHER_CFLAGS'] ||= '$(inherited)'\n        config.build_settings['OTHER_CFLAGS'] << ' '\n        config.build_settings['OTHER_CFLAGS'] << '-fsanitize-coverage=func,trace-pc-guard'\n      end\n    end\n  end\n\n# 主工程二进制重排设置\n  app_project.native_targets.each do |target|\n    if target.name == 'AiWayFashionCar'\n      target.build_configurations.each do |config|\n        if config.name == 'Debug'\n          config.build_settings['OTHER_CFLAGS'] ||= '$(inherited)'\n          config.build_settings['OTHER_CFLAGS'] << ' '\n          config.build_settings['OTHER_CFLAGS'] << '-fsanitize-coverage=func,trace-pc-guard'\n        end\n      end\n    end\n  end\n```\n## 2. 添加代码\n 在启动队列添加代码\n\n```objectivec\n#if DEBUG\n    AppOrderFiles(^(NSString * _Nonnull orderFilePath) {\n        NSLog(@\"orderFilePath:%@\",orderFilePath);\n    });\n#endif\n```\n添加类\n```objectivec\n#import <Foundation/Foundation.h>\n\nNS_ASSUME_NONNULL_BEGIN\n@interface AWLaunchManager : NSObject\nextern void AppOrderFiles(void(^completion)(NSString *orderFilePath));\n@end\nNS_ASSUME_NONNULL_END\n```\n\n```objectivec\n#import \"AWLaunchAnalysisLog.h\"\n@implementation AWLaunchManager\n@end\n\n#if DEBUG\n\n#import <dlfcn.h>\n#import <libkern/OSAtomicQueue.h>\n#import <pthread.h>\n\n// 队列头的数据结构。\nstatic OSQueueHead queue = OS_ATOMIC_QUEUE_INIT;\nstatic BOOL collectFinished = NO;\ntypedef struct {\n    void *pc;\n    void *next;\n} PCNode;\n\n// The guards are [start, stop).\n// This function will be called at least once per DSO and may be called\n// more than once with the same values of start/stop.\nvoid __sanitizer_cov_trace_pc_guard_init(uint32_t *start,\n                                         uint32_t *stop) {\n    static uint32_t Counter;  // Counter for the guards.\n    if (start == stop || *start) return;  // Initialize only once.\n    printf(\"INIT: %p %p\\n\", start, stop);\n    for (uint32_t *x = start; x < stop; x++){\n        *x = ++Counter;  // Guards should start from 1.\n    }\n}\n\n// This callback is inserted by the compiler on every edge in the\n// control flow (some optimizations apply).\n// Typically, the compiler will emit the code like this:\n//    if(*guard)\n//      __sanitizer_cov_trace_pc_guard(guard);\n// But for large functions it will emit a simple call:\n//    __sanitizer_cov_trace_pc_guard(guard);\n// 该回调由编译器插入到\n// 控制流（适用一些优化）\n// 通常，编译器将发出如下代码：\n//    if(*guard)\n//      __sanitizer_cov_trace_pc_guard(guard);\n// But for large functions it will emit a simple call:\n//    __sanitizer_cov_trace_pc_guard(guard);\nvoid __sanitizer_cov_trace_pc_guard(uint32_t *guard) {\n    if (collectFinished || !*guard) {\n        return;\n    }\n    // If you set *guard to 0 this code will not be called again for this edge.\n    // Now you can get the PC and do whatever you want:\n    //   store it somewhere or symbolize it and print right away.\n    // The values of `*guard` are as you set them in\n    // __sanitizer_cov_trace_pc_guard_init and so you can make them consecutive\n    // and use them to dereference an array or a bit vector.\n    *guard = 0;\n    // __builtin_return_address(0)的含义是，得到当前函数返回地址，即此函数被别的函数调用，然后此函数执行完毕后，返回，所谓返回地址就是那时候的地址\n    void *PC = __builtin_return_address(0);\n    PCNode *node = malloc(sizeof(PCNode));\n    *node = (PCNode){PC, NULL};\n    OSAtomicEnqueue(&queue, node, offsetof(PCNode, next));\n}\n#endif\n\nextern void AppOrderFiles(void(^completion)(NSString *orderFilePath)) {\n#if DEBUG\n    collectFinished = YES;\n    __sync_synchronize();\n    NSString *functionExclude = [NSString stringWithFormat:@\"_%s\", __FUNCTION__];\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.01 * NSEC_PER_SEC)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        NSMutableArray <NSString *> *functions = [NSMutableArray array];\n        while (YES) {\n            PCNode *node = OSAtomicDequeue(&queue, offsetof(PCNode, next));\n            if (node == NULL) {\n                break;\n            }\n            Dl_info info = {0};\n            dladdr(node->pc, &info);\n            if (info.dli_sname) {\n                NSString *name = @(info.dli_sname);\n                BOOL isObjc = [name hasPrefix:@\"+[\"] || [name hasPrefix:@\"-[\"];\n                NSString *symbolName = isObjc ? name : [@\"_\" stringByAppendingString:name];\n                [functions addObject:symbolName];\n            }\n        }\n        if (functions.count == 0) {\n            if (completion) {\n                completion(nil);\n            }\n            return;\n        }\n        NSMutableArray<NSString *> *calls = [NSMutableArray arrayWithCapacity:functions.count];\n        NSEnumerator *enumerator = [functions reverseObjectEnumerator];\n        NSString *obj;\n        while (obj = [enumerator nextObject]) {\n            if (![calls containsObject:obj]) {\n                [calls addObject:obj];\n            }\n        }\n        [calls removeObject:functionExclude];\n        NSString *result = [calls componentsJoinedByString:@\"\\n\"];\n//        NSLog(@\"二进制重排MethodOrder地址:\\n%@\", result);\n//        printf(\"%s\",[result cStringUsingEncoding:NSUTF8StringEncoding]);\n        \n        NSString *filePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@\"app.order\"];\n        NSData *fileContents = [result dataUsingEncoding:NSUTF8StringEncoding];\n        BOOL success = [[NSFileManager defaultManager] createFileAtPath:filePath\n                                                               contents:fileContents\n                                                             attributes:nil];\n        if (success ) {\n            if (completion) {\n                completion(filePath);\n            }\n        }\n    });\n#endif\n}\n```\n## 3. 取出 order file\n* 在debug模式下编译代码后会在控制台打印 `lbfunc.order` 的路径\n* 在控制台搜 \"orderFilePath\"\n* `Finder` 前往路径取出 `order file`\n \n\n## 4. 设置 order file\n* 把 `lbfunc.order` 的路径放到主工程根目录\n* `Target -> Build Setting -> Linking -> Order File` 设置路径\n\n# 查看自己工程的符号顺序\n重排前后我们需要查看自己的符号顺序有没有修改成功 , 这时候就用到了 Link Map .\n\nLink Map 是编译期间产生的产物 ,  ( ld 的读取二进制文件顺序默认是按照 Compile Sources - GUI 里的顺序 ) ,  它记录了二进制文件的布局 . 通过设置 Write Link Map File 来设置输出与否 , 默认是 no ,在编译完成后通过验证 LinkMap 文件中 #Symbols: 部分符号顺序是否和 order 文件中的符号顺序一致来确定是否配置成功\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/linkMap.png)\n# 效果对比\n优化前\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png)\n优化后\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E4%BC%98%E5%8C%96%E5%90%8E%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%88%86%E6%9E%90.png)\n\n\n\n","slug":"二进制重排","published":1,"updated":"2023-04-25T10:47:39.966Z","_id":"clgqa2ioe00005szrf6zm5bk5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"为什么进行二进制重排\"><a href=\"#为什么进行二进制重排\" class=\"headerlink\" title=\"为什么进行二进制重排\"></a>为什么进行二进制重排</h1><p>  当用户点击 App 启动的时候，系统会创建进程并为进程申请一块虚拟内存，虚拟内存和物理内存是需要映射的。当进程需要访问的一块虚拟内存页还没有映射对应的物理内存页时，就会触发一次缺页中断 Page In。这个过程中会发生 I/O 操作，将磁盘中的数据读入到物理内存页中。如果读入的是 Text 段的页，还需要解密，并且系统还会对解密后的页进行签名验证。所以，如果在启动过程中频繁的发生 Page In 的话，Page In 引起的 I/O 操作以及解密验证操作等的耗时也是影响很大的。需要注意的是，iOS13 及以后苹果对这个过程进行了优化，Page In 的时候不再需要解密了。</p>\n<p>  Page In 的具体情况我们可以通过 Instruments 中的 System Trace 工具来分析，其中找到 Main Thread 进程，再选择 Summary:Virtual Memory 选项，下面看到的 File Backed Page In 就是对应的缺页中断数据了，如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png\"></p>\n<p>在启动过程中过多的 Page In 会产生过多的 I/O 操作以及解密验证操作，这些操作的耗时影响也会比较大。针对 Page In 的影响，我们可以通过二进制重排来减少这个过程的耗时。我们知道进程在访问虚拟内存的时候是以页为单位的，而启动过程中的两个方法如果在不同的页，系统就会进行两次缺页中断 Page In 操作来加载这两个页。而如果启动链路上的方法分散在不同的页的话，整个启动的过程就会产生非常多的 Page In 操作。为了能减少系统因缺页中断产生的 Page In 操作，我们需要做的就是把启动链路上所有用到的方法都排在连续的页上，这样系统在加载符号的时候就可以减少相应的内存页数量的访问，从而减少整个启动过程的耗时，如下图所示：<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/launchPage.png\"> </p>\n<p>  要实现符号的重排，一是需要我们收集整个启动链路上的方法和函数等符号，二是需要生成对应的 order 文件来配置 ld 中的 Order File 属性。当工程在编译的时候，Xcode 会读取这个 order 文件，在链接过程中会根据这个文件中的符号顺序来生成对应的 MachO。一般业界中收集符号的方案有两种：</p>\n<ul>\n<li> Hook objc_msgSend，只能拿到 OC 以及 swift @objc dynamic 的符号； </li>\n<li> Clang 插桩，能完美拿到 OC、C/C++、Swift、Block 的符号；<br>故这里采用Clang插桩方式来搜集符号,具体实现如下:</li>\n</ul>\n<h1 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h1><h2 id=\"1-添加-Build-Setting-设置\"><a href=\"#1-添加-Build-Setting-设置\" class=\"headerlink\" title=\"1. 添加 Build Setting 设置\"></a>1. 添加 Build Setting 设置</h2><p>Target -&gt; Build Setting -&gt; Custom Complier Flags -&gt; Other C Flags 添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-fsanitize-coverage=func,trace-pc-guard</span><br></pre></td></tr></table></figure>\n<p>Other Swift Flags 添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-sanitize-coverage=func -sanitize=undefined</span><br></pre></td></tr></table></figure>\n<p> 项目如果是组件化的话,需要分别对主工程,及各组件进行设置,可以通过脚本在podfile设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 二进制重排设置</span><br><span class=\"line\">  installer.pods_project.targets.each do |target|</span><br><span class=\"line\">    target.build_configurations.each do |config|</span><br><span class=\"line\">      if config.name == &#x27;Debug&#x27;</span><br><span class=\"line\">        config.build_settings[&#x27;OTHER_CFLAGS&#x27;] ||= &#x27;$(inherited)&#x27;</span><br><span class=\"line\">        config.build_settings[&#x27;OTHER_CFLAGS&#x27;] &lt;&lt; &#x27; &#x27;</span><br><span class=\"line\">        config.build_settings[&#x27;OTHER_CFLAGS&#x27;] &lt;&lt; &#x27;-fsanitize-coverage=func,trace-pc-guard&#x27;</span><br><span class=\"line\">      end</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\"># 主工程二进制重排设置</span><br><span class=\"line\">  app_project.native_targets.each do |target|</span><br><span class=\"line\">    if target.name == &#x27;AiWayFashionCar&#x27;</span><br><span class=\"line\">      target.build_configurations.each do |config|</span><br><span class=\"line\">        if config.name == &#x27;Debug&#x27;</span><br><span class=\"line\">          config.build_settings[&#x27;OTHER_CFLAGS&#x27;] ||= &#x27;$(inherited)&#x27;</span><br><span class=\"line\">          config.build_settings[&#x27;OTHER_CFLAGS&#x27;] &lt;&lt; &#x27; &#x27;</span><br><span class=\"line\">          config.build_settings[&#x27;OTHER_CFLAGS&#x27;] &lt;&lt; &#x27;-fsanitize-coverage=func,trace-pc-guard&#x27;</span><br><span class=\"line\">        end</span><br><span class=\"line\">      end</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-添加代码\"><a href=\"#2-添加代码\" class=\"headerlink\" title=\"2. 添加代码\"></a>2. 添加代码</h2><p> 在启动队列添加代码</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> DEBUG</span></span><br><span class=\"line\">    AppOrderFiles(^(<span class=\"built_in\">NSString</span> * _Nonnull orderFilePath) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;orderFilePath:%@&quot;</span>,orderFilePath);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>添加类</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AWLaunchManager</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> AppOrderFiles(<span class=\"type\">void</span>(^completion)(<span class=\"built_in\">NSString</span> *orderFilePath));</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"><span class=\"built_in\">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;AWLaunchAnalysisLog.h&quot;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AWLaunchManager</span></span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> DEBUG</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;dlfcn.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;libkern/OSAtomicQueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列头的数据结构。</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> OSQueueHead queue = OS_ATOMIC_QUEUE_INIT;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">BOOL</span> collectFinished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">void</span> *pc;</span><br><span class=\"line\">    <span class=\"type\">void</span> *next;</span><br><span class=\"line\">&#125; PCNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The guards are [start, stop).</span></span><br><span class=\"line\"><span class=\"comment\">// This function will be called at least once per DSO and may be called</span></span><br><span class=\"line\"><span class=\"comment\">// more than once with the same values of start/stop.</span></span><br><span class=\"line\"><span class=\"type\">void</span> __sanitizer_cov_trace_pc_guard_init(uint32_t *start,</span><br><span class=\"line\">                                         uint32_t *stop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> uint32_t Counter;  <span class=\"comment\">// Counter for the guards.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == stop || *start) <span class=\"keyword\">return</span>;  <span class=\"comment\">// Initialize only once.</span></span><br><span class=\"line\">    printf(<span class=\"string\">&quot;INIT: %p %p\\n&quot;</span>, start, stop);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (uint32_t *x = start; x &lt; stop; x++)&#123;</span><br><span class=\"line\">        *x = ++Counter;  <span class=\"comment\">// Guards should start from 1.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This callback is inserted by the compiler on every edge in the</span></span><br><span class=\"line\"><span class=\"comment\">// control flow (some optimizations apply).</span></span><br><span class=\"line\"><span class=\"comment\">// Typically, the compiler will emit the code like this:</span></span><br><span class=\"line\"><span class=\"comment\">//    if(*guard)</span></span><br><span class=\"line\"><span class=\"comment\">//      __sanitizer_cov_trace_pc_guard(guard);</span></span><br><span class=\"line\"><span class=\"comment\">// But for large functions it will emit a simple call:</span></span><br><span class=\"line\"><span class=\"comment\">//    __sanitizer_cov_trace_pc_guard(guard);</span></span><br><span class=\"line\"><span class=\"comment\">// 该回调由编译器插入到</span></span><br><span class=\"line\"><span class=\"comment\">// 控制流（适用一些优化）</span></span><br><span class=\"line\"><span class=\"comment\">// 通常，编译器将发出如下代码：</span></span><br><span class=\"line\"><span class=\"comment\">//    if(*guard)</span></span><br><span class=\"line\"><span class=\"comment\">//      __sanitizer_cov_trace_pc_guard(guard);</span></span><br><span class=\"line\"><span class=\"comment\">// But for large functions it will emit a simple call:</span></span><br><span class=\"line\"><span class=\"comment\">//    __sanitizer_cov_trace_pc_guard(guard);</span></span><br><span class=\"line\"><span class=\"type\">void</span> __sanitizer_cov_trace_pc_guard(uint32_t *guard) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (collectFinished || !*guard) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// If you set *guard to 0 this code will not be called again for this edge.</span></span><br><span class=\"line\">    <span class=\"comment\">// Now you can get the PC and do whatever you want:</span></span><br><span class=\"line\">    <span class=\"comment\">//   store it somewhere or symbolize it and print right away.</span></span><br><span class=\"line\">    <span class=\"comment\">// The values of `*guard` are as you set them in</span></span><br><span class=\"line\">    <span class=\"comment\">// __sanitizer_cov_trace_pc_guard_init and so you can make them consecutive</span></span><br><span class=\"line\">    <span class=\"comment\">// and use them to dereference an array or a bit vector.</span></span><br><span class=\"line\">    *guard = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// __builtin_return_address(0)的含义是，得到当前函数返回地址，即此函数被别的函数调用，然后此函数执行完毕后，返回，所谓返回地址就是那时候的地址</span></span><br><span class=\"line\">    <span class=\"type\">void</span> *PC = __builtin_return_address(<span class=\"number\">0</span>);</span><br><span class=\"line\">    PCNode *node = malloc(<span class=\"keyword\">sizeof</span>(PCNode));</span><br><span class=\"line\">    *node = (PCNode)&#123;PC, <span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    OSAtomicEnqueue(&amp;queue, node, offsetof(PCNode, next));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> AppOrderFiles(<span class=\"type\">void</span>(^completion)(<span class=\"built_in\">NSString</span> *orderFilePath)) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> DEBUG</span></span><br><span class=\"line\">    collectFinished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    __sync_synchronize();</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *functionExclude = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;_%s&quot;</span>, __FUNCTION__];</span><br><span class=\"line\">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class=\"number\">0.01</span> * <span class=\"built_in\">NSEC_PER_SEC</span>)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableArray</span> &lt;<span class=\"built_in\">NSString</span> *&gt; *functions = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">YES</span>) &#123;</span><br><span class=\"line\">            PCNode *node = OSAtomicDequeue(&amp;queue, offsetof(PCNode, next));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Dl_info info = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">            dladdr(node-&gt;pc, &amp;info);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (info.dli_sname) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">NSString</span> *name = @(info.dli_sname);</span><br><span class=\"line\">                <span class=\"type\">BOOL</span> isObjc = [name hasPrefix:<span class=\"string\">@&quot;+[&quot;</span>] || [name hasPrefix:<span class=\"string\">@&quot;-[&quot;</span>];</span><br><span class=\"line\">                <span class=\"built_in\">NSString</span> *symbolName = isObjc ? name : [<span class=\"string\">@&quot;_&quot;</span> stringByAppendingString:name];</span><br><span class=\"line\">                [functions addObject:symbolName];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (functions.count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (completion) &#123;</span><br><span class=\"line\">                completion(<span class=\"literal\">nil</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *calls = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:functions.count];</span><br><span class=\"line\">        <span class=\"built_in\">NSEnumerator</span> *enumerator = [functions reverseObjectEnumerator];</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *obj;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (obj = [enumerator nextObject]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (![calls containsObject:obj]) &#123;</span><br><span class=\"line\">                [calls addObject:obj];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        [calls removeObject:functionExclude];</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *result = [calls componentsJoinedByString:<span class=\"string\">@&quot;\\n&quot;</span>];</span><br><span class=\"line\"><span class=\"comment\">//        NSLog(@&quot;二进制重排MethodOrder地址:\\n%@&quot;, result);</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;%s&quot;,[result cStringUsingEncoding:NSUTF8StringEncoding]);</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *filePath = [<span class=\"built_in\">NSTemporaryDirectory</span>() stringByAppendingPathComponent:<span class=\"string\">@&quot;app.order&quot;</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSData</span> *fileContents = [result dataUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">        <span class=\"type\">BOOL</span> success = [[<span class=\"built_in\">NSFileManager</span> defaultManager] createFileAtPath:filePath</span><br><span class=\"line\">                                                               contents:fileContents</span><br><span class=\"line\">                                                             attributes:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (completion) &#123;</span><br><span class=\"line\">                completion(filePath);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-取出-order-file\"><a href=\"#3-取出-order-file\" class=\"headerlink\" title=\"3. 取出 order file\"></a>3. 取出 order file</h2><ul>\n<li>在debug模式下编译代码后会在控制台打印 <code>lbfunc.order</code> 的路径</li>\n<li>在控制台搜 “orderFilePath”</li>\n<li><code>Finder</code> 前往路径取出 <code>order file</code></li>\n</ul>\n<h2 id=\"4-设置-order-file\"><a href=\"#4-设置-order-file\" class=\"headerlink\" title=\"4. 设置 order file\"></a>4. 设置 order file</h2><ul>\n<li>把 <code>lbfunc.order</code> 的路径放到主工程根目录</li>\n<li><code>Target -&gt; Build Setting -&gt; Linking -&gt; Order File</code> 设置路径</li>\n</ul>\n<h1 id=\"查看自己工程的符号顺序\"><a href=\"#查看自己工程的符号顺序\" class=\"headerlink\" title=\"查看自己工程的符号顺序\"></a>查看自己工程的符号顺序</h1><p>重排前后我们需要查看自己的符号顺序有没有修改成功 , 这时候就用到了 Link Map .</p>\n<p>Link Map 是编译期间产生的产物 ,  ( ld 的读取二进制文件顺序默认是按照 Compile Sources - GUI 里的顺序 ) ,  它记录了二进制文件的布局 . 通过设置 Write Link Map File 来设置输出与否 , 默认是 no ,在编译完成后通过验证 LinkMap 文件中 #Symbols: 部分符号顺序是否和 order 文件中的符号顺序一致来确定是否配置成功<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/linkMap.png\"></p>\n<h1 id=\"效果对比\"><a href=\"#效果对比\" class=\"headerlink\" title=\"效果对比\"></a>效果对比</h1><p>优化前<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png\"><br>优化后<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E4%BC%98%E5%8C%96%E5%90%8E%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%88%86%E6%9E%90.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么进行二进制重排\"><a href=\"#为什么进行二进制重排\" class=\"headerlink\" title=\"为什么进行二进制重排\"></a>为什么进行二进制重排</h1><p>  当用户点击 App 启动的时候，系统会创建进程并为进程申请一块虚拟内存，虚拟内存和物理内存是需要映射的。当进程需要访问的一块虚拟内存页还没有映射对应的物理内存页时，就会触发一次缺页中断 Page In。这个过程中会发生 I/O 操作，将磁盘中的数据读入到物理内存页中。如果读入的是 Text 段的页，还需要解密，并且系统还会对解密后的页进行签名验证。所以，如果在启动过程中频繁的发生 Page In 的话，Page In 引起的 I/O 操作以及解密验证操作等的耗时也是影响很大的。需要注意的是，iOS13 及以后苹果对这个过程进行了优化，Page In 的时候不再需要解密了。</p>\n<p>  Page In 的具体情况我们可以通过 Instruments 中的 System Trace 工具来分析，其中找到 Main Thread 进程，再选择 Summary:Virtual Memory 选项，下面看到的 File Backed Page In 就是对应的缺页中断数据了，如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png\"></p>\n<p>在启动过程中过多的 Page In 会产生过多的 I/O 操作以及解密验证操作，这些操作的耗时影响也会比较大。针对 Page In 的影响，我们可以通过二进制重排来减少这个过程的耗时。我们知道进程在访问虚拟内存的时候是以页为单位的，而启动过程中的两个方法如果在不同的页，系统就会进行两次缺页中断 Page In 操作来加载这两个页。而如果启动链路上的方法分散在不同的页的话，整个启动的过程就会产生非常多的 Page In 操作。为了能减少系统因缺页中断产生的 Page In 操作，我们需要做的就是把启动链路上所有用到的方法都排在连续的页上，这样系统在加载符号的时候就可以减少相应的内存页数量的访问，从而减少整个启动过程的耗时，如下图所示：<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/launchPage.png\"> </p>\n<p>  要实现符号的重排，一是需要我们收集整个启动链路上的方法和函数等符号，二是需要生成对应的 order 文件来配置 ld 中的 Order File 属性。当工程在编译的时候，Xcode 会读取这个 order 文件，在链接过程中会根据这个文件中的符号顺序来生成对应的 MachO。一般业界中收集符号的方案有两种：</p>\n<ul>\n<li> Hook objc_msgSend，只能拿到 OC 以及 swift @objc dynamic 的符号； </li>\n<li> Clang 插桩，能完美拿到 OC、C/C++、Swift、Block 的符号；<br>故这里采用Clang插桩方式来搜集符号,具体实现如下:</li>\n</ul>\n<h1 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h1><h2 id=\"1-添加-Build-Setting-设置\"><a href=\"#1-添加-Build-Setting-设置\" class=\"headerlink\" title=\"1. 添加 Build Setting 设置\"></a>1. 添加 Build Setting 设置</h2><p>Target -&gt; Build Setting -&gt; Custom Complier Flags -&gt; Other C Flags 添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-fsanitize-coverage=func,trace-pc-guard</span><br></pre></td></tr></table></figure>\n<p>Other Swift Flags 添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-sanitize-coverage=func -sanitize=undefined</span><br></pre></td></tr></table></figure>\n<p> 项目如果是组件化的话,需要分别对主工程,及各组件进行设置,可以通过脚本在podfile设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 二进制重排设置</span><br><span class=\"line\">  installer.pods_project.targets.each do |target|</span><br><span class=\"line\">    target.build_configurations.each do |config|</span><br><span class=\"line\">      if config.name == &#x27;Debug&#x27;</span><br><span class=\"line\">        config.build_settings[&#x27;OTHER_CFLAGS&#x27;] ||= &#x27;$(inherited)&#x27;</span><br><span class=\"line\">        config.build_settings[&#x27;OTHER_CFLAGS&#x27;] &lt;&lt; &#x27; &#x27;</span><br><span class=\"line\">        config.build_settings[&#x27;OTHER_CFLAGS&#x27;] &lt;&lt; &#x27;-fsanitize-coverage=func,trace-pc-guard&#x27;</span><br><span class=\"line\">      end</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\"># 主工程二进制重排设置</span><br><span class=\"line\">  app_project.native_targets.each do |target|</span><br><span class=\"line\">    if target.name == &#x27;AiWayFashionCar&#x27;</span><br><span class=\"line\">      target.build_configurations.each do |config|</span><br><span class=\"line\">        if config.name == &#x27;Debug&#x27;</span><br><span class=\"line\">          config.build_settings[&#x27;OTHER_CFLAGS&#x27;] ||= &#x27;$(inherited)&#x27;</span><br><span class=\"line\">          config.build_settings[&#x27;OTHER_CFLAGS&#x27;] &lt;&lt; &#x27; &#x27;</span><br><span class=\"line\">          config.build_settings[&#x27;OTHER_CFLAGS&#x27;] &lt;&lt; &#x27;-fsanitize-coverage=func,trace-pc-guard&#x27;</span><br><span class=\"line\">        end</span><br><span class=\"line\">      end</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-添加代码\"><a href=\"#2-添加代码\" class=\"headerlink\" title=\"2. 添加代码\"></a>2. 添加代码</h2><p> 在启动队列添加代码</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> DEBUG</span></span><br><span class=\"line\">    AppOrderFiles(^(<span class=\"built_in\">NSString</span> * _Nonnull orderFilePath) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;orderFilePath:%@&quot;</span>,orderFilePath);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>添加类</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AWLaunchManager</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> AppOrderFiles(<span class=\"type\">void</span>(^completion)(<span class=\"built_in\">NSString</span> *orderFilePath));</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"><span class=\"built_in\">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;AWLaunchAnalysisLog.h&quot;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AWLaunchManager</span></span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> DEBUG</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;dlfcn.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;libkern/OSAtomicQueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列头的数据结构。</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> OSQueueHead queue = OS_ATOMIC_QUEUE_INIT;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">BOOL</span> collectFinished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">void</span> *pc;</span><br><span class=\"line\">    <span class=\"type\">void</span> *next;</span><br><span class=\"line\">&#125; PCNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The guards are [start, stop).</span></span><br><span class=\"line\"><span class=\"comment\">// This function will be called at least once per DSO and may be called</span></span><br><span class=\"line\"><span class=\"comment\">// more than once with the same values of start/stop.</span></span><br><span class=\"line\"><span class=\"type\">void</span> __sanitizer_cov_trace_pc_guard_init(uint32_t *start,</span><br><span class=\"line\">                                         uint32_t *stop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> uint32_t Counter;  <span class=\"comment\">// Counter for the guards.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == stop || *start) <span class=\"keyword\">return</span>;  <span class=\"comment\">// Initialize only once.</span></span><br><span class=\"line\">    printf(<span class=\"string\">&quot;INIT: %p %p\\n&quot;</span>, start, stop);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (uint32_t *x = start; x &lt; stop; x++)&#123;</span><br><span class=\"line\">        *x = ++Counter;  <span class=\"comment\">// Guards should start from 1.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This callback is inserted by the compiler on every edge in the</span></span><br><span class=\"line\"><span class=\"comment\">// control flow (some optimizations apply).</span></span><br><span class=\"line\"><span class=\"comment\">// Typically, the compiler will emit the code like this:</span></span><br><span class=\"line\"><span class=\"comment\">//    if(*guard)</span></span><br><span class=\"line\"><span class=\"comment\">//      __sanitizer_cov_trace_pc_guard(guard);</span></span><br><span class=\"line\"><span class=\"comment\">// But for large functions it will emit a simple call:</span></span><br><span class=\"line\"><span class=\"comment\">//    __sanitizer_cov_trace_pc_guard(guard);</span></span><br><span class=\"line\"><span class=\"comment\">// 该回调由编译器插入到</span></span><br><span class=\"line\"><span class=\"comment\">// 控制流（适用一些优化）</span></span><br><span class=\"line\"><span class=\"comment\">// 通常，编译器将发出如下代码：</span></span><br><span class=\"line\"><span class=\"comment\">//    if(*guard)</span></span><br><span class=\"line\"><span class=\"comment\">//      __sanitizer_cov_trace_pc_guard(guard);</span></span><br><span class=\"line\"><span class=\"comment\">// But for large functions it will emit a simple call:</span></span><br><span class=\"line\"><span class=\"comment\">//    __sanitizer_cov_trace_pc_guard(guard);</span></span><br><span class=\"line\"><span class=\"type\">void</span> __sanitizer_cov_trace_pc_guard(uint32_t *guard) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (collectFinished || !*guard) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// If you set *guard to 0 this code will not be called again for this edge.</span></span><br><span class=\"line\">    <span class=\"comment\">// Now you can get the PC and do whatever you want:</span></span><br><span class=\"line\">    <span class=\"comment\">//   store it somewhere or symbolize it and print right away.</span></span><br><span class=\"line\">    <span class=\"comment\">// The values of `*guard` are as you set them in</span></span><br><span class=\"line\">    <span class=\"comment\">// __sanitizer_cov_trace_pc_guard_init and so you can make them consecutive</span></span><br><span class=\"line\">    <span class=\"comment\">// and use them to dereference an array or a bit vector.</span></span><br><span class=\"line\">    *guard = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// __builtin_return_address(0)的含义是，得到当前函数返回地址，即此函数被别的函数调用，然后此函数执行完毕后，返回，所谓返回地址就是那时候的地址</span></span><br><span class=\"line\">    <span class=\"type\">void</span> *PC = __builtin_return_address(<span class=\"number\">0</span>);</span><br><span class=\"line\">    PCNode *node = malloc(<span class=\"keyword\">sizeof</span>(PCNode));</span><br><span class=\"line\">    *node = (PCNode)&#123;PC, <span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    OSAtomicEnqueue(&amp;queue, node, offsetof(PCNode, next));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> AppOrderFiles(<span class=\"type\">void</span>(^completion)(<span class=\"built_in\">NSString</span> *orderFilePath)) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> DEBUG</span></span><br><span class=\"line\">    collectFinished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    __sync_synchronize();</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *functionExclude = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;_%s&quot;</span>, __FUNCTION__];</span><br><span class=\"line\">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class=\"number\">0.01</span> * <span class=\"built_in\">NSEC_PER_SEC</span>)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableArray</span> &lt;<span class=\"built_in\">NSString</span> *&gt; *functions = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">YES</span>) &#123;</span><br><span class=\"line\">            PCNode *node = OSAtomicDequeue(&amp;queue, offsetof(PCNode, next));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Dl_info info = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">            dladdr(node-&gt;pc, &amp;info);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (info.dli_sname) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">NSString</span> *name = @(info.dli_sname);</span><br><span class=\"line\">                <span class=\"type\">BOOL</span> isObjc = [name hasPrefix:<span class=\"string\">@&quot;+[&quot;</span>] || [name hasPrefix:<span class=\"string\">@&quot;-[&quot;</span>];</span><br><span class=\"line\">                <span class=\"built_in\">NSString</span> *symbolName = isObjc ? name : [<span class=\"string\">@&quot;_&quot;</span> stringByAppendingString:name];</span><br><span class=\"line\">                [functions addObject:symbolName];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (functions.count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (completion) &#123;</span><br><span class=\"line\">                completion(<span class=\"literal\">nil</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *calls = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:functions.count];</span><br><span class=\"line\">        <span class=\"built_in\">NSEnumerator</span> *enumerator = [functions reverseObjectEnumerator];</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *obj;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (obj = [enumerator nextObject]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (![calls containsObject:obj]) &#123;</span><br><span class=\"line\">                [calls addObject:obj];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        [calls removeObject:functionExclude];</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *result = [calls componentsJoinedByString:<span class=\"string\">@&quot;\\n&quot;</span>];</span><br><span class=\"line\"><span class=\"comment\">//        NSLog(@&quot;二进制重排MethodOrder地址:\\n%@&quot;, result);</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;%s&quot;,[result cStringUsingEncoding:NSUTF8StringEncoding]);</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *filePath = [<span class=\"built_in\">NSTemporaryDirectory</span>() stringByAppendingPathComponent:<span class=\"string\">@&quot;app.order&quot;</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSData</span> *fileContents = [result dataUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">        <span class=\"type\">BOOL</span> success = [[<span class=\"built_in\">NSFileManager</span> defaultManager] createFileAtPath:filePath</span><br><span class=\"line\">                                                               contents:fileContents</span><br><span class=\"line\">                                                             attributes:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (completion) &#123;</span><br><span class=\"line\">                completion(filePath);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-取出-order-file\"><a href=\"#3-取出-order-file\" class=\"headerlink\" title=\"3. 取出 order file\"></a>3. 取出 order file</h2><ul>\n<li>在debug模式下编译代码后会在控制台打印 <code>lbfunc.order</code> 的路径</li>\n<li>在控制台搜 “orderFilePath”</li>\n<li><code>Finder</code> 前往路径取出 <code>order file</code></li>\n</ul>\n<h2 id=\"4-设置-order-file\"><a href=\"#4-设置-order-file\" class=\"headerlink\" title=\"4. 设置 order file\"></a>4. 设置 order file</h2><ul>\n<li>把 <code>lbfunc.order</code> 的路径放到主工程根目录</li>\n<li><code>Target -&gt; Build Setting -&gt; Linking -&gt; Order File</code> 设置路径</li>\n</ul>\n<h1 id=\"查看自己工程的符号顺序\"><a href=\"#查看自己工程的符号顺序\" class=\"headerlink\" title=\"查看自己工程的符号顺序\"></a>查看自己工程的符号顺序</h1><p>重排前后我们需要查看自己的符号顺序有没有修改成功 , 这时候就用到了 Link Map .</p>\n<p>Link Map 是编译期间产生的产物 ,  ( ld 的读取二进制文件顺序默认是按照 Compile Sources - GUI 里的顺序 ) ,  它记录了二进制文件的布局 . 通过设置 Write Link Map File 来设置输出与否 , 默认是 no ,在编译完成后通过验证 LinkMap 文件中 #Symbols: 部分符号顺序是否和 order 文件中的符号顺序一致来确定是否配置成功<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/linkMap.png\"></p>\n<h1 id=\"效果对比\"><a href=\"#效果对比\" class=\"headerlink\" title=\"效果对比\"></a>效果对比</h1><p>优化前<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%89%8D.png\"><br>优化后<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/%E4%BC%98%E5%8C%96%E5%90%8E%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%88%86%E6%9E%90.png\"></p>\n"},{"title":"一次卡顿优化","date":"2022-08-20T08:59:46.000Z","_content":"\n# 为什么出现卡顿\n\n屏幕显示图像是需要CPU和GPU结合工作。CPU 负责计算显示内容，包括视图创建、布局计算、图片解码、文本绘制等，CPU 完成计算后，会将计算内容提交给 GPU；GPU 进行变换、合成、渲染，将渲染结果提交到帧缓冲区，当下一次垂直同步信号（简称 V-Sync）到来时，将渲染结果显示到屏幕上。\n\n \n\nUI视图显示到屏幕中的过程：\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png)\n \n在屏幕显示图像前，CPU 和 GPU 需要完成自身的任务，系统会每（1000/60=16.67ms）将UI的变化重新绘制，渲染到屏幕上。如果在16ms内，主线程进行了耗时操作，CPU和GPU没有来得及生产出一帧缓冲，那么这一帧会被丢弃，显示器就会保持不变，继续显示上一帧内容，用户的视觉上就出现了卡顿；因此卡顿产生的原因就是，CPU和GPU没有及时处理好数据。 \n\n# 卡顿的检测\n\n## 卡顿分析工具\n\n从Xcode12 开始，Instrument 新增 AnimationHitches 用以检测卡顿,这里用它分析页面卡顿情况\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.png)\n\n 苹果于 20 年的 Session 中提出了 Hitch 的概念，用以衡量滑动时的卡顿情况。Hitch 指的是 卡顿时间（一帧延后出现的时间，ms）/ 总时间（一般是 1 秒），简单来说 卡顿时间比就是一个区间内的总卡顿时间除以它的持续时间。\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E5%8D%A1%E9%A1%BF%E6%AF%94%E4%B8%A5%E9%87%8D%E7%A8%8B%E5%BA%A6%E8%A7%86%E5%9B%BE.png)\n* 低于 5 ms/s 说明比较优秀，是最不易被用户察觉到的\n* 介于 5ms/s  和 10ms/s 之间，说明发生了中等卡顿，用户会察觉到一些中断，但并不严重\n* 高于 10 ms/s 说明发生了较严重的卡顿，已经影响了用户体验。 \n耗时分析工具\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E8%80%97%E6%97%B6%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.png)\n\n选中某一次卡顿,结合Instrument - TimeProfile, 就可以定位到具体的函数堆栈                       \n\n## 页面卡顿检测\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/yemian.png)\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E9%A1%B5%E9%9D%A2%E5%8D%A1%E9%A1%BF%E6%83%85%E5%86%B5.png)\n大于16.6ms /s 的为较严重卡顿,大约有33个，有一些卡顿达到了116ms/s。\n\n## 某次卡顿分析\n\n查看某次（116ms/s。)卡顿函数主线程调用栈，查看其使用的时间占比:\n\n**可知耗时操作有：**\n\n    AWHomeCommunityTagTableCell的 setModel \n    UIImage+WebPConfig 的 aw_imageNamed方法、        \n    UIApplication+AWTAutomaticTracks的 awt_sendEvent \n    NBSLens_iOSANREntity 的 runloopCycleStart \n    AWHomeSearchNetManager 的 getRecommendListWithList \n    map2JsonString \n    ...\n\n# 卡顿原因及优化\n\n## **动态卡setModel的耗时：**\n1. 主线程卡片高度计算\n滑动过程中视图的宽高,文本对象宽高,排版及绘制都有一定耗时\n\n优化:异步计算视图宽高,富文本对象宽高、排版并缓存到model里,这里富文本处理主要使用的是:`YYText` ,示例:\n\n```powershell\n// 如果你在显示字符串时有性能问题，可以这样开启异步模式：\nYYLabel *label = ...\nlabel.displaysAsynchronously = YES;\n    \n// 如果需要获得最高的性能，你可以在后台线程用 `YYTextLayout` 进行预排版： \nYYLabel *label = [YYLabel new];\nlabel.displaysAsynchronously = YES; //开启异步绘制\nlabel.ignoreCommonProperties = YES; //忽略除了 textLayout 之外的其他属性\n    \ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n   // 创建属性字符串\n   NSMutableAttributedString *text = [[NSMutableAttributedString alloc] initWithString:@\"Some Text\"];\n   text.yy_font = [UIFont systemFontOfSize:16];\n   text.yy_color = [UIColor grayColor];\n   [text yy_setColor:[UIColor redColor] range:NSMakeRange(0, 4)];\n \n   // 创建文本容器\n   YYTextContainer *container = [YYTextContainer new];\n   container.size = CGSizeMake(100, CGFLOAT_MAX);\n   container.maximumNumberOfRows = 0;\n   \n   // 生成排版结果\n   YYTextLayout *layout = [YYTextLayout layoutWithContainer:container text:text];\n   \n   dispatch_async(dispatch_get_main_queue(), ^{\n       label.size = layout.textBoundingSize;\n       label.textLayout = layout;\n   });\n});\n```\n\n2、网络请求数据缓存归档\n数据的IO读写先对是比较耗时的\n优化:改为异步的方式\n\n3、不必要的操作\n整个页面都是通过TableCell实现的,对于顶部的轮播卡,快捷入口等只展示一次的卡片在上下滑动过程中仍会reload,显然是多余的\n\n优化:只对table的底部会复用的卡片通过UITableViewCell来实现，对于顶部分类tabbar、轮播卡、notice卡和快捷入口卡等只展示一次的卡片通过TableHeader来实现,避免花朵过程中多余的排版\n\n4、滑动过程中的操作: 移除视图、初始化视图、添加视图\n**优化**：\n\n* 视图的初始化：懒加载的方式进行初始化，只初始化一次，如需要重置则可以在重用方法里重置。\n* 移除视图、添加视图：通过hidden来控制视图的隐藏显示。\n\n5、xib、masonry、自动布局的使用\n\n优化：纯代码方式创建cell，frame方式布局\n\n6、一些对象在反复创建，或在滑动过程中拼接生成\n如富文本内容、标签等\n\n优化：将 NSAttributeString的初始化逻辑和数据源逻辑处理放在异步子线程中，然后缓存到model里。 \n\n7、视图图层复杂\n原代码用xib实现的卡片,一些自定义视图、活动卡片标签的实现等较为复杂\n\n优化：尽量减少冗余视图，活动卡片标签改为富文本方式实现\n\n8、native图片加载，会反复进行IO读取，并在主线程上的图片解码      ![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD.png)\n项目里用了组件化,通过hook `imageNamed`,查找相应组件的bundle,然后调YYImage的解码方式在主线程解码图片,这里的问题是在反复滑动过程中,会反复的查找bundle - 解码, 较为耗时\n\n优化: 对解码过的图片进行LRU缓存，提高读取效率\n\n9、高分辨率图的加载会造成一定卡顿\n\n网络图片的加载过程:加载 - 解码 - 渲染 ,除此之外还会有IO读写 ,如果是高分辨率图,也是很耗内存和CPU的\n\n优化主要有两种方式:\n\n|    方式|    |    特点|    支持|\n|:----|:----|:----|:----|\n|    下采样加载|    根据size加载相应大小的图片,图片源不变|    只针对下载后的图片做的操作<br>不需要图片服务器支持|    SDWebimage支持,<br>YYWebImage需要自己扩展|\n|    按需请求缩略图|    根据size请求相应大小的图片|    节约流量,<br>请求快,<br>降低内存占用<br>需要图片服务器支持|    YYWebImage支持<br>SDWebimage支持|\n\n项目里图片服务器是用的阿里云OSS,支持图片缩放,故采用第二种方案,请求缩略图实例:\n\n```powershell\nhttps://oss-console-img-demo-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/example.jpg?x-oss-process=image/resize,h_100,m_lfit\n```\n10、轮播动画\nicarousel step，轮播图等，滑出界面后，这个头部banner也一直在轮播，有一定耗时\n\n优化: 在动画卡滑出界面或在离开当前页时，停止动画, 再出现后再开启\n\n11、JPVideoplayerManager savePlaybackElapsedSeconds:forVideoUrl\n\n视频播放过程会不断在主线程写文件,较为耗时\n\n优化: 改为异步方式\n\n12、离屏渲染问题\n主要是针对如下场景：阴影、遮罩、组不透明等进行优化\n\n该页面引起离屏幕渲染的问题主要是绘制阴影：\n\n```plain\nself.customTabbr.layer.shadowOffset = CGSizeMake(5, 0);\nself.customTabbr.layer.shadowColor = [UIColor blackColor].CGColor;\nself.customTabbr.layer.shadowOpacity = 0.2;//阴影透明度，默认0\nself.customTabbr.layer.shadowRadius = 5;//阴影半径，默认3\n```\n优化:\n```plain\nUIBezierPath *path = [UIBezierPath bezierPathWithRect:self.customTabbr.bounds];\nself.customTabbr.layer.shadowPath = path.CGPath;\n```\n\n## **其它耗时**\n1. UIApplication+AWTAutomaticTracks的 awt_sendEvent\n这里是通过hook的方式对事件做了自动采集\n\n这个目前耗时占得比重不是很高，且影响较大,暂时没做优化\n\n后续优化：出于性能考虑，会把这种自动埋点方式去掉，改成部分hook（比如页面pv）结合手动埋点方式搜集日志信息。\n\n2、NBSLens_iOSANREntity 的 runloopCycleStart\n\n这个是一个第三方sdk,用来监测线上crash\n\n```plain\n[NBSAppAgent setStartOption: NBSOption_Crash | NBSOption_UI];\n```\n优化:替换成性能更好的其它方案(bugly),且它支持卡顿分析\n3、BaiduMobStat\n\n```plain\n[[BaiduMobStat defaultStat] startWithAppId:@\"\"];\n```\n百度热力图，占用耗时根听云sdk时差不多的，如果不是很需要可以考虑去掉\n主要是用来分析用户行为的\n\n优化: 后续重构数据采集sdk,一起替换掉\n\n效果：\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E4%BC%98%E5%8C%96%E6%95%88%E6%9E%9C.png)\n\n可以看到卡顿比已经下降了很多\n\n# 参考:\n[https://github.com/ibireme/YYText](https://github.com/ibireme/YYText)\n\n[https://developer.apple.com/videos/play/tech-talks/10855/](https://developer.apple.com/videos/play/tech-talks/10855/)\n\n\n\n\n\n\n\n \n\n","source":"_posts/一次卡顿优化.md","raw":"---\ntitle: 一次卡顿优化\ndate: 2022-08-20 16:59:46\ncategories: \n- iOS优化\ntags:\n---\n\n# 为什么出现卡顿\n\n屏幕显示图像是需要CPU和GPU结合工作。CPU 负责计算显示内容，包括视图创建、布局计算、图片解码、文本绘制等，CPU 完成计算后，会将计算内容提交给 GPU；GPU 进行变换、合成、渲染，将渲染结果提交到帧缓冲区，当下一次垂直同步信号（简称 V-Sync）到来时，将渲染结果显示到屏幕上。\n\n \n\nUI视图显示到屏幕中的过程：\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png)\n \n在屏幕显示图像前，CPU 和 GPU 需要完成自身的任务，系统会每（1000/60=16.67ms）将UI的变化重新绘制，渲染到屏幕上。如果在16ms内，主线程进行了耗时操作，CPU和GPU没有来得及生产出一帧缓冲，那么这一帧会被丢弃，显示器就会保持不变，继续显示上一帧内容，用户的视觉上就出现了卡顿；因此卡顿产生的原因就是，CPU和GPU没有及时处理好数据。 \n\n# 卡顿的检测\n\n## 卡顿分析工具\n\n从Xcode12 开始，Instrument 新增 AnimationHitches 用以检测卡顿,这里用它分析页面卡顿情况\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.png)\n\n 苹果于 20 年的 Session 中提出了 Hitch 的概念，用以衡量滑动时的卡顿情况。Hitch 指的是 卡顿时间（一帧延后出现的时间，ms）/ 总时间（一般是 1 秒），简单来说 卡顿时间比就是一个区间内的总卡顿时间除以它的持续时间。\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E5%8D%A1%E9%A1%BF%E6%AF%94%E4%B8%A5%E9%87%8D%E7%A8%8B%E5%BA%A6%E8%A7%86%E5%9B%BE.png)\n* 低于 5 ms/s 说明比较优秀，是最不易被用户察觉到的\n* 介于 5ms/s  和 10ms/s 之间，说明发生了中等卡顿，用户会察觉到一些中断，但并不严重\n* 高于 10 ms/s 说明发生了较严重的卡顿，已经影响了用户体验。 \n耗时分析工具\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E8%80%97%E6%97%B6%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.png)\n\n选中某一次卡顿,结合Instrument - TimeProfile, 就可以定位到具体的函数堆栈                       \n\n## 页面卡顿检测\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/yemian.png)\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E9%A1%B5%E9%9D%A2%E5%8D%A1%E9%A1%BF%E6%83%85%E5%86%B5.png)\n大于16.6ms /s 的为较严重卡顿,大约有33个，有一些卡顿达到了116ms/s。\n\n## 某次卡顿分析\n\n查看某次（116ms/s。)卡顿函数主线程调用栈，查看其使用的时间占比:\n\n**可知耗时操作有：**\n\n    AWHomeCommunityTagTableCell的 setModel \n    UIImage+WebPConfig 的 aw_imageNamed方法、        \n    UIApplication+AWTAutomaticTracks的 awt_sendEvent \n    NBSLens_iOSANREntity 的 runloopCycleStart \n    AWHomeSearchNetManager 的 getRecommendListWithList \n    map2JsonString \n    ...\n\n# 卡顿原因及优化\n\n## **动态卡setModel的耗时：**\n1. 主线程卡片高度计算\n滑动过程中视图的宽高,文本对象宽高,排版及绘制都有一定耗时\n\n优化:异步计算视图宽高,富文本对象宽高、排版并缓存到model里,这里富文本处理主要使用的是:`YYText` ,示例:\n\n```powershell\n// 如果你在显示字符串时有性能问题，可以这样开启异步模式：\nYYLabel *label = ...\nlabel.displaysAsynchronously = YES;\n    \n// 如果需要获得最高的性能，你可以在后台线程用 `YYTextLayout` 进行预排版： \nYYLabel *label = [YYLabel new];\nlabel.displaysAsynchronously = YES; //开启异步绘制\nlabel.ignoreCommonProperties = YES; //忽略除了 textLayout 之外的其他属性\n    \ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n   // 创建属性字符串\n   NSMutableAttributedString *text = [[NSMutableAttributedString alloc] initWithString:@\"Some Text\"];\n   text.yy_font = [UIFont systemFontOfSize:16];\n   text.yy_color = [UIColor grayColor];\n   [text yy_setColor:[UIColor redColor] range:NSMakeRange(0, 4)];\n \n   // 创建文本容器\n   YYTextContainer *container = [YYTextContainer new];\n   container.size = CGSizeMake(100, CGFLOAT_MAX);\n   container.maximumNumberOfRows = 0;\n   \n   // 生成排版结果\n   YYTextLayout *layout = [YYTextLayout layoutWithContainer:container text:text];\n   \n   dispatch_async(dispatch_get_main_queue(), ^{\n       label.size = layout.textBoundingSize;\n       label.textLayout = layout;\n   });\n});\n```\n\n2、网络请求数据缓存归档\n数据的IO读写先对是比较耗时的\n优化:改为异步的方式\n\n3、不必要的操作\n整个页面都是通过TableCell实现的,对于顶部的轮播卡,快捷入口等只展示一次的卡片在上下滑动过程中仍会reload,显然是多余的\n\n优化:只对table的底部会复用的卡片通过UITableViewCell来实现，对于顶部分类tabbar、轮播卡、notice卡和快捷入口卡等只展示一次的卡片通过TableHeader来实现,避免花朵过程中多余的排版\n\n4、滑动过程中的操作: 移除视图、初始化视图、添加视图\n**优化**：\n\n* 视图的初始化：懒加载的方式进行初始化，只初始化一次，如需要重置则可以在重用方法里重置。\n* 移除视图、添加视图：通过hidden来控制视图的隐藏显示。\n\n5、xib、masonry、自动布局的使用\n\n优化：纯代码方式创建cell，frame方式布局\n\n6、一些对象在反复创建，或在滑动过程中拼接生成\n如富文本内容、标签等\n\n优化：将 NSAttributeString的初始化逻辑和数据源逻辑处理放在异步子线程中，然后缓存到model里。 \n\n7、视图图层复杂\n原代码用xib实现的卡片,一些自定义视图、活动卡片标签的实现等较为复杂\n\n优化：尽量减少冗余视图，活动卡片标签改为富文本方式实现\n\n8、native图片加载，会反复进行IO读取，并在主线程上的图片解码      ![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD.png)\n项目里用了组件化,通过hook `imageNamed`,查找相应组件的bundle,然后调YYImage的解码方式在主线程解码图片,这里的问题是在反复滑动过程中,会反复的查找bundle - 解码, 较为耗时\n\n优化: 对解码过的图片进行LRU缓存，提高读取效率\n\n9、高分辨率图的加载会造成一定卡顿\n\n网络图片的加载过程:加载 - 解码 - 渲染 ,除此之外还会有IO读写 ,如果是高分辨率图,也是很耗内存和CPU的\n\n优化主要有两种方式:\n\n|    方式|    |    特点|    支持|\n|:----|:----|:----|:----|\n|    下采样加载|    根据size加载相应大小的图片,图片源不变|    只针对下载后的图片做的操作<br>不需要图片服务器支持|    SDWebimage支持,<br>YYWebImage需要自己扩展|\n|    按需请求缩略图|    根据size请求相应大小的图片|    节约流量,<br>请求快,<br>降低内存占用<br>需要图片服务器支持|    YYWebImage支持<br>SDWebimage支持|\n\n项目里图片服务器是用的阿里云OSS,支持图片缩放,故采用第二种方案,请求缩略图实例:\n\n```powershell\nhttps://oss-console-img-demo-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/example.jpg?x-oss-process=image/resize,h_100,m_lfit\n```\n10、轮播动画\nicarousel step，轮播图等，滑出界面后，这个头部banner也一直在轮播，有一定耗时\n\n优化: 在动画卡滑出界面或在离开当前页时，停止动画, 再出现后再开启\n\n11、JPVideoplayerManager savePlaybackElapsedSeconds:forVideoUrl\n\n视频播放过程会不断在主线程写文件,较为耗时\n\n优化: 改为异步方式\n\n12、离屏渲染问题\n主要是针对如下场景：阴影、遮罩、组不透明等进行优化\n\n该页面引起离屏幕渲染的问题主要是绘制阴影：\n\n```plain\nself.customTabbr.layer.shadowOffset = CGSizeMake(5, 0);\nself.customTabbr.layer.shadowColor = [UIColor blackColor].CGColor;\nself.customTabbr.layer.shadowOpacity = 0.2;//阴影透明度，默认0\nself.customTabbr.layer.shadowRadius = 5;//阴影半径，默认3\n```\n优化:\n```plain\nUIBezierPath *path = [UIBezierPath bezierPathWithRect:self.customTabbr.bounds];\nself.customTabbr.layer.shadowPath = path.CGPath;\n```\n\n## **其它耗时**\n1. UIApplication+AWTAutomaticTracks的 awt_sendEvent\n这里是通过hook的方式对事件做了自动采集\n\n这个目前耗时占得比重不是很高，且影响较大,暂时没做优化\n\n后续优化：出于性能考虑，会把这种自动埋点方式去掉，改成部分hook（比如页面pv）结合手动埋点方式搜集日志信息。\n\n2、NBSLens_iOSANREntity 的 runloopCycleStart\n\n这个是一个第三方sdk,用来监测线上crash\n\n```plain\n[NBSAppAgent setStartOption: NBSOption_Crash | NBSOption_UI];\n```\n优化:替换成性能更好的其它方案(bugly),且它支持卡顿分析\n3、BaiduMobStat\n\n```plain\n[[BaiduMobStat defaultStat] startWithAppId:@\"\"];\n```\n百度热力图，占用耗时根听云sdk时差不多的，如果不是很需要可以考虑去掉\n主要是用来分析用户行为的\n\n优化: 后续重构数据采集sdk,一起替换掉\n\n效果：\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E4%BC%98%E5%8C%96%E6%95%88%E6%9E%9C.png)\n\n可以看到卡顿比已经下降了很多\n\n# 参考:\n[https://github.com/ibireme/YYText](https://github.com/ibireme/YYText)\n\n[https://developer.apple.com/videos/play/tech-talks/10855/](https://developer.apple.com/videos/play/tech-talks/10855/)\n\n\n\n\n\n\n\n \n\n","slug":"一次卡顿优化","published":1,"updated":"2023-04-25T10:47:33.124Z","_id":"clgw2g7zr00004qzrcqwceh38","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"为什么出现卡顿\"><a href=\"#为什么出现卡顿\" class=\"headerlink\" title=\"为什么出现卡顿\"></a>为什么出现卡顿</h1><p>屏幕显示图像是需要CPU和GPU结合工作。CPU 负责计算显示内容，包括视图创建、布局计算、图片解码、文本绘制等，CPU 完成计算后，会将计算内容提交给 GPU；GPU 进行变换、合成、渲染，将渲染结果提交到帧缓冲区，当下一次垂直同步信号（简称 V-Sync）到来时，将渲染结果显示到屏幕上。</p>\n<p>UI视图显示到屏幕中的过程：<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png\"></p>\n<p>在屏幕显示图像前，CPU 和 GPU 需要完成自身的任务，系统会每（1000/60=16.67ms）将UI的变化重新绘制，渲染到屏幕上。如果在16ms内，主线程进行了耗时操作，CPU和GPU没有来得及生产出一帧缓冲，那么这一帧会被丢弃，显示器就会保持不变，继续显示上一帧内容，用户的视觉上就出现了卡顿；因此卡顿产生的原因就是，CPU和GPU没有及时处理好数据。 </p>\n<h1 id=\"卡顿的检测\"><a href=\"#卡顿的检测\" class=\"headerlink\" title=\"卡顿的检测\"></a>卡顿的检测</h1><h2 id=\"卡顿分析工具\"><a href=\"#卡顿分析工具\" class=\"headerlink\" title=\"卡顿分析工具\"></a>卡顿分析工具</h2><p>从Xcode12 开始，Instrument 新增 AnimationHitches 用以检测卡顿,这里用它分析页面卡顿情况<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.png\"></p>\n<p> 苹果于 20 年的 Session 中提出了 Hitch 的概念，用以衡量滑动时的卡顿情况。Hitch 指的是 卡顿时间（一帧延后出现的时间，ms）/ 总时间（一般是 1 秒），简单来说 卡顿时间比就是一个区间内的总卡顿时间除以它的持续时间。<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E5%8D%A1%E9%A1%BF%E6%AF%94%E4%B8%A5%E9%87%8D%E7%A8%8B%E5%BA%A6%E8%A7%86%E5%9B%BE.png\"></p>\n<ul>\n<li>低于 5 ms/s 说明比较优秀，是最不易被用户察觉到的</li>\n<li>介于 5ms/s  和 10ms/s 之间，说明发生了中等卡顿，用户会察觉到一些中断，但并不严重</li>\n<li>高于 10 ms/s 说明发生了较严重的卡顿，已经影响了用户体验。<br>耗时分析工具</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E8%80%97%E6%97%B6%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.png\"></p>\n<p>选中某一次卡顿,结合Instrument - TimeProfile, 就可以定位到具体的函数堆栈                       </p>\n<h2 id=\"页面卡顿检测\"><a href=\"#页面卡顿检测\" class=\"headerlink\" title=\"页面卡顿检测\"></a>页面卡顿检测</h2><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/yemian.png\"><br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E9%A1%B5%E9%9D%A2%E5%8D%A1%E9%A1%BF%E6%83%85%E5%86%B5.png\"><br>大于16.6ms /s 的为较严重卡顿,大约有33个，有一些卡顿达到了116ms/s。</p>\n<h2 id=\"某次卡顿分析\"><a href=\"#某次卡顿分析\" class=\"headerlink\" title=\"某次卡顿分析\"></a>某次卡顿分析</h2><p>查看某次（116ms/s。)卡顿函数主线程调用栈，查看其使用的时间占比:</p>\n<p><strong>可知耗时操作有：</strong></p>\n<pre><code>AWHomeCommunityTagTableCell的 setModel \nUIImage+WebPConfig 的 aw_imageNamed方法、        \nUIApplication+AWTAutomaticTracks的 awt_sendEvent \nNBSLens_iOSANREntity 的 runloopCycleStart \nAWHomeSearchNetManager 的 getRecommendListWithList \nmap2JsonString \n...\n</code></pre>\n<h1 id=\"卡顿原因及优化\"><a href=\"#卡顿原因及优化\" class=\"headerlink\" title=\"卡顿原因及优化\"></a>卡顿原因及优化</h1><h2 id=\"动态卡setModel的耗时：\"><a href=\"#动态卡setModel的耗时：\" class=\"headerlink\" title=\"动态卡setModel的耗时：\"></a><strong>动态卡setModel的耗时：</strong></h2><ol>\n<li>主线程卡片高度计算<br>滑动过程中视图的宽高,文本对象宽高,排版及绘制都有一定耗时</li>\n</ol>\n<p>优化:异步计算视图宽高,富文本对象宽高、排版并缓存到model里,这里富文本处理主要使用的是:<code>YYText</code> ,示例:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如果你在显示字符串时有性能问题，可以这样开启异步模式：</span><br><span class=\"line\">YYLabel *label = ...</span><br><span class=\"line\">label.displaysAsynchronously = YES;</span><br><span class=\"line\">    </span><br><span class=\"line\">// 如果需要获得最高的性能，你可以在后台线程用 `YYTextLayout` 进行预排版： </span><br><span class=\"line\">YYLabel *label = [<span class=\"type\">YYLabel</span> <span class=\"type\">new</span>];</span><br><span class=\"line\">label.displaysAsynchronously = YES; //开启异步绘制</span><br><span class=\"line\">label.ignoreCommonProperties = YES; //忽略除了 textLayout 之外的其他属性</span><br><span class=\"line\">    </span><br><span class=\"line\">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">   // 创建属性字符串</span><br><span class=\"line\">   NSMutableAttributedString *text = [[<span class=\"type\">NSMutableAttributedString</span> <span class=\"type\">alloc</span>] <span class=\"type\">initWithString</span>:<span class=\"string\">@&quot;Some Text&quot;];</span></span><br><span class=\"line\"><span class=\"string\">   text.yy_font = [UIFont systemFontOfSize:16];</span></span><br><span class=\"line\"><span class=\"string\">   text.yy_color = [UIColor grayColor];</span></span><br><span class=\"line\"><span class=\"string\">   [text yy_setColor:[UIColor redColor] range:NSMakeRange(0, 4)];</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">   // 创建文本容器</span></span><br><span class=\"line\"><span class=\"string\">   YYTextContainer *container = [YYTextContainer new];</span></span><br><span class=\"line\"><span class=\"string\">   container.size = CGSizeMake(100, CGFLOAT_MAX);</span></span><br><span class=\"line\"><span class=\"string\">   container.maximumNumberOfRows = 0;</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   // 生成排版结果</span></span><br><span class=\"line\"><span class=\"string\">   YYTextLayout *layout = [YYTextLayout layoutWithContainer:container text:text];</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   dispatch_async(dispatch_get_main_queue(), ^&#123;</span></span><br><span class=\"line\"><span class=\"string\">       label.size = layout.textBoundingSize;</span></span><br><span class=\"line\"><span class=\"string\">       label.textLayout = layout;</span></span><br><span class=\"line\"><span class=\"string\">   &#125;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<p>2、网络请求数据缓存归档<br>数据的IO读写先对是比较耗时的<br>优化:改为异步的方式</p>\n<p>3、不必要的操作<br>整个页面都是通过TableCell实现的,对于顶部的轮播卡,快捷入口等只展示一次的卡片在上下滑动过程中仍会reload,显然是多余的</p>\n<p>优化:只对table的底部会复用的卡片通过UITableViewCell来实现，对于顶部分类tabbar、轮播卡、notice卡和快捷入口卡等只展示一次的卡片通过TableHeader来实现,避免花朵过程中多余的排版</p>\n<p>4、滑动过程中的操作: 移除视图、初始化视图、添加视图<br><strong>优化</strong>：</p>\n<ul>\n<li>视图的初始化：懒加载的方式进行初始化，只初始化一次，如需要重置则可以在重用方法里重置。</li>\n<li>移除视图、添加视图：通过hidden来控制视图的隐藏显示。</li>\n</ul>\n<p>5、xib、masonry、自动布局的使用</p>\n<p>优化：纯代码方式创建cell，frame方式布局</p>\n<p>6、一些对象在反复创建，或在滑动过程中拼接生成<br>如富文本内容、标签等</p>\n<p>优化：将 NSAttributeString的初始化逻辑和数据源逻辑处理放在异步子线程中，然后缓存到model里。 </p>\n<p>7、视图图层复杂<br>原代码用xib实现的卡片,一些自定义视图、活动卡片标签的实现等较为复杂</p>\n<p>优化：尽量减少冗余视图，活动卡片标签改为富文本方式实现</p>\n<p>8、native图片加载，会反复进行IO读取，并在主线程上的图片解码      <img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD.png\"><br>项目里用了组件化,通过hook <code>imageNamed</code>,查找相应组件的bundle,然后调YYImage的解码方式在主线程解码图片,这里的问题是在反复滑动过程中,会反复的查找bundle - 解码, 较为耗时</p>\n<p>优化: 对解码过的图片进行LRU缓存，提高读取效率</p>\n<p>9、高分辨率图的加载会造成一定卡顿</p>\n<p>网络图片的加载过程:加载 - 解码 - 渲染 ,除此之外还会有IO读写 ,如果是高分辨率图,也是很耗内存和CPU的</p>\n<p>优化主要有两种方式:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方式</th>\n<th align=\"left\"></th>\n<th align=\"left\">特点</th>\n<th align=\"left\">支持</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">下采样加载</td>\n<td align=\"left\">根据size加载相应大小的图片,图片源不变</td>\n<td align=\"left\">只针对下载后的图片做的操作<br>不需要图片服务器支持</td>\n<td align=\"left\">SDWebimage支持,<br>YYWebImage需要自己扩展</td>\n</tr>\n<tr>\n<td align=\"left\">按需请求缩略图</td>\n<td align=\"left\">根据size请求相应大小的图片</td>\n<td align=\"left\">节约流量,<br>请求快,<br>降低内存占用<br>需要图片服务器支持</td>\n<td align=\"left\">YYWebImage支持<br>SDWebimage支持</td>\n</tr>\n</tbody></table>\n<p>项目里图片服务器是用的阿里云OSS,支持图片缩放,故采用第二种方案,请求缩略图实例:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://oss<span class=\"literal\">-console-img-demo-cn-hangzhou</span>.oss<span class=\"literal\">-cn-hangzhou</span>.aliyuncs.com/example.jpg?x<span class=\"literal\">-oss-process</span>=image/resize,h_100,m_lfit</span><br></pre></td></tr></table></figure>\n<p>10、轮播动画<br>icarousel step，轮播图等，滑出界面后，这个头部banner也一直在轮播，有一定耗时</p>\n<p>优化: 在动画卡滑出界面或在离开当前页时，停止动画, 再出现后再开启</p>\n<p>11、JPVideoplayerManager savePlaybackElapsedSeconds:forVideoUrl</p>\n<p>视频播放过程会不断在主线程写文件,较为耗时</p>\n<p>优化: 改为异步方式</p>\n<p>12、离屏渲染问题<br>主要是针对如下场景：阴影、遮罩、组不透明等进行优化</p>\n<p>该页面引起离屏幕渲染的问题主要是绘制阴影：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.customTabbr.layer.shadowOffset = CGSizeMake(5, 0);</span><br><span class=\"line\">self.customTabbr.layer.shadowColor = [UIColor blackColor].CGColor;</span><br><span class=\"line\">self.customTabbr.layer.shadowOpacity = 0.2;//阴影透明度，默认0</span><br><span class=\"line\">self.customTabbr.layer.shadowRadius = 5;//阴影半径，默认3</span><br></pre></td></tr></table></figure>\n<p>优化:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIBezierPath *path = [UIBezierPath bezierPathWithRect:self.customTabbr.bounds];</span><br><span class=\"line\">self.customTabbr.layer.shadowPath = path.CGPath;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其它耗时\"><a href=\"#其它耗时\" class=\"headerlink\" title=\"其它耗时\"></a><strong>其它耗时</strong></h2><ol>\n<li>UIApplication+AWTAutomaticTracks的 awt_sendEvent<br>这里是通过hook的方式对事件做了自动采集</li>\n</ol>\n<p>这个目前耗时占得比重不是很高，且影响较大,暂时没做优化</p>\n<p>后续优化：出于性能考虑，会把这种自动埋点方式去掉，改成部分hook（比如页面pv）结合手动埋点方式搜集日志信息。</p>\n<p>2、NBSLens_iOSANREntity 的 runloopCycleStart</p>\n<p>这个是一个第三方sdk,用来监测线上crash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[NBSAppAgent setStartOption: NBSOption_Crash | NBSOption_UI];</span><br></pre></td></tr></table></figure>\n<p>优化:替换成性能更好的其它方案(bugly),且它支持卡顿分析<br>3、BaiduMobStat</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[BaiduMobStat defaultStat] startWithAppId:@&quot;&quot;];</span><br></pre></td></tr></table></figure>\n<p>百度热力图，占用耗时根听云sdk时差不多的，如果不是很需要可以考虑去掉<br>主要是用来分析用户行为的</p>\n<p>优化: 后续重构数据采集sdk,一起替换掉</p>\n<p>效果：<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E4%BC%98%E5%8C%96%E6%95%88%E6%9E%9C.png\"></p>\n<p>可以看到卡顿比已经下降了很多</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h1><p><a href=\"https://github.com/ibireme/YYText\">https://github.com/ibireme/YYText</a></p>\n<p><a href=\"https://developer.apple.com/videos/play/tech-talks/10855/\">https://developer.apple.com/videos/play/tech-talks/10855/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么出现卡顿\"><a href=\"#为什么出现卡顿\" class=\"headerlink\" title=\"为什么出现卡顿\"></a>为什么出现卡顿</h1><p>屏幕显示图像是需要CPU和GPU结合工作。CPU 负责计算显示内容，包括视图创建、布局计算、图片解码、文本绘制等，CPU 完成计算后，会将计算内容提交给 GPU；GPU 进行变换、合成、渲染，将渲染结果提交到帧缓冲区，当下一次垂直同步信号（简称 V-Sync）到来时，将渲染结果显示到屏幕上。</p>\n<p>UI视图显示到屏幕中的过程：<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png\"></p>\n<p>在屏幕显示图像前，CPU 和 GPU 需要完成自身的任务，系统会每（1000/60=16.67ms）将UI的变化重新绘制，渲染到屏幕上。如果在16ms内，主线程进行了耗时操作，CPU和GPU没有来得及生产出一帧缓冲，那么这一帧会被丢弃，显示器就会保持不变，继续显示上一帧内容，用户的视觉上就出现了卡顿；因此卡顿产生的原因就是，CPU和GPU没有及时处理好数据。 </p>\n<h1 id=\"卡顿的检测\"><a href=\"#卡顿的检测\" class=\"headerlink\" title=\"卡顿的检测\"></a>卡顿的检测</h1><h2 id=\"卡顿分析工具\"><a href=\"#卡顿分析工具\" class=\"headerlink\" title=\"卡顿分析工具\"></a>卡顿分析工具</h2><p>从Xcode12 开始，Instrument 新增 AnimationHitches 用以检测卡顿,这里用它分析页面卡顿情况<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.png\"></p>\n<p> 苹果于 20 年的 Session 中提出了 Hitch 的概念，用以衡量滑动时的卡顿情况。Hitch 指的是 卡顿时间（一帧延后出现的时间，ms）/ 总时间（一般是 1 秒），简单来说 卡顿时间比就是一个区间内的总卡顿时间除以它的持续时间。<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E5%8D%A1%E9%A1%BF%E6%AF%94%E4%B8%A5%E9%87%8D%E7%A8%8B%E5%BA%A6%E8%A7%86%E5%9B%BE.png\"></p>\n<ul>\n<li>低于 5 ms/s 说明比较优秀，是最不易被用户察觉到的</li>\n<li>介于 5ms/s  和 10ms/s 之间，说明发生了中等卡顿，用户会察觉到一些中断，但并不严重</li>\n<li>高于 10 ms/s 说明发生了较严重的卡顿，已经影响了用户体验。<br>耗时分析工具</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E8%80%97%E6%97%B6%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.png\"></p>\n<p>选中某一次卡顿,结合Instrument - TimeProfile, 就可以定位到具体的函数堆栈                       </p>\n<h2 id=\"页面卡顿检测\"><a href=\"#页面卡顿检测\" class=\"headerlink\" title=\"页面卡顿检测\"></a>页面卡顿检测</h2><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/yemian.png\"><br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E9%A1%B5%E9%9D%A2%E5%8D%A1%E9%A1%BF%E6%83%85%E5%86%B5.png\"><br>大于16.6ms /s 的为较严重卡顿,大约有33个，有一些卡顿达到了116ms/s。</p>\n<h2 id=\"某次卡顿分析\"><a href=\"#某次卡顿分析\" class=\"headerlink\" title=\"某次卡顿分析\"></a>某次卡顿分析</h2><p>查看某次（116ms/s。)卡顿函数主线程调用栈，查看其使用的时间占比:</p>\n<p><strong>可知耗时操作有：</strong></p>\n<pre><code>AWHomeCommunityTagTableCell的 setModel \nUIImage+WebPConfig 的 aw_imageNamed方法、        \nUIApplication+AWTAutomaticTracks的 awt_sendEvent \nNBSLens_iOSANREntity 的 runloopCycleStart \nAWHomeSearchNetManager 的 getRecommendListWithList \nmap2JsonString \n...\n</code></pre>\n<h1 id=\"卡顿原因及优化\"><a href=\"#卡顿原因及优化\" class=\"headerlink\" title=\"卡顿原因及优化\"></a>卡顿原因及优化</h1><h2 id=\"动态卡setModel的耗时：\"><a href=\"#动态卡setModel的耗时：\" class=\"headerlink\" title=\"动态卡setModel的耗时：\"></a><strong>动态卡setModel的耗时：</strong></h2><ol>\n<li>主线程卡片高度计算<br>滑动过程中视图的宽高,文本对象宽高,排版及绘制都有一定耗时</li>\n</ol>\n<p>优化:异步计算视图宽高,富文本对象宽高、排版并缓存到model里,这里富文本处理主要使用的是:<code>YYText</code> ,示例:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如果你在显示字符串时有性能问题，可以这样开启异步模式：</span><br><span class=\"line\">YYLabel *label = ...</span><br><span class=\"line\">label.displaysAsynchronously = YES;</span><br><span class=\"line\">    </span><br><span class=\"line\">// 如果需要获得最高的性能，你可以在后台线程用 `YYTextLayout` 进行预排版： </span><br><span class=\"line\">YYLabel *label = [<span class=\"type\">YYLabel</span> <span class=\"type\">new</span>];</span><br><span class=\"line\">label.displaysAsynchronously = YES; //开启异步绘制</span><br><span class=\"line\">label.ignoreCommonProperties = YES; //忽略除了 textLayout 之外的其他属性</span><br><span class=\"line\">    </span><br><span class=\"line\">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">   // 创建属性字符串</span><br><span class=\"line\">   NSMutableAttributedString *text = [[<span class=\"type\">NSMutableAttributedString</span> <span class=\"type\">alloc</span>] <span class=\"type\">initWithString</span>:<span class=\"string\">@&quot;Some Text&quot;];</span></span><br><span class=\"line\"><span class=\"string\">   text.yy_font = [UIFont systemFontOfSize:16];</span></span><br><span class=\"line\"><span class=\"string\">   text.yy_color = [UIColor grayColor];</span></span><br><span class=\"line\"><span class=\"string\">   [text yy_setColor:[UIColor redColor] range:NSMakeRange(0, 4)];</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">   // 创建文本容器</span></span><br><span class=\"line\"><span class=\"string\">   YYTextContainer *container = [YYTextContainer new];</span></span><br><span class=\"line\"><span class=\"string\">   container.size = CGSizeMake(100, CGFLOAT_MAX);</span></span><br><span class=\"line\"><span class=\"string\">   container.maximumNumberOfRows = 0;</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   // 生成排版结果</span></span><br><span class=\"line\"><span class=\"string\">   YYTextLayout *layout = [YYTextLayout layoutWithContainer:container text:text];</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   dispatch_async(dispatch_get_main_queue(), ^&#123;</span></span><br><span class=\"line\"><span class=\"string\">       label.size = layout.textBoundingSize;</span></span><br><span class=\"line\"><span class=\"string\">       label.textLayout = layout;</span></span><br><span class=\"line\"><span class=\"string\">   &#125;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<p>2、网络请求数据缓存归档<br>数据的IO读写先对是比较耗时的<br>优化:改为异步的方式</p>\n<p>3、不必要的操作<br>整个页面都是通过TableCell实现的,对于顶部的轮播卡,快捷入口等只展示一次的卡片在上下滑动过程中仍会reload,显然是多余的</p>\n<p>优化:只对table的底部会复用的卡片通过UITableViewCell来实现，对于顶部分类tabbar、轮播卡、notice卡和快捷入口卡等只展示一次的卡片通过TableHeader来实现,避免花朵过程中多余的排版</p>\n<p>4、滑动过程中的操作: 移除视图、初始化视图、添加视图<br><strong>优化</strong>：</p>\n<ul>\n<li>视图的初始化：懒加载的方式进行初始化，只初始化一次，如需要重置则可以在重用方法里重置。</li>\n<li>移除视图、添加视图：通过hidden来控制视图的隐藏显示。</li>\n</ul>\n<p>5、xib、masonry、自动布局的使用</p>\n<p>优化：纯代码方式创建cell，frame方式布局</p>\n<p>6、一些对象在反复创建，或在滑动过程中拼接生成<br>如富文本内容、标签等</p>\n<p>优化：将 NSAttributeString的初始化逻辑和数据源逻辑处理放在异步子线程中，然后缓存到model里。 </p>\n<p>7、视图图层复杂<br>原代码用xib实现的卡片,一些自定义视图、活动卡片标签的实现等较为复杂</p>\n<p>优化：尽量减少冗余视图，活动卡片标签改为富文本方式实现</p>\n<p>8、native图片加载，会反复进行IO读取，并在主线程上的图片解码      <img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD.png\"><br>项目里用了组件化,通过hook <code>imageNamed</code>,查找相应组件的bundle,然后调YYImage的解码方式在主线程解码图片,这里的问题是在反复滑动过程中,会反复的查找bundle - 解码, 较为耗时</p>\n<p>优化: 对解码过的图片进行LRU缓存，提高读取效率</p>\n<p>9、高分辨率图的加载会造成一定卡顿</p>\n<p>网络图片的加载过程:加载 - 解码 - 渲染 ,除此之外还会有IO读写 ,如果是高分辨率图,也是很耗内存和CPU的</p>\n<p>优化主要有两种方式:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方式</th>\n<th align=\"left\"></th>\n<th align=\"left\">特点</th>\n<th align=\"left\">支持</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">下采样加载</td>\n<td align=\"left\">根据size加载相应大小的图片,图片源不变</td>\n<td align=\"left\">只针对下载后的图片做的操作<br>不需要图片服务器支持</td>\n<td align=\"left\">SDWebimage支持,<br>YYWebImage需要自己扩展</td>\n</tr>\n<tr>\n<td align=\"left\">按需请求缩略图</td>\n<td align=\"left\">根据size请求相应大小的图片</td>\n<td align=\"left\">节约流量,<br>请求快,<br>降低内存占用<br>需要图片服务器支持</td>\n<td align=\"left\">YYWebImage支持<br>SDWebimage支持</td>\n</tr>\n</tbody></table>\n<p>项目里图片服务器是用的阿里云OSS,支持图片缩放,故采用第二种方案,请求缩略图实例:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://oss<span class=\"literal\">-console-img-demo-cn-hangzhou</span>.oss<span class=\"literal\">-cn-hangzhou</span>.aliyuncs.com/example.jpg?x<span class=\"literal\">-oss-process</span>=image/resize,h_100,m_lfit</span><br></pre></td></tr></table></figure>\n<p>10、轮播动画<br>icarousel step，轮播图等，滑出界面后，这个头部banner也一直在轮播，有一定耗时</p>\n<p>优化: 在动画卡滑出界面或在离开当前页时，停止动画, 再出现后再开启</p>\n<p>11、JPVideoplayerManager savePlaybackElapsedSeconds:forVideoUrl</p>\n<p>视频播放过程会不断在主线程写文件,较为耗时</p>\n<p>优化: 改为异步方式</p>\n<p>12、离屏渲染问题<br>主要是针对如下场景：阴影、遮罩、组不透明等进行优化</p>\n<p>该页面引起离屏幕渲染的问题主要是绘制阴影：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.customTabbr.layer.shadowOffset = CGSizeMake(5, 0);</span><br><span class=\"line\">self.customTabbr.layer.shadowColor = [UIColor blackColor].CGColor;</span><br><span class=\"line\">self.customTabbr.layer.shadowOpacity = 0.2;//阴影透明度，默认0</span><br><span class=\"line\">self.customTabbr.layer.shadowRadius = 5;//阴影半径，默认3</span><br></pre></td></tr></table></figure>\n<p>优化:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIBezierPath *path = [UIBezierPath bezierPathWithRect:self.customTabbr.bounds];</span><br><span class=\"line\">self.customTabbr.layer.shadowPath = path.CGPath;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其它耗时\"><a href=\"#其它耗时\" class=\"headerlink\" title=\"其它耗时\"></a><strong>其它耗时</strong></h2><ol>\n<li>UIApplication+AWTAutomaticTracks的 awt_sendEvent<br>这里是通过hook的方式对事件做了自动采集</li>\n</ol>\n<p>这个目前耗时占得比重不是很高，且影响较大,暂时没做优化</p>\n<p>后续优化：出于性能考虑，会把这种自动埋点方式去掉，改成部分hook（比如页面pv）结合手动埋点方式搜集日志信息。</p>\n<p>2、NBSLens_iOSANREntity 的 runloopCycleStart</p>\n<p>这个是一个第三方sdk,用来监测线上crash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[NBSAppAgent setStartOption: NBSOption_Crash | NBSOption_UI];</span><br></pre></td></tr></table></figure>\n<p>优化:替换成性能更好的其它方案(bugly),且它支持卡顿分析<br>3、BaiduMobStat</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[BaiduMobStat defaultStat] startWithAppId:@&quot;&quot;];</span><br></pre></td></tr></table></figure>\n<p>百度热力图，占用耗时根听云sdk时差不多的，如果不是很需要可以考虑去掉<br>主要是用来分析用户行为的</p>\n<p>优化: 后续重构数据采集sdk,一起替换掉</p>\n<p>效果：<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E4%B8%80%E6%AC%A1%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/%E4%BC%98%E5%8C%96%E6%95%88%E6%9E%9C.png\"></p>\n<p>可以看到卡顿比已经下降了很多</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h1><p><a href=\"https://github.com/ibireme/YYText\">https://github.com/ibireme/YYText</a></p>\n<p><a href=\"https://developer.apple.com/videos/play/tech-talks/10855/\">https://developer.apple.com/videos/play/tech-talks/10855/</a></p>\n"},{"title":"iOS接入Flutter","date":"2023-04-25T10:50:04.000Z","_content":"","source":"_posts/iOS接入Flutter.md","raw":"---\ntitle: iOS接入Flutter\ndate: 2023-04-25 18:50:04\ncategories: \n- Flutter\ntags:\n---\n","slug":"iOS接入Flutter","published":1,"updated":"2023-04-25T10:50:33.403Z","_id":"clgw5f3zc0001vqzrhsgf8f09","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Git不常用解决方案","date":"2020-04-26T05:50:02.000Z","_content":"# 上传代码到 github\n- 创建一个新的库上传\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:shijianmei/hotfixMS.git\ngit push -u origin main\n\n- 上传一个已经存在的库\ngit remote add origin git@github.com:shijianmei/hotfixMS.git\ngit branch -M main\ngit push -u origin main\n\n# rebase和 merge 的区别:\ngit merge 会生成一个新得合并节点，而rebase不会.\n\n如两个分支:test 和 master\n\n      D---E test\n\n     /\n\nA---B---C---F master\n\n使用merge合并：\n\n      D--------E\n\n     /          \\\n\nA---B---C---F----G   test, master\n\n而使用rebase则：\n\nA---B---D---E---C'---F'   test, master\n\n使用git pull时默认是merge， 加 --rebase参数使其使用rebase方式\n\n```plain\ngit pull --rebase   \n```\n# git如何忽略已经提交的文件\n\n* 首先将要忽略的文件或文件夹添加到 .gitignore 文件中\n* 停止追踪指定文件\n```powershell\n// 忽略单个文件\ngit rm -r --cached [要忽略的文件/文件夹] \n// 忽略所有文件\ngit rm -r --cached .\n```\n\n* 推送到远程仓库\n```plain\ngit add .\ngit commit -m \" commet for commit .....\"\ngit push\n```\n然后其他开发人员pull之后, ignore规则就对其生效了.\n\n# git怎样删除未监视的文件untracked files\n\n删除 untracked files:\n\n```plain\ngit clean -f\n```\n连 untracked 的目录也一起删掉\n```plain\ngit clean -fd\n```\n\n# git上传本地库到远程仓库\n\n1. 拉取远程仓库\n```plain\ngit clone git@gitlab.alibaba-inc.com:CMedia-iOS/YXWAliyunOSSModule.git\ncd YXWAliyunOSSModule\ntouch README.md\ngit add README.md\ngit commit -m \"add README\"\ngit push -u origin master\n```\n\n2. 对于已存在的文件夹或仓库\n```plain\ncd existing_folder\ngit init\ngit remote add origin git@gitlab.alibaba-inc.com:CMedia-iOS/YXWAliyunOSSModule.git\ngit add .\ngit commit\ngit push -u origin master\n```\n# git reset --hard 、git push --force之后如何恢复\n\n```plain\n1.git reflog\n2.查看丢失的commit id\n3.创建一个新的分支，在新的分支对丢失的commit id执行：\ngit cherry-pick 901a33f\n```\n# 如何删除历史记录里的大文件\n\n适用于从一个git项目中，将体积较大的资源彻底从git中删除，包括历史提交记录。\n\n如果仅仅在目录中删除一个文件是不够的，只要在提交记录中有这个文件，那么 .git 中就会有这个文件的信息。\n\n用 filter-branch 可以强制修改提交信息，将某个文件的历史提交痕迹也抹去，就像从来没有过这个文件一样。\n\n1. 找出需要删除的大文件\n先执行\n\n```plain\ngit gc --prune=now\n```\n通过如下命令找到git中保存的大小排名前5的大文件\n```plain\ngit verify-pack -v .git/objects/pack/pack-*.idx | sort -k 3 -g | tail -5\n```\n可以得到如下信息:\n```plain\nb36ba8c5e4749183794705473321ea312b3a409d blob   46486053 11171997 77887787 1 80c1c35362872c8da6e02117a670902efcdce987\n8d1dd2ee60e08b0385fc217a25ea33f36119d694 blob   62475792 7355607 206667227\n267a27fef686fbdfbd25210fe36c8a224a5c1a10 blob   81598760 24710676 214022834\nabe16d4278121f1a3eacdf3a966326bfb581a741 blob   109294368 28516988 98937450\n80c1c35362872c8da6e02117a670902efcdce987 blob   195184864 37268015 40619772\n```\n最后一条就是最大的文件记录，80c1c35362872c8da6e02117a670902efcdce987 是其id，通过如下命令找到该文件的位置\n```plain\ngit rev-list --objects --all | grep 80c1c35362872c8da6e02117a670902efcdce987\n```\n可以得到如下结果\n```plain\n80c1c35362872c8da6e02117a670902efcdce987 AWU3dControl/Frameworks/UnityFramework.framework\n```\nAWU3dControl/Frameworks/UnityFramework.framework 即为文件的位置，一般情况下这里的文件位置应该为文件夹/文件夹/文件的格式\n \n2. 重写所有commit\n```plain\ngit filter-branch --tree-filter \"rm -f {filepath}\" -- --all\n```\n\n3. 收尾\n到这里，历史记录中已经没有该文件了。不过运行 filter-branch 产生的日志还是会对该文件有引用，所以还需要运行以下几条命令，把该文件的引用完全删除：\n\n```plain\nrm -Rf .git/refs/original\nrm -Rf .git/logs/\ngit gc\ngit prune\n```\n\n4. push\n```plain\ngit push -f --all\n```\n可以通过以下命令查看.git文件夹大小\n```plain\ndu -sh .git\n```\n# git stash clear之后的恢复\n\n```powershell\ngit fsck --lost-found, 找出刚才删除的提交对象和文件对象, 里面是一个一个的 dangling commit commitId\ngit show commitId一个一个的查看修改的内容, 找到了我们需要恢复的commitId之后\ngit stash apply commitId直接恢复就可以了\n```\n\n# 配置命令的别名\n\n* 命令行设置 git 的配置 alias\n```powershell\ngit config --global alias.<简化的字符> 原始命令\n```\n如: 设置获取状态\n```powershell\ngit config --global alias.st status #代表输入 git st 就代表 git status\n```\n* 手动配置 ~/.gitconfig 文件\n```plain\n        pl = pull\n        st = status\n        ci = commit\n        co = checkout\n        br = branch\n        df = diff\n        unstage = reset HEAD --\n        lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Cres    et' --abbrev-commit\n        last = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Cr    eset' --abbrev-commit -1 HEAD\n  [core]\n    excludesfile = /Users/mac/.gitignore_global\n    editor = /usr/local/bin/vim\n  [push]\n        default = simple\n  [difftool \"sourcetree\"]\n    cmd = opendiff \\\"$LOCAL\\\" \\\"$REMOTE\\\"\n    path =\n  [mergetool \"sourcetree\"]\n    cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \\\"$LOCAL\\\" \\\"$REMOTE\\\" -ancestor \\\"$BASE\\\" -merge \\\"$MERGED\\\"\n    trustExitCode = true\n```\n\n","source":"_posts/Git不常用解决方案.md","raw":"---\ntitle: Git不常用解决方案\ndate: 2020-04-26 13:50:02\ncategories: \n- Git\ntags:\n---\n# 上传代码到 github\n- 创建一个新的库上传\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:shijianmei/hotfixMS.git\ngit push -u origin main\n\n- 上传一个已经存在的库\ngit remote add origin git@github.com:shijianmei/hotfixMS.git\ngit branch -M main\ngit push -u origin main\n\n# rebase和 merge 的区别:\ngit merge 会生成一个新得合并节点，而rebase不会.\n\n如两个分支:test 和 master\n\n      D---E test\n\n     /\n\nA---B---C---F master\n\n使用merge合并：\n\n      D--------E\n\n     /          \\\n\nA---B---C---F----G   test, master\n\n而使用rebase则：\n\nA---B---D---E---C'---F'   test, master\n\n使用git pull时默认是merge， 加 --rebase参数使其使用rebase方式\n\n```plain\ngit pull --rebase   \n```\n# git如何忽略已经提交的文件\n\n* 首先将要忽略的文件或文件夹添加到 .gitignore 文件中\n* 停止追踪指定文件\n```powershell\n// 忽略单个文件\ngit rm -r --cached [要忽略的文件/文件夹] \n// 忽略所有文件\ngit rm -r --cached .\n```\n\n* 推送到远程仓库\n```plain\ngit add .\ngit commit -m \" commet for commit .....\"\ngit push\n```\n然后其他开发人员pull之后, ignore规则就对其生效了.\n\n# git怎样删除未监视的文件untracked files\n\n删除 untracked files:\n\n```plain\ngit clean -f\n```\n连 untracked 的目录也一起删掉\n```plain\ngit clean -fd\n```\n\n# git上传本地库到远程仓库\n\n1. 拉取远程仓库\n```plain\ngit clone git@gitlab.alibaba-inc.com:CMedia-iOS/YXWAliyunOSSModule.git\ncd YXWAliyunOSSModule\ntouch README.md\ngit add README.md\ngit commit -m \"add README\"\ngit push -u origin master\n```\n\n2. 对于已存在的文件夹或仓库\n```plain\ncd existing_folder\ngit init\ngit remote add origin git@gitlab.alibaba-inc.com:CMedia-iOS/YXWAliyunOSSModule.git\ngit add .\ngit commit\ngit push -u origin master\n```\n# git reset --hard 、git push --force之后如何恢复\n\n```plain\n1.git reflog\n2.查看丢失的commit id\n3.创建一个新的分支，在新的分支对丢失的commit id执行：\ngit cherry-pick 901a33f\n```\n# 如何删除历史记录里的大文件\n\n适用于从一个git项目中，将体积较大的资源彻底从git中删除，包括历史提交记录。\n\n如果仅仅在目录中删除一个文件是不够的，只要在提交记录中有这个文件，那么 .git 中就会有这个文件的信息。\n\n用 filter-branch 可以强制修改提交信息，将某个文件的历史提交痕迹也抹去，就像从来没有过这个文件一样。\n\n1. 找出需要删除的大文件\n先执行\n\n```plain\ngit gc --prune=now\n```\n通过如下命令找到git中保存的大小排名前5的大文件\n```plain\ngit verify-pack -v .git/objects/pack/pack-*.idx | sort -k 3 -g | tail -5\n```\n可以得到如下信息:\n```plain\nb36ba8c5e4749183794705473321ea312b3a409d blob   46486053 11171997 77887787 1 80c1c35362872c8da6e02117a670902efcdce987\n8d1dd2ee60e08b0385fc217a25ea33f36119d694 blob   62475792 7355607 206667227\n267a27fef686fbdfbd25210fe36c8a224a5c1a10 blob   81598760 24710676 214022834\nabe16d4278121f1a3eacdf3a966326bfb581a741 blob   109294368 28516988 98937450\n80c1c35362872c8da6e02117a670902efcdce987 blob   195184864 37268015 40619772\n```\n最后一条就是最大的文件记录，80c1c35362872c8da6e02117a670902efcdce987 是其id，通过如下命令找到该文件的位置\n```plain\ngit rev-list --objects --all | grep 80c1c35362872c8da6e02117a670902efcdce987\n```\n可以得到如下结果\n```plain\n80c1c35362872c8da6e02117a670902efcdce987 AWU3dControl/Frameworks/UnityFramework.framework\n```\nAWU3dControl/Frameworks/UnityFramework.framework 即为文件的位置，一般情况下这里的文件位置应该为文件夹/文件夹/文件的格式\n \n2. 重写所有commit\n```plain\ngit filter-branch --tree-filter \"rm -f {filepath}\" -- --all\n```\n\n3. 收尾\n到这里，历史记录中已经没有该文件了。不过运行 filter-branch 产生的日志还是会对该文件有引用，所以还需要运行以下几条命令，把该文件的引用完全删除：\n\n```plain\nrm -Rf .git/refs/original\nrm -Rf .git/logs/\ngit gc\ngit prune\n```\n\n4. push\n```plain\ngit push -f --all\n```\n可以通过以下命令查看.git文件夹大小\n```plain\ndu -sh .git\n```\n# git stash clear之后的恢复\n\n```powershell\ngit fsck --lost-found, 找出刚才删除的提交对象和文件对象, 里面是一个一个的 dangling commit commitId\ngit show commitId一个一个的查看修改的内容, 找到了我们需要恢复的commitId之后\ngit stash apply commitId直接恢复就可以了\n```\n\n# 配置命令的别名\n\n* 命令行设置 git 的配置 alias\n```powershell\ngit config --global alias.<简化的字符> 原始命令\n```\n如: 设置获取状态\n```powershell\ngit config --global alias.st status #代表输入 git st 就代表 git status\n```\n* 手动配置 ~/.gitconfig 文件\n```plain\n        pl = pull\n        st = status\n        ci = commit\n        co = checkout\n        br = branch\n        df = diff\n        unstage = reset HEAD --\n        lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Cres    et' --abbrev-commit\n        last = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Cr    eset' --abbrev-commit -1 HEAD\n  [core]\n    excludesfile = /Users/mac/.gitignore_global\n    editor = /usr/local/bin/vim\n  [push]\n        default = simple\n  [difftool \"sourcetree\"]\n    cmd = opendiff \\\"$LOCAL\\\" \\\"$REMOTE\\\"\n    path =\n  [mergetool \"sourcetree\"]\n    cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \\\"$LOCAL\\\" \\\"$REMOTE\\\" -ancestor \\\"$BASE\\\" -merge \\\"$MERGED\\\"\n    trustExitCode = true\n```\n\n","slug":"Git不常用解决方案","published":1,"updated":"2023-05-24T08:16:54.626Z","_id":"clgxae0uc0000ghzr5wch03vh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"上传代码到-github\"><a href=\"#上传代码到-github\" class=\"headerlink\" title=\"上传代码到 github\"></a>上传代码到 github</h1><ul>\n<li><p>创建一个新的库上传<br>git init<br>git add README.md<br>git commit -m “first commit”<br>git branch -M main<br>git remote add origin <a href=\"mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#109;\">&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#109;</a>:shijianmei/hotfixMS.git<br>git push -u origin main</p>\n</li>\n<li><p>上传一个已经存在的库<br>git remote add origin <a href=\"mailto:&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;\">&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;</a>:shijianmei/hotfixMS.git<br>git branch -M main<br>git push -u origin main</p>\n</li>\n</ul>\n<h1 id=\"rebase和-merge-的区别\"><a href=\"#rebase和-merge-的区别\" class=\"headerlink\" title=\"rebase和 merge 的区别:\"></a>rebase和 merge 的区别:</h1><p>git merge 会生成一个新得合并节点，而rebase不会.</p>\n<p>如两个分支:test 和 master</p>\n<pre><code>  D---E test\n\n /\n</code></pre>\n<p>A—B—C—F master</p>\n<p>使用merge合并：</p>\n<pre><code>  D--------E\n\n /          \\\n</code></pre>\n<p>A—B—C—F—-G   test, master</p>\n<p>而使用rebase则：</p>\n<p>A—B—D—E—C’—F’   test, master</p>\n<p>使用git pull时默认是merge， 加 –rebase参数使其使用rebase方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase   </span><br></pre></td></tr></table></figure>\n<h1 id=\"git如何忽略已经提交的文件\"><a href=\"#git如何忽略已经提交的文件\" class=\"headerlink\" title=\"git如何忽略已经提交的文件\"></a>git如何忽略已经提交的文件</h1><ul>\n<li><p>首先将要忽略的文件或文件夹添加到 .gitignore 文件中</p>\n</li>\n<li><p>停止追踪指定文件</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 忽略单个文件</span><br><span class=\"line\">git <span class=\"built_in\">rm</span> <span class=\"literal\">-r</span> <span class=\"literal\">--cached</span> [要忽略的文件/文件夹] </span><br><span class=\"line\">// 忽略所有文件</span><br><span class=\"line\">git <span class=\"built_in\">rm</span> <span class=\"literal\">-r</span> <span class=\"literal\">--cached</span> .</span><br></pre></td></tr></table></figure></li>\n<li><p>推送到远程仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot; commet for commit .....&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>然后其他开发人员pull之后, ignore规则就对其生效了.</p>\n</li>\n</ul>\n<h1 id=\"git怎样删除未监视的文件untracked-files\"><a href=\"#git怎样删除未监视的文件untracked-files\" class=\"headerlink\" title=\"git怎样删除未监视的文件untracked files\"></a>git怎样删除未监视的文件untracked files</h1><p>删除 untracked files:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -f</span><br></pre></td></tr></table></figure>\n<p>连 untracked 的目录也一起删掉</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -fd</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"git上传本地库到远程仓库\"><a href=\"#git上传本地库到远程仓库\" class=\"headerlink\" title=\"git上传本地库到远程仓库\"></a>git上传本地库到远程仓库</h1><ol>\n<li><p>拉取远程仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@gitlab.alibaba-inc.com:CMedia-iOS/YXWAliyunOSSModule.git</span><br><span class=\"line\">cd YXWAliyunOSSModule</span><br><span class=\"line\">touch README.md</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;add README&quot;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></li>\n<li><p>对于已存在的文件夹或仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd existing_folder</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@gitlab.alibaba-inc.com:CMedia-iOS/YXWAliyunOSSModule.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h1 id=\"git-reset-–hard-、git-push-–force之后如何恢复\"><a href=\"#git-reset-–hard-、git-push-–force之后如何恢复\" class=\"headerlink\" title=\"git reset –hard 、git push –force之后如何恢复\"></a>git reset –hard 、git push –force之后如何恢复</h1></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.git reflog</span><br><span class=\"line\">2.查看丢失的commit id</span><br><span class=\"line\">3.创建一个新的分支，在新的分支对丢失的commit id执行：</span><br><span class=\"line\">git cherry-pick 901a33f</span><br></pre></td></tr></table></figure>\n<h1 id=\"如何删除历史记录里的大文件\"><a href=\"#如何删除历史记录里的大文件\" class=\"headerlink\" title=\"如何删除历史记录里的大文件\"></a>如何删除历史记录里的大文件</h1><p>适用于从一个git项目中，将体积较大的资源彻底从git中删除，包括历史提交记录。</p>\n<p>如果仅仅在目录中删除一个文件是不够的，只要在提交记录中有这个文件，那么 .git 中就会有这个文件的信息。</p>\n<p>用 filter-branch 可以强制修改提交信息，将某个文件的历史提交痕迹也抹去，就像从来没有过这个文件一样。</p>\n<ol>\n<li>找出需要删除的大文件<br>先执行</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git gc --prune=now</span><br></pre></td></tr></table></figure>\n<p>通过如下命令找到git中保存的大小排名前5的大文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git verify-pack -v .git/objects/pack/pack-*.idx | sort -k 3 -g | tail -5</span><br></pre></td></tr></table></figure>\n<p>可以得到如下信息:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b36ba8c5e4749183794705473321ea312b3a409d blob   46486053 11171997 77887787 1 80c1c35362872c8da6e02117a670902efcdce987</span><br><span class=\"line\">8d1dd2ee60e08b0385fc217a25ea33f36119d694 blob   62475792 7355607 206667227</span><br><span class=\"line\">267a27fef686fbdfbd25210fe36c8a224a5c1a10 blob   81598760 24710676 214022834</span><br><span class=\"line\">abe16d4278121f1a3eacdf3a966326bfb581a741 blob   109294368 28516988 98937450</span><br><span class=\"line\">80c1c35362872c8da6e02117a670902efcdce987 blob   195184864 37268015 40619772</span><br></pre></td></tr></table></figure>\n<p>最后一条就是最大的文件记录，80c1c35362872c8da6e02117a670902efcdce987 是其id，通过如下命令找到该文件的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rev-list --objects --all | grep 80c1c35362872c8da6e02117a670902efcdce987</span><br></pre></td></tr></table></figure>\n<p>可以得到如下结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">80c1c35362872c8da6e02117a670902efcdce987 AWU3dControl/Frameworks/UnityFramework.framework</span><br></pre></td></tr></table></figure>\n<p>AWU3dControl/Frameworks/UnityFramework.framework 即为文件的位置，一般情况下这里的文件位置应该为文件夹/文件夹/文件的格式</p>\n<ol start=\"2\">\n<li><p>重写所有commit</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git filter-branch --tree-filter &quot;rm -f &#123;filepath&#125;&quot; -- --all</span><br></pre></td></tr></table></figure></li>\n<li><p>收尾<br>到这里，历史记录中已经没有该文件了。不过运行 filter-branch 产生的日志还是会对该文件有引用，所以还需要运行以下几条命令，把该文件的引用完全删除：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -Rf .git/refs/original</span><br><span class=\"line\">rm -Rf .git/logs/</span><br><span class=\"line\">git gc</span><br><span class=\"line\">git prune</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>push<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f --all</span><br></pre></td></tr></table></figure>\n可以通过以下命令查看.git文件夹大小<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -sh .git</span><br></pre></td></tr></table></figure>\n<h1 id=\"git-stash-clear之后的恢复\"><a href=\"#git-stash-clear之后的恢复\" class=\"headerlink\" title=\"git stash clear之后的恢复\"></a>git stash clear之后的恢复</h1></li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fsck <span class=\"literal\">--lost-found</span>, 找出刚才删除的提交对象和文件对象, 里面是一个一个的 dangling commit commitId</span><br><span class=\"line\">git show commitId一个一个的查看修改的内容, 找到了我们需要恢复的commitId之后</span><br><span class=\"line\">git stash apply commitId直接恢复就可以了</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置命令的别名\"><a href=\"#配置命令的别名\" class=\"headerlink\" title=\"配置命令的别名\"></a>配置命令的别名</h1><ul>\n<li>命令行设置 git 的配置 alias<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config <span class=\"literal\">--global</span> alias.&lt;简化的字符&gt; 原始命令</span><br></pre></td></tr></table></figure>\n如: 设置获取状态<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config <span class=\"literal\">--global</span> alias.st status <span class=\"comment\">#代表输入 git st 就代表 git status</span></span><br></pre></td></tr></table></figure></li>\n<li>手动配置 ~/.gitconfig 文件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      pl = pull</span><br><span class=\"line\">      st = status</span><br><span class=\"line\">      ci = commit</span><br><span class=\"line\">      co = checkout</span><br><span class=\"line\">      br = branch</span><br><span class=\"line\">      df = diff</span><br><span class=\"line\">      unstage = reset HEAD --</span><br><span class=\"line\">      lg = log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Cres    et&#x27; --abbrev-commit</span><br><span class=\"line\">      last = log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Cr    eset&#x27; --abbrev-commit -1 HEAD</span><br><span class=\"line\">[core]</span><br><span class=\"line\">  excludesfile = /Users/mac/.gitignore_global</span><br><span class=\"line\">  editor = /usr/local/bin/vim</span><br><span class=\"line\">[push]</span><br><span class=\"line\">      default = simple</span><br><span class=\"line\">[difftool &quot;sourcetree&quot;]</span><br><span class=\"line\">  cmd = opendiff \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot;</span><br><span class=\"line\">  path =</span><br><span class=\"line\">[mergetool &quot;sourcetree&quot;]</span><br><span class=\"line\">  cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot; -ancestor \\&quot;$BASE\\&quot; -merge \\&quot;$MERGED\\&quot;</span><br><span class=\"line\">  trustExitCode = true</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"上传代码到-github\"><a href=\"#上传代码到-github\" class=\"headerlink\" title=\"上传代码到 github\"></a>上传代码到 github</h1><ul>\n<li><p>创建一个新的库上传<br>git init<br>git add README.md<br>git commit -m “first commit”<br>git branch -M main<br>git remote add origin <a href=\"mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#109;\">&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#109;</a>:shijianmei/hotfixMS.git<br>git push -u origin main</p>\n</li>\n<li><p>上传一个已经存在的库<br>git remote add origin <a href=\"mailto:&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;\">&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;</a>:shijianmei/hotfixMS.git<br>git branch -M main<br>git push -u origin main</p>\n</li>\n</ul>\n<h1 id=\"rebase和-merge-的区别\"><a href=\"#rebase和-merge-的区别\" class=\"headerlink\" title=\"rebase和 merge 的区别:\"></a>rebase和 merge 的区别:</h1><p>git merge 会生成一个新得合并节点，而rebase不会.</p>\n<p>如两个分支:test 和 master</p>\n<pre><code>  D---E test\n\n /\n</code></pre>\n<p>A—B—C—F master</p>\n<p>使用merge合并：</p>\n<pre><code>  D--------E\n\n /          \\\n</code></pre>\n<p>A—B—C—F—-G   test, master</p>\n<p>而使用rebase则：</p>\n<p>A—B—D—E—C’—F’   test, master</p>\n<p>使用git pull时默认是merge， 加 –rebase参数使其使用rebase方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase   </span><br></pre></td></tr></table></figure>\n<h1 id=\"git如何忽略已经提交的文件\"><a href=\"#git如何忽略已经提交的文件\" class=\"headerlink\" title=\"git如何忽略已经提交的文件\"></a>git如何忽略已经提交的文件</h1><ul>\n<li><p>首先将要忽略的文件或文件夹添加到 .gitignore 文件中</p>\n</li>\n<li><p>停止追踪指定文件</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 忽略单个文件</span><br><span class=\"line\">git <span class=\"built_in\">rm</span> <span class=\"literal\">-r</span> <span class=\"literal\">--cached</span> [要忽略的文件/文件夹] </span><br><span class=\"line\">// 忽略所有文件</span><br><span class=\"line\">git <span class=\"built_in\">rm</span> <span class=\"literal\">-r</span> <span class=\"literal\">--cached</span> .</span><br></pre></td></tr></table></figure></li>\n<li><p>推送到远程仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot; commet for commit .....&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>然后其他开发人员pull之后, ignore规则就对其生效了.</p>\n</li>\n</ul>\n<h1 id=\"git怎样删除未监视的文件untracked-files\"><a href=\"#git怎样删除未监视的文件untracked-files\" class=\"headerlink\" title=\"git怎样删除未监视的文件untracked files\"></a>git怎样删除未监视的文件untracked files</h1><p>删除 untracked files:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -f</span><br></pre></td></tr></table></figure>\n<p>连 untracked 的目录也一起删掉</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -fd</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"git上传本地库到远程仓库\"><a href=\"#git上传本地库到远程仓库\" class=\"headerlink\" title=\"git上传本地库到远程仓库\"></a>git上传本地库到远程仓库</h1><ol>\n<li><p>拉取远程仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@gitlab.alibaba-inc.com:CMedia-iOS/YXWAliyunOSSModule.git</span><br><span class=\"line\">cd YXWAliyunOSSModule</span><br><span class=\"line\">touch README.md</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;add README&quot;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></li>\n<li><p>对于已存在的文件夹或仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd existing_folder</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@gitlab.alibaba-inc.com:CMedia-iOS/YXWAliyunOSSModule.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h1 id=\"git-reset-–hard-、git-push-–force之后如何恢复\"><a href=\"#git-reset-–hard-、git-push-–force之后如何恢复\" class=\"headerlink\" title=\"git reset –hard 、git push –force之后如何恢复\"></a>git reset –hard 、git push –force之后如何恢复</h1></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.git reflog</span><br><span class=\"line\">2.查看丢失的commit id</span><br><span class=\"line\">3.创建一个新的分支，在新的分支对丢失的commit id执行：</span><br><span class=\"line\">git cherry-pick 901a33f</span><br></pre></td></tr></table></figure>\n<h1 id=\"如何删除历史记录里的大文件\"><a href=\"#如何删除历史记录里的大文件\" class=\"headerlink\" title=\"如何删除历史记录里的大文件\"></a>如何删除历史记录里的大文件</h1><p>适用于从一个git项目中，将体积较大的资源彻底从git中删除，包括历史提交记录。</p>\n<p>如果仅仅在目录中删除一个文件是不够的，只要在提交记录中有这个文件，那么 .git 中就会有这个文件的信息。</p>\n<p>用 filter-branch 可以强制修改提交信息，将某个文件的历史提交痕迹也抹去，就像从来没有过这个文件一样。</p>\n<ol>\n<li>找出需要删除的大文件<br>先执行</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git gc --prune=now</span><br></pre></td></tr></table></figure>\n<p>通过如下命令找到git中保存的大小排名前5的大文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git verify-pack -v .git/objects/pack/pack-*.idx | sort -k 3 -g | tail -5</span><br></pre></td></tr></table></figure>\n<p>可以得到如下信息:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b36ba8c5e4749183794705473321ea312b3a409d blob   46486053 11171997 77887787 1 80c1c35362872c8da6e02117a670902efcdce987</span><br><span class=\"line\">8d1dd2ee60e08b0385fc217a25ea33f36119d694 blob   62475792 7355607 206667227</span><br><span class=\"line\">267a27fef686fbdfbd25210fe36c8a224a5c1a10 blob   81598760 24710676 214022834</span><br><span class=\"line\">abe16d4278121f1a3eacdf3a966326bfb581a741 blob   109294368 28516988 98937450</span><br><span class=\"line\">80c1c35362872c8da6e02117a670902efcdce987 blob   195184864 37268015 40619772</span><br></pre></td></tr></table></figure>\n<p>最后一条就是最大的文件记录，80c1c35362872c8da6e02117a670902efcdce987 是其id，通过如下命令找到该文件的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rev-list --objects --all | grep 80c1c35362872c8da6e02117a670902efcdce987</span><br></pre></td></tr></table></figure>\n<p>可以得到如下结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">80c1c35362872c8da6e02117a670902efcdce987 AWU3dControl/Frameworks/UnityFramework.framework</span><br></pre></td></tr></table></figure>\n<p>AWU3dControl/Frameworks/UnityFramework.framework 即为文件的位置，一般情况下这里的文件位置应该为文件夹/文件夹/文件的格式</p>\n<ol start=\"2\">\n<li><p>重写所有commit</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git filter-branch --tree-filter &quot;rm -f &#123;filepath&#125;&quot; -- --all</span><br></pre></td></tr></table></figure></li>\n<li><p>收尾<br>到这里，历史记录中已经没有该文件了。不过运行 filter-branch 产生的日志还是会对该文件有引用，所以还需要运行以下几条命令，把该文件的引用完全删除：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -Rf .git/refs/original</span><br><span class=\"line\">rm -Rf .git/logs/</span><br><span class=\"line\">git gc</span><br><span class=\"line\">git prune</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>push<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f --all</span><br></pre></td></tr></table></figure>\n可以通过以下命令查看.git文件夹大小<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -sh .git</span><br></pre></td></tr></table></figure>\n<h1 id=\"git-stash-clear之后的恢复\"><a href=\"#git-stash-clear之后的恢复\" class=\"headerlink\" title=\"git stash clear之后的恢复\"></a>git stash clear之后的恢复</h1></li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fsck <span class=\"literal\">--lost-found</span>, 找出刚才删除的提交对象和文件对象, 里面是一个一个的 dangling commit commitId</span><br><span class=\"line\">git show commitId一个一个的查看修改的内容, 找到了我们需要恢复的commitId之后</span><br><span class=\"line\">git stash apply commitId直接恢复就可以了</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置命令的别名\"><a href=\"#配置命令的别名\" class=\"headerlink\" title=\"配置命令的别名\"></a>配置命令的别名</h1><ul>\n<li>命令行设置 git 的配置 alias<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config <span class=\"literal\">--global</span> alias.&lt;简化的字符&gt; 原始命令</span><br></pre></td></tr></table></figure>\n如: 设置获取状态<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config <span class=\"literal\">--global</span> alias.st status <span class=\"comment\">#代表输入 git st 就代表 git status</span></span><br></pre></td></tr></table></figure></li>\n<li>手动配置 ~/.gitconfig 文件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      pl = pull</span><br><span class=\"line\">      st = status</span><br><span class=\"line\">      ci = commit</span><br><span class=\"line\">      co = checkout</span><br><span class=\"line\">      br = branch</span><br><span class=\"line\">      df = diff</span><br><span class=\"line\">      unstage = reset HEAD --</span><br><span class=\"line\">      lg = log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Cres    et&#x27; --abbrev-commit</span><br><span class=\"line\">      last = log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Cr    eset&#x27; --abbrev-commit -1 HEAD</span><br><span class=\"line\">[core]</span><br><span class=\"line\">  excludesfile = /Users/mac/.gitignore_global</span><br><span class=\"line\">  editor = /usr/local/bin/vim</span><br><span class=\"line\">[push]</span><br><span class=\"line\">      default = simple</span><br><span class=\"line\">[difftool &quot;sourcetree&quot;]</span><br><span class=\"line\">  cmd = opendiff \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot;</span><br><span class=\"line\">  path =</span><br><span class=\"line\">[mergetool &quot;sourcetree&quot;]</span><br><span class=\"line\">  cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \\&quot;$LOCAL\\&quot; \\&quot;$REMOTE\\&quot; -ancestor \\&quot;$BASE\\&quot; -merge \\&quot;$MERGED\\&quot;</span><br><span class=\"line\">  trustExitCode = true</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Git常用命令","date":"2020-03-25T05:33:25.000Z","_content":"我每天使用 Git ，但是很多命令记不住。\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/git.png)\n\ngit 常用命令.png\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n\n>Workspace：工作区\n>Index / Stage：暂存区\n>Repository：仓库区（或本地仓库）\n>Remote：远程仓库\n# 新建代码库\n\n在当前目录新建一个Git代码库\n\n```plain\n$ git init\n```\n\n新建一个目录，将其初始化为Git代码库\n\n```plain\ngit init [project-name]\n```\n\n下载一个项目和它的整个代码历史\n\n```plain\n$ git clone [url]\n```\n\n下载一个代码，并指定分支\n\n```plain\n$ git clone -b [branchName] [url]\n```\n# 配置\n\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n显示当前的Git配置\n\n```plain\n$ git config --list\n```\n\n编辑Git配置文件\n\n```plain\n$ git config -e [--global]\n```\n\n设置提交代码时的用户信息\n\n```plain\n$ git config [--global] user.name \"[name]\"\n```\n$ git config [--global] user.email \"[email address]\"\n# 增加/删除文件\n\n添加指定文件到暂存区\n\n```plain\n$ git add [file1] [file2] ...\n```\n\n添加指定目录到暂存区，包括子目录\n\n```plain\n$ git add [dir]\n```\n\n添加当前目录的所有文件到暂存区\n\n```plain\n$ git add .\n```\n\n添加每个变化前，都会要求确认\n\n对于同一个文件的多处变化，可以实现分次提交\n\n```plain\n$ git add -p\n```\n\n删除工作区文件，并且将这次删除放入暂存区\n\n```plain\n$ git rm [file1] [file2] ...\n```\n\n停止追踪指定文件，但该文件会保留在工作区\n\n```plain\n$ git rm --cached [file]\n```\n\n改名文件，并且将这个改名放入暂存区\n\n```plain\n$ git mv [file-original] [file-renamed]\n```\n\n# 代码提交\n\n提交暂存区到仓库区\n\n```plain\n$ git commit -m [message]\n```\n\n提交暂存区的指定文件到仓库区\n\n```plain\n$ git commit [file1] [file2] ... -m [message]\n```\n\n提交工作区自上次commit之后的变化，直接到仓库区\n\n```plain\n$ git commit -a\n```\n\n提交时显示所有diff信息\n\n```plain\n$ git commit -v\n```\n\n使用一次新的commit，替代上一次提交\n\n如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\n```plain\n$ git commit --amend -m [message]\n```\n\n重做上一次commit，并包括指定文件的新变化\n\n```plain\n$ git commit --amend [file1] [file2] ...\n```\n\n# 分支\n\n列出所有本地分支\n\n```plain\n$ git branch\n```\n\n列出所有远程分支\n\n```plain\n$ git branch -r\n```\n\n列出所有本地分支和远程分支\n\n```plain\n$ git branch -a\n```\n\n新建一个分支，但依然停留在当前分支\n\n```plain\n$ git branch [branch-name]\n```\n\n新建一个分支，并切换到该分支\n\n```plain\n$ git checkout -b [branch]\n```\n\n新建一个分支，指向指定commit\n\n```plain\n$ git branch [branch] [commit]\n```\n\n新建一个分支，与指定的远程分支建立追踪关系\n\n```plain\n$ git branch --track [branch] [remote-branch]\n```\n\n切换到远程的一个分支 ,并映射到本地的一个分支\n\n```plain\ngit checkout -b master_network origin/master_network\n```\n\n把本地分支提交到远程\n\n```plain\n$ git push origin [branch]\n```\n\n切换到指定分支，并更新工作区\n\n```plain\n$ git checkout [branch-name]\n```\n\n切换到上一个分支\n\n```plain\n$ git checkout -\n```\n\n建立追踪关系，在现有分支与指定的远程分支之间\n\n```plain\n$ git branch --set-upstream [branch] [remote-branch]\n```\n\n合并指定分支到当前分支\n\n```plain\n$ git merge [branch]\n```\n\n选择一个commit，合并进当前分支\n\n```plain\n$ git cherry-pick [commit]\n```\n\n删除分支\n\n```plain\n$ git branch -d [branch-name]\n```\n\n删除远程分支\n\n```plain\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n更改本地和远程分支的名\n\n```plain\ngit branch -m old_branch new_branch Rename branch locally \ngit push origin :old_branch Delete the old branch \ngit push --set-upstream origin new_branch Push the new branch, set local branch to track the new remote\n```\n\n# 标签\n\n列出所有tag\n\n```plain\n$ git tag\n```\n\n新建一个tag在当前commit\n\n```plain\n$ git tag [tag]\n```\n\n新建一个tag在指定commit\n\n```plain\n$ git tag [tag] [commit]\n```\n\n删除本地tag\n\n```plain\n$ git tag -d [tag]\n```\n\n删除远程tag\n\n```plain\n$ git push origin --delete tag <tagname>\n```\n\n查看tag信息\n\n```plain\n$ git show [tag]\n```\n\n提交指定tag\n\n```plain\n$ git push [remote] [tag]\n```\n\n提交所有tag\n\n```plain\n$ git push [remote] --tags\n```\n\n新建一个分支，指向某个tag\n\n```plain\n$ git checkout -b [branch] [tag]\n```\n\n# 查看信息\n\n显示有变更的文件\n\n```plain\n$ git status\n```\n\n显示当前分支的版本历史\n\n```plain\n$ git log\n```\n\n显示commit历史，以及每次commit发生变更的文件\n\n```plain\n$ git log --stat\n```\n\n搜索提交历史，根据关键词\n\n```plain\n$ git log -S [keyword]\n```\n\n显示某个commit之后的所有变动，每个commit占据一行\n\n```plain\n$ git log [tag] HEAD --pretty=format:%s\n```\n\n显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\n```plain\n$ git log [tag] HEAD --grep feature\n```\n\n显示某个文件的版本历史，包括文件改名\n\n```plain\n$ git log --follow [file]\n$ git whatchanged [file]\n```\n\n显示指定文件相关的每一次diff\n\n```plain\n$ git log -p [file]\n```\n\n显示过去5次提交\n\n```plain\n$ git log -5 --pretty --oneline\n```\n\n显示所有提交过的用户，按提交次数排序\n\n```plain\n$ git shortlog -sn\n```\n\n显示指定文件是什么人在什么时间修改过\n\n```plain\n$ git blame [file]\n```\n\n显示暂存区和工作区的差异\n\n```plain\n$ git diff\n```\n\n显示暂存区和上一个commit的差异\n\n```plain\n$ git diff --cached [file]\n```\n\n显示工作区与当前分支最新commit之间的差异\n\n```plain\n$ git diff HEAD\n```\n\n显示两次提交之间的差异\n\n```plain\n$ git diff [first-branch]...[second-branch]\n```\n\n显示今天你写了多少行代码\n\n```plain\n$ git diff --shortstat \"@{0 day ago}\"\n```\n\n显示某次提交的元数据和内容变化\n\n```plain\n$ git show [commit]\n```\n\n显示某次提交发生变化的文件\n\n```plain\n$ git show --name-only [commit]\n```\n\n显示某次提交时，某个文件的内容\n\n```plain\n$ git show [commit]:[filename]\n```\n\n显示当前分支的最近几次提交\n\n```plain\n$ git reflog\n```\n\n# 远程同步\n\n下载远程仓库的所有变动\n\n```plain\n$ git fetch [remote]\n```\n\n显示所有远程仓库\n\n```plain\n$ git remote -v\n```\n\n显示某个远程仓库的信息\n\n```plain\n$ git remote show [remote]\n```\n\n增加一个新的远程仓库，并命名\n\n```plain\n$ git remote add [shortname] [url]\n```\n\n取回远程仓库的变化，并与本地分支合并\n\n```plain\n$ git pull [remote] [branch]\n```\n\n上传本地指定分支到远程仓库\n\n```plain\n$ git push [remote] [branch]\n```\n\n强行推送当前分支到远程仓库，即使有冲突\n\n```plain\n$ git push [remote] --force\n```\n\n推送所有分支到远程仓库\n\n```plain\n$ git push [remote] --all\n```\n\n# 撤销\n\n恢复暂存区的指定文件到工作区\n\n```plain\n$ git checkout [file]\n```\n\n恢复某个commit的指定文件到暂存区和工作区\n\n```plain\n$ git checkout [commit] [file]\n```\n\n恢复暂存区的所有文件到工作区\n\n```plain\n$ git checkout .\n```\n\n重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\n```plain\n$ git reset [file]\n```\n\n重置暂存区与工作区，与上一次commit保持一致\n\n```plain\n$ git reset --hard\n```\n\n重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\n```plain\n$ git reset [commit]\n```\n\n重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\n```plain\n$ git reset --hard [commit]\n```\n\n重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\n```plain\n$ git reset --keep [commit]\n```\n\n强推到远程\n\n```plain\n$ git push origin HEAD --force\n```\n\n新建一个commit，用来撤销指定commit\n\n后者的所有变化都将被前者抵消，并且应用到当前分支\n\n```plain\n$ git revert [commit]\n```\n\n暂时将未提交的变化移除，稍后再移入\n\n```plain\n$ git stash\n$ git stash pop\n```\n\n参考:[https://git-scm.com/book/zh/v2](https://git-scm.com/book/zh/v2)\n\n","source":"_posts/Git常用命令.md","raw":"---\ntitle: Git常用命令\ndate: 2020-03-25 13:33:25\ncategories: \n- Git\n\ntags:\n---\n我每天使用 Git ，但是很多命令记不住。\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/git.png)\n\ngit 常用命令.png\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n\n>Workspace：工作区\n>Index / Stage：暂存区\n>Repository：仓库区（或本地仓库）\n>Remote：远程仓库\n# 新建代码库\n\n在当前目录新建一个Git代码库\n\n```plain\n$ git init\n```\n\n新建一个目录，将其初始化为Git代码库\n\n```plain\ngit init [project-name]\n```\n\n下载一个项目和它的整个代码历史\n\n```plain\n$ git clone [url]\n```\n\n下载一个代码，并指定分支\n\n```plain\n$ git clone -b [branchName] [url]\n```\n# 配置\n\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n显示当前的Git配置\n\n```plain\n$ git config --list\n```\n\n编辑Git配置文件\n\n```plain\n$ git config -e [--global]\n```\n\n设置提交代码时的用户信息\n\n```plain\n$ git config [--global] user.name \"[name]\"\n```\n$ git config [--global] user.email \"[email address]\"\n# 增加/删除文件\n\n添加指定文件到暂存区\n\n```plain\n$ git add [file1] [file2] ...\n```\n\n添加指定目录到暂存区，包括子目录\n\n```plain\n$ git add [dir]\n```\n\n添加当前目录的所有文件到暂存区\n\n```plain\n$ git add .\n```\n\n添加每个变化前，都会要求确认\n\n对于同一个文件的多处变化，可以实现分次提交\n\n```plain\n$ git add -p\n```\n\n删除工作区文件，并且将这次删除放入暂存区\n\n```plain\n$ git rm [file1] [file2] ...\n```\n\n停止追踪指定文件，但该文件会保留在工作区\n\n```plain\n$ git rm --cached [file]\n```\n\n改名文件，并且将这个改名放入暂存区\n\n```plain\n$ git mv [file-original] [file-renamed]\n```\n\n# 代码提交\n\n提交暂存区到仓库区\n\n```plain\n$ git commit -m [message]\n```\n\n提交暂存区的指定文件到仓库区\n\n```plain\n$ git commit [file1] [file2] ... -m [message]\n```\n\n提交工作区自上次commit之后的变化，直接到仓库区\n\n```plain\n$ git commit -a\n```\n\n提交时显示所有diff信息\n\n```plain\n$ git commit -v\n```\n\n使用一次新的commit，替代上一次提交\n\n如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\n```plain\n$ git commit --amend -m [message]\n```\n\n重做上一次commit，并包括指定文件的新变化\n\n```plain\n$ git commit --amend [file1] [file2] ...\n```\n\n# 分支\n\n列出所有本地分支\n\n```plain\n$ git branch\n```\n\n列出所有远程分支\n\n```plain\n$ git branch -r\n```\n\n列出所有本地分支和远程分支\n\n```plain\n$ git branch -a\n```\n\n新建一个分支，但依然停留在当前分支\n\n```plain\n$ git branch [branch-name]\n```\n\n新建一个分支，并切换到该分支\n\n```plain\n$ git checkout -b [branch]\n```\n\n新建一个分支，指向指定commit\n\n```plain\n$ git branch [branch] [commit]\n```\n\n新建一个分支，与指定的远程分支建立追踪关系\n\n```plain\n$ git branch --track [branch] [remote-branch]\n```\n\n切换到远程的一个分支 ,并映射到本地的一个分支\n\n```plain\ngit checkout -b master_network origin/master_network\n```\n\n把本地分支提交到远程\n\n```plain\n$ git push origin [branch]\n```\n\n切换到指定分支，并更新工作区\n\n```plain\n$ git checkout [branch-name]\n```\n\n切换到上一个分支\n\n```plain\n$ git checkout -\n```\n\n建立追踪关系，在现有分支与指定的远程分支之间\n\n```plain\n$ git branch --set-upstream [branch] [remote-branch]\n```\n\n合并指定分支到当前分支\n\n```plain\n$ git merge [branch]\n```\n\n选择一个commit，合并进当前分支\n\n```plain\n$ git cherry-pick [commit]\n```\n\n删除分支\n\n```plain\n$ git branch -d [branch-name]\n```\n\n删除远程分支\n\n```plain\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n更改本地和远程分支的名\n\n```plain\ngit branch -m old_branch new_branch Rename branch locally \ngit push origin :old_branch Delete the old branch \ngit push --set-upstream origin new_branch Push the new branch, set local branch to track the new remote\n```\n\n# 标签\n\n列出所有tag\n\n```plain\n$ git tag\n```\n\n新建一个tag在当前commit\n\n```plain\n$ git tag [tag]\n```\n\n新建一个tag在指定commit\n\n```plain\n$ git tag [tag] [commit]\n```\n\n删除本地tag\n\n```plain\n$ git tag -d [tag]\n```\n\n删除远程tag\n\n```plain\n$ git push origin --delete tag <tagname>\n```\n\n查看tag信息\n\n```plain\n$ git show [tag]\n```\n\n提交指定tag\n\n```plain\n$ git push [remote] [tag]\n```\n\n提交所有tag\n\n```plain\n$ git push [remote] --tags\n```\n\n新建一个分支，指向某个tag\n\n```plain\n$ git checkout -b [branch] [tag]\n```\n\n# 查看信息\n\n显示有变更的文件\n\n```plain\n$ git status\n```\n\n显示当前分支的版本历史\n\n```plain\n$ git log\n```\n\n显示commit历史，以及每次commit发生变更的文件\n\n```plain\n$ git log --stat\n```\n\n搜索提交历史，根据关键词\n\n```plain\n$ git log -S [keyword]\n```\n\n显示某个commit之后的所有变动，每个commit占据一行\n\n```plain\n$ git log [tag] HEAD --pretty=format:%s\n```\n\n显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\n```plain\n$ git log [tag] HEAD --grep feature\n```\n\n显示某个文件的版本历史，包括文件改名\n\n```plain\n$ git log --follow [file]\n$ git whatchanged [file]\n```\n\n显示指定文件相关的每一次diff\n\n```plain\n$ git log -p [file]\n```\n\n显示过去5次提交\n\n```plain\n$ git log -5 --pretty --oneline\n```\n\n显示所有提交过的用户，按提交次数排序\n\n```plain\n$ git shortlog -sn\n```\n\n显示指定文件是什么人在什么时间修改过\n\n```plain\n$ git blame [file]\n```\n\n显示暂存区和工作区的差异\n\n```plain\n$ git diff\n```\n\n显示暂存区和上一个commit的差异\n\n```plain\n$ git diff --cached [file]\n```\n\n显示工作区与当前分支最新commit之间的差异\n\n```plain\n$ git diff HEAD\n```\n\n显示两次提交之间的差异\n\n```plain\n$ git diff [first-branch]...[second-branch]\n```\n\n显示今天你写了多少行代码\n\n```plain\n$ git diff --shortstat \"@{0 day ago}\"\n```\n\n显示某次提交的元数据和内容变化\n\n```plain\n$ git show [commit]\n```\n\n显示某次提交发生变化的文件\n\n```plain\n$ git show --name-only [commit]\n```\n\n显示某次提交时，某个文件的内容\n\n```plain\n$ git show [commit]:[filename]\n```\n\n显示当前分支的最近几次提交\n\n```plain\n$ git reflog\n```\n\n# 远程同步\n\n下载远程仓库的所有变动\n\n```plain\n$ git fetch [remote]\n```\n\n显示所有远程仓库\n\n```plain\n$ git remote -v\n```\n\n显示某个远程仓库的信息\n\n```plain\n$ git remote show [remote]\n```\n\n增加一个新的远程仓库，并命名\n\n```plain\n$ git remote add [shortname] [url]\n```\n\n取回远程仓库的变化，并与本地分支合并\n\n```plain\n$ git pull [remote] [branch]\n```\n\n上传本地指定分支到远程仓库\n\n```plain\n$ git push [remote] [branch]\n```\n\n强行推送当前分支到远程仓库，即使有冲突\n\n```plain\n$ git push [remote] --force\n```\n\n推送所有分支到远程仓库\n\n```plain\n$ git push [remote] --all\n```\n\n# 撤销\n\n恢复暂存区的指定文件到工作区\n\n```plain\n$ git checkout [file]\n```\n\n恢复某个commit的指定文件到暂存区和工作区\n\n```plain\n$ git checkout [commit] [file]\n```\n\n恢复暂存区的所有文件到工作区\n\n```plain\n$ git checkout .\n```\n\n重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\n```plain\n$ git reset [file]\n```\n\n重置暂存区与工作区，与上一次commit保持一致\n\n```plain\n$ git reset --hard\n```\n\n重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\n```plain\n$ git reset [commit]\n```\n\n重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\n```plain\n$ git reset --hard [commit]\n```\n\n重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\n```plain\n$ git reset --keep [commit]\n```\n\n强推到远程\n\n```plain\n$ git push origin HEAD --force\n```\n\n新建一个commit，用来撤销指定commit\n\n后者的所有变化都将被前者抵消，并且应用到当前分支\n\n```plain\n$ git revert [commit]\n```\n\n暂时将未提交的变化移除，稍后再移入\n\n```plain\n$ git stash\n$ git stash pop\n```\n\n参考:[https://git-scm.com/book/zh/v2](https://git-scm.com/book/zh/v2)\n\n","slug":"Git常用命令","published":1,"updated":"2023-05-24T08:16:59.900Z","_id":"clgxae0ue0001ghzrar9ia699","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我每天使用 Git ，但是很多命令记不住。</p>\n<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/git.png\"></p>\n<p>git 常用命令.png</p>\n<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>\n<blockquote>\n<p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p>\n</blockquote>\n<h1 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h1><p>在当前目录新建一个Git代码库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n\n<p>新建一个目录，将其初始化为Git代码库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [project-name]</span><br></pre></td></tr></table></figure>\n\n<p>下载一个项目和它的整个代码历史</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone [url]</span><br></pre></td></tr></table></figure>\n\n<p>下载一个代码，并指定分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone -b [branchName] [url]</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<p>显示当前的Git配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n\n<p>编辑Git配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config -e [--global]</span><br></pre></td></tr></table></figure>\n\n<p>设置提交代码时的用户信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config [--global] user.name &quot;[name]&quot;</span><br></pre></td></tr></table></figure>\n<p>$ git config [–global] user.email “[email address]”</p>\n<h1 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h1><p>添加指定文件到暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>添加指定目录到暂存区，包括子目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [dir]</span><br></pre></td></tr></table></figure>\n\n<p>添加当前目录的所有文件到暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br></pre></td></tr></table></figure>\n\n<p>添加每个变化前，都会要求确认</p>\n<p>对于同一个文件的多处变化，可以实现分次提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -p</span><br></pre></td></tr></table></figure>\n\n<p>删除工作区文件，并且将这次删除放入暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>停止追踪指定文件，但该文件会保留在工作区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm --cached [file]</span><br></pre></td></tr></table></figure>\n\n<p>改名文件，并且将这个改名放入暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h1><p>提交暂存区到仓库区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m [message]</span><br></pre></td></tr></table></figure>\n\n<p>提交暂存区的指定文件到仓库区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br></pre></td></tr></table></figure>\n\n<p>提交工作区自上次commit之后的变化，直接到仓库区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -a</span><br></pre></td></tr></table></figure>\n\n<p>提交时显示所有diff信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -v</span><br></pre></td></tr></table></figure>\n\n<p>使用一次新的commit，替代上一次提交</p>\n<p>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit --amend -m [message]</span><br></pre></td></tr></table></figure>\n\n<p>重做上一次commit，并包括指定文件的新变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>列出所有本地分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br></pre></td></tr></table></figure>\n\n<p>列出所有远程分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -r</span><br></pre></td></tr></table></figure>\n\n<p>列出所有本地分支和远程分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br></pre></td></tr></table></figure>\n\n<p>新建一个分支，但依然停留在当前分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch [branch-name]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个分支，并切换到该分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b [branch]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个分支，指向指定commit</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch [branch] [commit]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个分支，与指定的远程分支建立追踪关系</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br></pre></td></tr></table></figure>\n\n<p>切换到远程的一个分支 ,并映射到本地的一个分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b master_network origin/master_network</span><br></pre></td></tr></table></figure>\n\n<p>把本地分支提交到远程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin [branch]</span><br></pre></td></tr></table></figure>\n\n<p>切换到指定分支，并更新工作区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout [branch-name]</span><br></pre></td></tr></table></figure>\n\n<p>切换到上一个分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -</span><br></pre></td></tr></table></figure>\n\n<p>建立追踪关系，在现有分支与指定的远程分支之间</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --set-upstream [branch] [remote-branch]</span><br></pre></td></tr></table></figure>\n\n<p>合并指定分支到当前分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge [branch]</span><br></pre></td></tr></table></figure>\n\n<p>选择一个commit，合并进当前分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick [commit]</span><br></pre></td></tr></table></figure>\n\n<p>删除分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d [branch-name]</span><br></pre></td></tr></table></figure>\n\n<p>删除远程分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n\n<p>更改本地和远程分支的名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m old_branch new_branch Rename branch locally </span><br><span class=\"line\">git push origin :old_branch Delete the old branch </span><br><span class=\"line\">git push --set-upstream origin new_branch Push the new branch, set local branch to track the new remote</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><p>列出所有tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag</span><br></pre></td></tr></table></figure>\n\n<p>新建一个tag在当前commit</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag [tag]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个tag在指定commit</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag [tag] [commit]</span><br></pre></td></tr></table></figure>\n\n<p>删除本地tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d [tag]</span><br></pre></td></tr></table></figure>\n\n<p>删除远程tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>\n\n<p>查看tag信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show [tag]</span><br></pre></td></tr></table></figure>\n\n<p>提交指定tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote] [tag]</span><br></pre></td></tr></table></figure>\n\n<p>提交所有tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote] --tags</span><br></pre></td></tr></table></figure>\n\n<p>新建一个分支，指向某个tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h1><p>显示有变更的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n\n<p>显示当前分支的版本历史</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br></pre></td></tr></table></figure>\n\n<p>显示commit历史，以及每次commit发生变更的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --stat</span><br></pre></td></tr></table></figure>\n\n<p>搜索提交历史，根据关键词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log -S [keyword]</span><br></pre></td></tr></table></figure>\n\n<p>显示某个commit之后的所有变动，每个commit占据一行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log [tag] HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure>\n\n<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log [tag] HEAD --grep feature</span><br></pre></td></tr></table></figure>\n\n<p>显示某个文件的版本历史，包括文件改名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br></pre></td></tr></table></figure>\n\n<p>显示指定文件相关的每一次diff</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log -p [file]</span><br></pre></td></tr></table></figure>\n\n<p>显示过去5次提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log -5 --pretty --oneline</span><br></pre></td></tr></table></figure>\n\n<p>显示所有提交过的用户，按提交次数排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git shortlog -sn</span><br></pre></td></tr></table></figure>\n\n<p>显示指定文件是什么人在什么时间修改过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git blame [file]</span><br></pre></td></tr></table></figure>\n\n<p>显示暂存区和工作区的差异</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff</span><br></pre></td></tr></table></figure>\n\n<p>显示暂存区和上一个commit的差异</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff --cached [file]</span><br></pre></td></tr></table></figure>\n\n<p>显示工作区与当前分支最新commit之间的差异</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff HEAD</span><br></pre></td></tr></table></figure>\n\n<p>显示两次提交之间的差异</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>\n\n<p>显示今天你写了多少行代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>显示某次提交的元数据和内容变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show [commit]</span><br></pre></td></tr></table></figure>\n\n<p>显示某次提交发生变化的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show --name-only [commit]</span><br></pre></td></tr></table></figure>\n\n<p>显示某次提交时，某个文件的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show [commit]:[filename]</span><br></pre></td></tr></table></figure>\n\n<p>显示当前分支的最近几次提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h1><p>下载远程仓库的所有变动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch [remote]</span><br></pre></td></tr></table></figure>\n\n<p>显示所有远程仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br></pre></td></tr></table></figure>\n\n<p>显示某个远程仓库的信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote show [remote]</span><br></pre></td></tr></table></figure>\n\n<p>增加一个新的远程仓库，并命名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>\n\n<p>取回远程仓库的变化，并与本地分支合并</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull [remote] [branch]</span><br></pre></td></tr></table></figure>\n\n<p>上传本地指定分支到远程仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote] [branch]</span><br></pre></td></tr></table></figure>\n\n<p>强行推送当前分支到远程仓库，即使有冲突</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote] --force</span><br></pre></td></tr></table></figure>\n\n<p>推送所有分支到远程仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><p>恢复暂存区的指定文件到工作区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout [file]</span><br></pre></td></tr></table></figure>\n\n<p>恢复某个commit的指定文件到暂存区和工作区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout [commit] [file]</span><br></pre></td></tr></table></figure>\n\n<p>恢复暂存区的所有文件到工作区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout .</span><br></pre></td></tr></table></figure>\n\n<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [file]</span><br></pre></td></tr></table></figure>\n\n<p>重置暂存区与工作区，与上一次commit保持一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard</span><br></pre></td></tr></table></figure>\n\n<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [commit]</span><br></pre></td></tr></table></figure>\n\n<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard [commit]</span><br></pre></td></tr></table></figure>\n\n<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --keep [commit]</span><br></pre></td></tr></table></figure>\n\n<p>强推到远程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n\n<p>新建一个commit，用来撤销指定commit</p>\n<p>后者的所有变化都将被前者抵消，并且应用到当前分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git revert [commit]</span><br></pre></td></tr></table></figure>\n\n<p>暂时将未提交的变化移除，稍后再移入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n\n<p>参考:<a href=\"https://git-scm.com/book/zh/v2\">https://git-scm.com/book/zh/v2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我每天使用 Git ，但是很多命令记不住。</p>\n<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/git.png\"></p>\n<p>git 常用命令.png</p>\n<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>\n<blockquote>\n<p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p>\n</blockquote>\n<h1 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h1><p>在当前目录新建一个Git代码库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n\n<p>新建一个目录，将其初始化为Git代码库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [project-name]</span><br></pre></td></tr></table></figure>\n\n<p>下载一个项目和它的整个代码历史</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone [url]</span><br></pre></td></tr></table></figure>\n\n<p>下载一个代码，并指定分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone -b [branchName] [url]</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<p>显示当前的Git配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n\n<p>编辑Git配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config -e [--global]</span><br></pre></td></tr></table></figure>\n\n<p>设置提交代码时的用户信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config [--global] user.name &quot;[name]&quot;</span><br></pre></td></tr></table></figure>\n<p>$ git config [–global] user.email “[email address]”</p>\n<h1 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h1><p>添加指定文件到暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>添加指定目录到暂存区，包括子目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [dir]</span><br></pre></td></tr></table></figure>\n\n<p>添加当前目录的所有文件到暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br></pre></td></tr></table></figure>\n\n<p>添加每个变化前，都会要求确认</p>\n<p>对于同一个文件的多处变化，可以实现分次提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -p</span><br></pre></td></tr></table></figure>\n\n<p>删除工作区文件，并且将这次删除放入暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>停止追踪指定文件，但该文件会保留在工作区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm --cached [file]</span><br></pre></td></tr></table></figure>\n\n<p>改名文件，并且将这个改名放入暂存区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h1><p>提交暂存区到仓库区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m [message]</span><br></pre></td></tr></table></figure>\n\n<p>提交暂存区的指定文件到仓库区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br></pre></td></tr></table></figure>\n\n<p>提交工作区自上次commit之后的变化，直接到仓库区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -a</span><br></pre></td></tr></table></figure>\n\n<p>提交时显示所有diff信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -v</span><br></pre></td></tr></table></figure>\n\n<p>使用一次新的commit，替代上一次提交</p>\n<p>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit --amend -m [message]</span><br></pre></td></tr></table></figure>\n\n<p>重做上一次commit，并包括指定文件的新变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>列出所有本地分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br></pre></td></tr></table></figure>\n\n<p>列出所有远程分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -r</span><br></pre></td></tr></table></figure>\n\n<p>列出所有本地分支和远程分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br></pre></td></tr></table></figure>\n\n<p>新建一个分支，但依然停留在当前分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch [branch-name]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个分支，并切换到该分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b [branch]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个分支，指向指定commit</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch [branch] [commit]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个分支，与指定的远程分支建立追踪关系</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br></pre></td></tr></table></figure>\n\n<p>切换到远程的一个分支 ,并映射到本地的一个分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b master_network origin/master_network</span><br></pre></td></tr></table></figure>\n\n<p>把本地分支提交到远程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin [branch]</span><br></pre></td></tr></table></figure>\n\n<p>切换到指定分支，并更新工作区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout [branch-name]</span><br></pre></td></tr></table></figure>\n\n<p>切换到上一个分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -</span><br></pre></td></tr></table></figure>\n\n<p>建立追踪关系，在现有分支与指定的远程分支之间</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --set-upstream [branch] [remote-branch]</span><br></pre></td></tr></table></figure>\n\n<p>合并指定分支到当前分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge [branch]</span><br></pre></td></tr></table></figure>\n\n<p>选择一个commit，合并进当前分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick [commit]</span><br></pre></td></tr></table></figure>\n\n<p>删除分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d [branch-name]</span><br></pre></td></tr></table></figure>\n\n<p>删除远程分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n\n<p>更改本地和远程分支的名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m old_branch new_branch Rename branch locally </span><br><span class=\"line\">git push origin :old_branch Delete the old branch </span><br><span class=\"line\">git push --set-upstream origin new_branch Push the new branch, set local branch to track the new remote</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><p>列出所有tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag</span><br></pre></td></tr></table></figure>\n\n<p>新建一个tag在当前commit</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag [tag]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个tag在指定commit</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag [tag] [commit]</span><br></pre></td></tr></table></figure>\n\n<p>删除本地tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d [tag]</span><br></pre></td></tr></table></figure>\n\n<p>删除远程tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>\n\n<p>查看tag信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show [tag]</span><br></pre></td></tr></table></figure>\n\n<p>提交指定tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote] [tag]</span><br></pre></td></tr></table></figure>\n\n<p>提交所有tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote] --tags</span><br></pre></td></tr></table></figure>\n\n<p>新建一个分支，指向某个tag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h1><p>显示有变更的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n\n<p>显示当前分支的版本历史</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br></pre></td></tr></table></figure>\n\n<p>显示commit历史，以及每次commit发生变更的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --stat</span><br></pre></td></tr></table></figure>\n\n<p>搜索提交历史，根据关键词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log -S [keyword]</span><br></pre></td></tr></table></figure>\n\n<p>显示某个commit之后的所有变动，每个commit占据一行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log [tag] HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure>\n\n<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log [tag] HEAD --grep feature</span><br></pre></td></tr></table></figure>\n\n<p>显示某个文件的版本历史，包括文件改名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br></pre></td></tr></table></figure>\n\n<p>显示指定文件相关的每一次diff</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log -p [file]</span><br></pre></td></tr></table></figure>\n\n<p>显示过去5次提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log -5 --pretty --oneline</span><br></pre></td></tr></table></figure>\n\n<p>显示所有提交过的用户，按提交次数排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git shortlog -sn</span><br></pre></td></tr></table></figure>\n\n<p>显示指定文件是什么人在什么时间修改过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git blame [file]</span><br></pre></td></tr></table></figure>\n\n<p>显示暂存区和工作区的差异</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff</span><br></pre></td></tr></table></figure>\n\n<p>显示暂存区和上一个commit的差异</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff --cached [file]</span><br></pre></td></tr></table></figure>\n\n<p>显示工作区与当前分支最新commit之间的差异</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff HEAD</span><br></pre></td></tr></table></figure>\n\n<p>显示两次提交之间的差异</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>\n\n<p>显示今天你写了多少行代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>显示某次提交的元数据和内容变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show [commit]</span><br></pre></td></tr></table></figure>\n\n<p>显示某次提交发生变化的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show --name-only [commit]</span><br></pre></td></tr></table></figure>\n\n<p>显示某次提交时，某个文件的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show [commit]:[filename]</span><br></pre></td></tr></table></figure>\n\n<p>显示当前分支的最近几次提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h1><p>下载远程仓库的所有变动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch [remote]</span><br></pre></td></tr></table></figure>\n\n<p>显示所有远程仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br></pre></td></tr></table></figure>\n\n<p>显示某个远程仓库的信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote show [remote]</span><br></pre></td></tr></table></figure>\n\n<p>增加一个新的远程仓库，并命名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>\n\n<p>取回远程仓库的变化，并与本地分支合并</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull [remote] [branch]</span><br></pre></td></tr></table></figure>\n\n<p>上传本地指定分支到远程仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote] [branch]</span><br></pre></td></tr></table></figure>\n\n<p>强行推送当前分支到远程仓库，即使有冲突</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote] --force</span><br></pre></td></tr></table></figure>\n\n<p>推送所有分支到远程仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><p>恢复暂存区的指定文件到工作区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout [file]</span><br></pre></td></tr></table></figure>\n\n<p>恢复某个commit的指定文件到暂存区和工作区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout [commit] [file]</span><br></pre></td></tr></table></figure>\n\n<p>恢复暂存区的所有文件到工作区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout .</span><br></pre></td></tr></table></figure>\n\n<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [file]</span><br></pre></td></tr></table></figure>\n\n<p>重置暂存区与工作区，与上一次commit保持一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard</span><br></pre></td></tr></table></figure>\n\n<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [commit]</span><br></pre></td></tr></table></figure>\n\n<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard [commit]</span><br></pre></td></tr></table></figure>\n\n<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --keep [commit]</span><br></pre></td></tr></table></figure>\n\n<p>强推到远程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n\n<p>新建一个commit，用来撤销指定commit</p>\n<p>后者的所有变化都将被前者抵消，并且应用到当前分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git revert [commit]</span><br></pre></td></tr></table></figure>\n\n<p>暂时将未提交的变化移除，稍后再移入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n\n<p>参考:<a href=\"https://git-scm.com/book/zh/v2\">https://git-scm.com/book/zh/v2</a></p>\n"},{"title":"热修复设计","date":"2023-05-06T11:04:10.000Z","_content":"\n# 为什么要搭建热修复平台\n\n随着公司的快速发展，需求的快速增加，App迭代也越来越频繁，如果移动应用出现问题，不仅仅影响用户体验，还会影响公司口碑，甚至可能造成资损。需要快速修复线上问题，对比常规的开发流程而言，热修复更加灵活方便，优势很多：\n\n● 无需重新发版，实时高效修复bug；\n● 用户无感知修复，无需下载新的版本，代价小；\n● 修复成功率高，能把损失降到最低；\n● 因此热修平台愈加重要，需要搭建一个高效，好用且安全的热修复平台。\n\n# 具体设计：\n\n## 流程图：\n\n链路流程图:\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E9%93%BE%E8%B7%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png)\n\n## 时序图：\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E6%8B%89%E5%8C%85%E6%97%B6%E5%BA%8F%E5%9B%BE.png)\n \n## 各平台要做的事情\n\n### 热修复管理平台：\n\n热修复管理系统分前后端，主要支持补丁的上传、发布、停止，用户角色的创建及管理，以及供客户端调的接口：获取热修复包、是否存在最新修复包两个接口\n\n#### 上传补丁：\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E4%BF%AE%E5%A4%8D%E5%8C%85%E6%B7%BB%E5%8A%A0.png)\n\n上传补丁到服务端和app包的某一个版本号一一对应\n\n#### 管理补丁：\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E4%BF%AE%E5%A4%8D%E5%8C%85%E7%AE%A1%E7%90%86.png)\n\n补丁状态说明：\n\n|状态|说明|\n|:----|:----|\n|已就绪|补丁上传成功，等待操作。|\n|灰度中|补丁正在进行部分设备灰度发布中。|\n|已发布|补丁已全量发布至所有设备。|\n|已停止|补丁发布行为已暂停，服务端停止下发补丁，客户端已经下载的补丁继续生效。|\n\n#### 发布补丁：\n\n发布之后，app端即可拉去到有效的补丁\n\n#### 停止发布：\n\n在补丁列表的操作里点终止操作，不在下发到客户端\n\n#### 数据相关：\n\n|参数|说明|\n|:----|:----|\n|通知设备|本次补丁下发包含的所有设备数。|\n|下载成功设备|补丁已下载成功的所有设备数。|\n|加载成功设备|补丁已加载成功的所有设备数。|\n|主动清除成功数|客户端调用清除补丁接口或者控制台操作全部回滚后补丁清除成功的设备数。|\n\n\n### 客户端库：\n\n基于 MangoFix 封装, 实现了拉修复包，缓存，修复等功能。\n\n设计流程图:\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%B6%E5%BA%8F%E5%9B%BE.png)\n\n基于补丁是从服务端拉取的,有一定的延时,为了不影响启动时间及代码修复,同时也为了减少每次冷启重复的请求，故加入缓存机制。\n\n### 辅助工具\n\n在修复完线上问题后需要制作补丁包上传到服务端，该工具为此提供了便利\n\n* 补丁脚本生成功能：\n补丁脚本是类oc语法，与OC语法还是有些差异，通过该工具生成补丁脚本，可节约时间，减少错误\n\n* 补丁包生成功能：\n最终上传到服务器的补丁包是基于补丁脚本通过AES加密生成一个二进制文件流，通过导出包功能最终生成上传到服务端的补丁包\n\n## 发布策略：\n\n全量发布：\n\n    全量发布，不用解释，补丁对应版本App所有用户都可拉取补丁\n\n灰度发布：\n\n    灰度下发支持按人数灰度 与 按比例灰度，按照人数灰度相对简单，因此这里只说下按比例灰度，灰度如果按照总人数的百分比进行下发，有可能会下发到不活跃用户的设备上，让百分比下发失去意义。目前一个简单的方式是实现哈希碰撞算法，概率可调，当App端请求补丁时，根据设备的唯一标识进行碰撞，落到概率区间内则下发补丁。\n\n条件发布：\n\n    需要在小范围内进行验证，比如特定某个系统版本或者特定某个用户；在验证通过后再进行全网用户的下发，这中场景下可以使用条件下发。\n\n## 传输安全：\n\n对补丁进行AES加密，生成二进制文件\n\n## 监控：\n\n    修复情况（crash监控等）\n    拉取补丁设备数\n\n# 完成度：\n\n- [x] [热修复管理系统具前端](https://github.com/shijianmei/hotfixMS) \n- [x] [热修复管理系统具前端后端](https://git@github.com:shijianmei/hotfixServer.git)\n- [x] [热修复脚本生成工具](https://git@github.com:shijianmei/PatchGenerater.git)\n- [x] [iOS端热修复库封装](https://github.com/shijianmei/ProblemTerminator)\n- [ ] 条件发布、灰度发布\n- [ ] 数据指标统计（补丁读取耗时、补丁读取成功设备数）\n\n\n\n\n\n\n","source":"_posts/热修复设计.md","raw":"---\ntitle: 热修复设计\ndate: 2023-05-06 19:04:10\ncategories: \n- 系统设计\ntags:\n---\n\n# 为什么要搭建热修复平台\n\n随着公司的快速发展，需求的快速增加，App迭代也越来越频繁，如果移动应用出现问题，不仅仅影响用户体验，还会影响公司口碑，甚至可能造成资损。需要快速修复线上问题，对比常规的开发流程而言，热修复更加灵活方便，优势很多：\n\n● 无需重新发版，实时高效修复bug；\n● 用户无感知修复，无需下载新的版本，代价小；\n● 修复成功率高，能把损失降到最低；\n● 因此热修平台愈加重要，需要搭建一个高效，好用且安全的热修复平台。\n\n# 具体设计：\n\n## 流程图：\n\n链路流程图:\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E9%93%BE%E8%B7%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png)\n\n## 时序图：\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E6%8B%89%E5%8C%85%E6%97%B6%E5%BA%8F%E5%9B%BE.png)\n \n## 各平台要做的事情\n\n### 热修复管理平台：\n\n热修复管理系统分前后端，主要支持补丁的上传、发布、停止，用户角色的创建及管理，以及供客户端调的接口：获取热修复包、是否存在最新修复包两个接口\n\n#### 上传补丁：\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E4%BF%AE%E5%A4%8D%E5%8C%85%E6%B7%BB%E5%8A%A0.png)\n\n上传补丁到服务端和app包的某一个版本号一一对应\n\n#### 管理补丁：\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E4%BF%AE%E5%A4%8D%E5%8C%85%E7%AE%A1%E7%90%86.png)\n\n补丁状态说明：\n\n|状态|说明|\n|:----|:----|\n|已就绪|补丁上传成功，等待操作。|\n|灰度中|补丁正在进行部分设备灰度发布中。|\n|已发布|补丁已全量发布至所有设备。|\n|已停止|补丁发布行为已暂停，服务端停止下发补丁，客户端已经下载的补丁继续生效。|\n\n#### 发布补丁：\n\n发布之后，app端即可拉去到有效的补丁\n\n#### 停止发布：\n\n在补丁列表的操作里点终止操作，不在下发到客户端\n\n#### 数据相关：\n\n|参数|说明|\n|:----|:----|\n|通知设备|本次补丁下发包含的所有设备数。|\n|下载成功设备|补丁已下载成功的所有设备数。|\n|加载成功设备|补丁已加载成功的所有设备数。|\n|主动清除成功数|客户端调用清除补丁接口或者控制台操作全部回滚后补丁清除成功的设备数。|\n\n\n### 客户端库：\n\n基于 MangoFix 封装, 实现了拉修复包，缓存，修复等功能。\n\n设计流程图:\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%B6%E5%BA%8F%E5%9B%BE.png)\n\n基于补丁是从服务端拉取的,有一定的延时,为了不影响启动时间及代码修复,同时也为了减少每次冷启重复的请求，故加入缓存机制。\n\n### 辅助工具\n\n在修复完线上问题后需要制作补丁包上传到服务端，该工具为此提供了便利\n\n* 补丁脚本生成功能：\n补丁脚本是类oc语法，与OC语法还是有些差异，通过该工具生成补丁脚本，可节约时间，减少错误\n\n* 补丁包生成功能：\n最终上传到服务器的补丁包是基于补丁脚本通过AES加密生成一个二进制文件流，通过导出包功能最终生成上传到服务端的补丁包\n\n## 发布策略：\n\n全量发布：\n\n    全量发布，不用解释，补丁对应版本App所有用户都可拉取补丁\n\n灰度发布：\n\n    灰度下发支持按人数灰度 与 按比例灰度，按照人数灰度相对简单，因此这里只说下按比例灰度，灰度如果按照总人数的百分比进行下发，有可能会下发到不活跃用户的设备上，让百分比下发失去意义。目前一个简单的方式是实现哈希碰撞算法，概率可调，当App端请求补丁时，根据设备的唯一标识进行碰撞，落到概率区间内则下发补丁。\n\n条件发布：\n\n    需要在小范围内进行验证，比如特定某个系统版本或者特定某个用户；在验证通过后再进行全网用户的下发，这中场景下可以使用条件下发。\n\n## 传输安全：\n\n对补丁进行AES加密，生成二进制文件\n\n## 监控：\n\n    修复情况（crash监控等）\n    拉取补丁设备数\n\n# 完成度：\n\n- [x] [热修复管理系统具前端](https://github.com/shijianmei/hotfixMS) \n- [x] [热修复管理系统具前端后端](https://git@github.com:shijianmei/hotfixServer.git)\n- [x] [热修复脚本生成工具](https://git@github.com:shijianmei/PatchGenerater.git)\n- [x] [iOS端热修复库封装](https://github.com/shijianmei/ProblemTerminator)\n- [ ] 条件发布、灰度发布\n- [ ] 数据指标统计（补丁读取耗时、补丁读取成功设备数）\n\n\n\n\n\n\n","slug":"热修复设计","published":1,"updated":"2023-05-18T04:25:29.544Z","_id":"clhbvo7xc00009lzrhkymdb99","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"为什么要搭建热修复平台\"><a href=\"#为什么要搭建热修复平台\" class=\"headerlink\" title=\"为什么要搭建热修复平台\"></a>为什么要搭建热修复平台</h1><p>随着公司的快速发展，需求的快速增加，App迭代也越来越频繁，如果移动应用出现问题，不仅仅影响用户体验，还会影响公司口碑，甚至可能造成资损。需要快速修复线上问题，对比常规的开发流程而言，热修复更加灵活方便，优势很多：</p>\n<p>● 无需重新发版，实时高效修复bug；<br>● 用户无感知修复，无需下载新的版本，代价小；<br>● 修复成功率高，能把损失降到最低；<br>● 因此热修平台愈加重要，需要搭建一个高效，好用且安全的热修复平台。</p>\n<h1 id=\"具体设计：\"><a href=\"#具体设计：\" class=\"headerlink\" title=\"具体设计：\"></a>具体设计：</h1><h2 id=\"流程图：\"><a href=\"#流程图：\" class=\"headerlink\" title=\"流程图：\"></a>流程图：</h2><p>链路流程图:</p>\n<p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E9%93%BE%E8%B7%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png\"></p>\n<h2 id=\"时序图：\"><a href=\"#时序图：\" class=\"headerlink\" title=\"时序图：\"></a>时序图：</h2><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E6%8B%89%E5%8C%85%E6%97%B6%E5%BA%8F%E5%9B%BE.png\"></p>\n<h2 id=\"各平台要做的事情\"><a href=\"#各平台要做的事情\" class=\"headerlink\" title=\"各平台要做的事情\"></a>各平台要做的事情</h2><h3 id=\"热修复管理平台：\"><a href=\"#热修复管理平台：\" class=\"headerlink\" title=\"热修复管理平台：\"></a>热修复管理平台：</h3><p>热修复管理系统分前后端，主要支持补丁的上传、发布、停止，用户角色的创建及管理，以及供客户端调的接口：获取热修复包、是否存在最新修复包两个接口</p>\n<h4 id=\"上传补丁：\"><a href=\"#上传补丁：\" class=\"headerlink\" title=\"上传补丁：\"></a>上传补丁：</h4><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E4%BF%AE%E5%A4%8D%E5%8C%85%E6%B7%BB%E5%8A%A0.png\"></p>\n<p>上传补丁到服务端和app包的某一个版本号一一对应</p>\n<h4 id=\"管理补丁：\"><a href=\"#管理补丁：\" class=\"headerlink\" title=\"管理补丁：\"></a>管理补丁：</h4><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E4%BF%AE%E5%A4%8D%E5%8C%85%E7%AE%A1%E7%90%86.png\"></p>\n<p>补丁状态说明：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">状态</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">已就绪</td>\n<td align=\"left\">补丁上传成功，等待操作。</td>\n</tr>\n<tr>\n<td align=\"left\">灰度中</td>\n<td align=\"left\">补丁正在进行部分设备灰度发布中。</td>\n</tr>\n<tr>\n<td align=\"left\">已发布</td>\n<td align=\"left\">补丁已全量发布至所有设备。</td>\n</tr>\n<tr>\n<td align=\"left\">已停止</td>\n<td align=\"left\">补丁发布行为已暂停，服务端停止下发补丁，客户端已经下载的补丁继续生效。</td>\n</tr>\n</tbody></table>\n<h4 id=\"发布补丁：\"><a href=\"#发布补丁：\" class=\"headerlink\" title=\"发布补丁：\"></a>发布补丁：</h4><p>发布之后，app端即可拉去到有效的补丁</p>\n<h4 id=\"停止发布：\"><a href=\"#停止发布：\" class=\"headerlink\" title=\"停止发布：\"></a>停止发布：</h4><p>在补丁列表的操作里点终止操作，不在下发到客户端</p>\n<h4 id=\"数据相关：\"><a href=\"#数据相关：\" class=\"headerlink\" title=\"数据相关：\"></a>数据相关：</h4><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">通知设备</td>\n<td align=\"left\">本次补丁下发包含的所有设备数。</td>\n</tr>\n<tr>\n<td align=\"left\">下载成功设备</td>\n<td align=\"left\">补丁已下载成功的所有设备数。</td>\n</tr>\n<tr>\n<td align=\"left\">加载成功设备</td>\n<td align=\"left\">补丁已加载成功的所有设备数。</td>\n</tr>\n<tr>\n<td align=\"left\">主动清除成功数</td>\n<td align=\"left\">客户端调用清除补丁接口或者控制台操作全部回滚后补丁清除成功的设备数。</td>\n</tr>\n</tbody></table>\n<h3 id=\"客户端库：\"><a href=\"#客户端库：\" class=\"headerlink\" title=\"客户端库：\"></a>客户端库：</h3><p>基于 MangoFix 封装, 实现了拉修复包，缓存，修复等功能。</p>\n<p>设计流程图:</p>\n<p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%B6%E5%BA%8F%E5%9B%BE.png\"></p>\n<p>基于补丁是从服务端拉取的,有一定的延时,为了不影响启动时间及代码修复,同时也为了减少每次冷启重复的请求，故加入缓存机制。</p>\n<h3 id=\"辅助工具\"><a href=\"#辅助工具\" class=\"headerlink\" title=\"辅助工具\"></a>辅助工具</h3><p>在修复完线上问题后需要制作补丁包上传到服务端，该工具为此提供了便利</p>\n<ul>\n<li><p>补丁脚本生成功能：<br>补丁脚本是类oc语法，与OC语法还是有些差异，通过该工具生成补丁脚本，可节约时间，减少错误</p>\n</li>\n<li><p>补丁包生成功能：<br>最终上传到服务器的补丁包是基于补丁脚本通过AES加密生成一个二进制文件流，通过导出包功能最终生成上传到服务端的补丁包</p>\n</li>\n</ul>\n<h2 id=\"发布策略：\"><a href=\"#发布策略：\" class=\"headerlink\" title=\"发布策略：\"></a>发布策略：</h2><p>全量发布：</p>\n<pre><code>全量发布，不用解释，补丁对应版本App所有用户都可拉取补丁\n</code></pre>\n<p>灰度发布：</p>\n<pre><code>灰度下发支持按人数灰度 与 按比例灰度，按照人数灰度相对简单，因此这里只说下按比例灰度，灰度如果按照总人数的百分比进行下发，有可能会下发到不活跃用户的设备上，让百分比下发失去意义。目前一个简单的方式是实现哈希碰撞算法，概率可调，当App端请求补丁时，根据设备的唯一标识进行碰撞，落到概率区间内则下发补丁。\n</code></pre>\n<p>条件发布：</p>\n<pre><code>需要在小范围内进行验证，比如特定某个系统版本或者特定某个用户；在验证通过后再进行全网用户的下发，这中场景下可以使用条件下发。\n</code></pre>\n<h2 id=\"传输安全：\"><a href=\"#传输安全：\" class=\"headerlink\" title=\"传输安全：\"></a>传输安全：</h2><p>对补丁进行AES加密，生成二进制文件</p>\n<h2 id=\"监控：\"><a href=\"#监控：\" class=\"headerlink\" title=\"监控：\"></a>监控：</h2><pre><code>修复情况（crash监控等）\n拉取补丁设备数\n</code></pre>\n<h1 id=\"完成度：\"><a href=\"#完成度：\" class=\"headerlink\" title=\"完成度：\"></a>完成度：</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/shijianmei/hotfixMS\">热修复管理系统具前端</a> </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://git@github.com:shijianmei/hotfixServer.git\">热修复管理系统具前端后端</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://git@github.com:shijianmei/PatchGenerater.git\">热修复脚本生成工具</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/shijianmei/ProblemTerminator\">iOS端热修复库封装</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> 条件发布、灰度发布</li>\n<li><input disabled=\"\" type=\"checkbox\"> 数据指标统计（补丁读取耗时、补丁读取成功设备数）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么要搭建热修复平台\"><a href=\"#为什么要搭建热修复平台\" class=\"headerlink\" title=\"为什么要搭建热修复平台\"></a>为什么要搭建热修复平台</h1><p>随着公司的快速发展，需求的快速增加，App迭代也越来越频繁，如果移动应用出现问题，不仅仅影响用户体验，还会影响公司口碑，甚至可能造成资损。需要快速修复线上问题，对比常规的开发流程而言，热修复更加灵活方便，优势很多：</p>\n<p>● 无需重新发版，实时高效修复bug；<br>● 用户无感知修复，无需下载新的版本，代价小；<br>● 修复成功率高，能把损失降到最低；<br>● 因此热修平台愈加重要，需要搭建一个高效，好用且安全的热修复平台。</p>\n<h1 id=\"具体设计：\"><a href=\"#具体设计：\" class=\"headerlink\" title=\"具体设计：\"></a>具体设计：</h1><h2 id=\"流程图：\"><a href=\"#流程图：\" class=\"headerlink\" title=\"流程图：\"></a>流程图：</h2><p>链路流程图:</p>\n<p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E9%93%BE%E8%B7%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png\"></p>\n<h2 id=\"时序图：\"><a href=\"#时序图：\" class=\"headerlink\" title=\"时序图：\"></a>时序图：</h2><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E6%8B%89%E5%8C%85%E6%97%B6%E5%BA%8F%E5%9B%BE.png\"></p>\n<h2 id=\"各平台要做的事情\"><a href=\"#各平台要做的事情\" class=\"headerlink\" title=\"各平台要做的事情\"></a>各平台要做的事情</h2><h3 id=\"热修复管理平台：\"><a href=\"#热修复管理平台：\" class=\"headerlink\" title=\"热修复管理平台：\"></a>热修复管理平台：</h3><p>热修复管理系统分前后端，主要支持补丁的上传、发布、停止，用户角色的创建及管理，以及供客户端调的接口：获取热修复包、是否存在最新修复包两个接口</p>\n<h4 id=\"上传补丁：\"><a href=\"#上传补丁：\" class=\"headerlink\" title=\"上传补丁：\"></a>上传补丁：</h4><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E4%BF%AE%E5%A4%8D%E5%8C%85%E6%B7%BB%E5%8A%A0.png\"></p>\n<p>上传补丁到服务端和app包的某一个版本号一一对应</p>\n<h4 id=\"管理补丁：\"><a href=\"#管理补丁：\" class=\"headerlink\" title=\"管理补丁：\"></a>管理补丁：</h4><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E4%BF%AE%E5%A4%8D%E5%8C%85%E7%AE%A1%E7%90%86.png\"></p>\n<p>补丁状态说明：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">状态</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">已就绪</td>\n<td align=\"left\">补丁上传成功，等待操作。</td>\n</tr>\n<tr>\n<td align=\"left\">灰度中</td>\n<td align=\"left\">补丁正在进行部分设备灰度发布中。</td>\n</tr>\n<tr>\n<td align=\"left\">已发布</td>\n<td align=\"left\">补丁已全量发布至所有设备。</td>\n</tr>\n<tr>\n<td align=\"left\">已停止</td>\n<td align=\"left\">补丁发布行为已暂停，服务端停止下发补丁，客户端已经下载的补丁继续生效。</td>\n</tr>\n</tbody></table>\n<h4 id=\"发布补丁：\"><a href=\"#发布补丁：\" class=\"headerlink\" title=\"发布补丁：\"></a>发布补丁：</h4><p>发布之后，app端即可拉去到有效的补丁</p>\n<h4 id=\"停止发布：\"><a href=\"#停止发布：\" class=\"headerlink\" title=\"停止发布：\"></a>停止发布：</h4><p>在补丁列表的操作里点终止操作，不在下发到客户端</p>\n<h4 id=\"数据相关：\"><a href=\"#数据相关：\" class=\"headerlink\" title=\"数据相关：\"></a>数据相关：</h4><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">通知设备</td>\n<td align=\"left\">本次补丁下发包含的所有设备数。</td>\n</tr>\n<tr>\n<td align=\"left\">下载成功设备</td>\n<td align=\"left\">补丁已下载成功的所有设备数。</td>\n</tr>\n<tr>\n<td align=\"left\">加载成功设备</td>\n<td align=\"left\">补丁已加载成功的所有设备数。</td>\n</tr>\n<tr>\n<td align=\"left\">主动清除成功数</td>\n<td align=\"left\">客户端调用清除补丁接口或者控制台操作全部回滚后补丁清除成功的设备数。</td>\n</tr>\n</tbody></table>\n<h3 id=\"客户端库：\"><a href=\"#客户端库：\" class=\"headerlink\" title=\"客户端库：\"></a>客户端库：</h3><p>基于 MangoFix 封装, 实现了拉修复包，缓存，修复等功能。</p>\n<p>设计流程图:</p>\n<p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%AE%BE%E8%AE%A1/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%B6%E5%BA%8F%E5%9B%BE.png\"></p>\n<p>基于补丁是从服务端拉取的,有一定的延时,为了不影响启动时间及代码修复,同时也为了减少每次冷启重复的请求，故加入缓存机制。</p>\n<h3 id=\"辅助工具\"><a href=\"#辅助工具\" class=\"headerlink\" title=\"辅助工具\"></a>辅助工具</h3><p>在修复完线上问题后需要制作补丁包上传到服务端，该工具为此提供了便利</p>\n<ul>\n<li><p>补丁脚本生成功能：<br>补丁脚本是类oc语法，与OC语法还是有些差异，通过该工具生成补丁脚本，可节约时间，减少错误</p>\n</li>\n<li><p>补丁包生成功能：<br>最终上传到服务器的补丁包是基于补丁脚本通过AES加密生成一个二进制文件流，通过导出包功能最终生成上传到服务端的补丁包</p>\n</li>\n</ul>\n<h2 id=\"发布策略：\"><a href=\"#发布策略：\" class=\"headerlink\" title=\"发布策略：\"></a>发布策略：</h2><p>全量发布：</p>\n<pre><code>全量发布，不用解释，补丁对应版本App所有用户都可拉取补丁\n</code></pre>\n<p>灰度发布：</p>\n<pre><code>灰度下发支持按人数灰度 与 按比例灰度，按照人数灰度相对简单，因此这里只说下按比例灰度，灰度如果按照总人数的百分比进行下发，有可能会下发到不活跃用户的设备上，让百分比下发失去意义。目前一个简单的方式是实现哈希碰撞算法，概率可调，当App端请求补丁时，根据设备的唯一标识进行碰撞，落到概率区间内则下发补丁。\n</code></pre>\n<p>条件发布：</p>\n<pre><code>需要在小范围内进行验证，比如特定某个系统版本或者特定某个用户；在验证通过后再进行全网用户的下发，这中场景下可以使用条件下发。\n</code></pre>\n<h2 id=\"传输安全：\"><a href=\"#传输安全：\" class=\"headerlink\" title=\"传输安全：\"></a>传输安全：</h2><p>对补丁进行AES加密，生成二进制文件</p>\n<h2 id=\"监控：\"><a href=\"#监控：\" class=\"headerlink\" title=\"监控：\"></a>监控：</h2><pre><code>修复情况（crash监控等）\n拉取补丁设备数\n</code></pre>\n<h1 id=\"完成度：\"><a href=\"#完成度：\" class=\"headerlink\" title=\"完成度：\"></a>完成度：</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/shijianmei/hotfixMS\">热修复管理系统具前端</a> </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://git@github.com:shijianmei/hotfixServer.git\">热修复管理系统具前端后端</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://git@github.com:shijianmei/PatchGenerater.git\">热修复脚本生成工具</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/shijianmei/ProblemTerminator\">iOS端热修复库封装</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> 条件发布、灰度发布</li>\n<li><input disabled=\"\" type=\"checkbox\"> 数据指标统计（补丁读取耗时、补丁读取成功设备数）</li>\n</ul>\n"},{"title":"卡顿监控","date":"2021-09-18T04:20:27.000Z","_content":"\n## 为什么会卡顿\n\n### 图像显示原理\n \n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA%E5%8E%9F%E7%90%86.png)\n\n* 关于CPU和GPU都是通过总线连接起来的，在CPU当中输出的往往是一个位图，再经由总线在合适的时机传递个GPU\n* GPU拿到这个位图之后，会对这个位图的图层进行渲染，包括纹理的合成等\n* 之后会把这个结果放到帧缓冲区中，然后视频控制器会按照VSync信号逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器，达到最终的显示效果\n \n\n### CPU和GPU做的事情\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/CPU_GPU%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85.png) \n\n* 首先当我们创建一个UIView控件的时候，其中负责显示的CALayer\n* CALayer中有一个contents属性，就是我们最终要绘制到屏幕上的一个位图，比如说我们创建了一个UILabel，那么在contents里面就放了一个关于Hello world的文字位图\n* 然后系统会在一个合适的时机回调给我们一个drawRect:的方法，这个方法中我们可以去绘制一些自定义的内容\n* 绘制好了之后，最终会由Core Animation这个框架提交给GPU部分的OpenGL渲染管线，进行最终的位图的渲染，包括纹理合成等，然后显示在屏幕上 \n#### CPU\n\n**具体分为四个阶段**\n\n* **Layout**：这里主要涉及到一些UI布局，文本计算等，例如一个label的size\n* **Display**：绘制阶段，例如drawRect方法就在这一步骤中\n* **Prepare**：图片的编解码等操作在此步骤中\n* **Commit**：提交位图\n \n\n#### GPU渲染管线\n\n* **顶点着色**\n* **图元装配**\n* **光栅化**\n* **片段着色**\n* **片段处理**\n \n\n### UI卡顿、掉帧的原因\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E6%8E%89%E5%B8%A7%E5%8E%9F%E5%9B%A0.png) \n\n在显示器中是固定的频率，比如iOS中是每秒60帧（60FPS），即每帧16.7ms\n\n从上图中可以看出，每两个VSync信号之间有时间间隔（16.7ms），在这个时间内，CPU主线程计算布局，解码图片，创建视图，绘制文本，计算完成后将内容交给GPU，GPU变换，合成，渲染（详细可学习 OpenGL相关课程），放入帧缓冲区\n\n**假如16.7ms内，CPU和GPU没有来得及生产出一帧缓冲，那么这一帧会被丢弃，显示器就会保持不变，继续显示上一帧内容，这就将导致导致画面卡顿**\n\n \n\n所以无论CPU,GPU，哪个消耗时间过长，都会导致在16.7ms内无法生成一帧缓存\n\n## FPS 卡顿监控方案\n\nFPS 卡顿监控方案的原理是 **通过一段连续的 FPS 计算丢帧率来衡量当前页面绘制的质量**。\n\nFPS（Frames Per Second）是指画面每秒传输的帧数。每秒帧数越多，所显示的动画就越流畅，一般只要保持 FPS 在 50-60，App 就会有流畅的体验，反之会感觉到卡顿。\n\n### 相关系统原理\n\n`CADisplayLink` 是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。\n\n一旦 `CADisplayLink` 以特定的模式注册到 `runloop` 之后，每当屏幕需要刷新时，`runloop` 就会调用 `CADisplayLink` 绑定的 `target` 上的 `selector`，此时 `target` 可以读取到 `CADisplayLink` 的每次调用的时间戳，用来准备下一帧显示需要的数据。如：一个视频应用使用时间戳来计算下一帧要显示的视频数据。\n\n### 代码实现\n\n现阶段，常用的 FPS 监控几乎都是基于 `CADisplayLink` 实现的。\n\n```java\nfinal class FPSMonitor: NSObject {\n    private var timer: Timer?\n    private var link: CADisplayLink?\n    private var count: UInt = 0\n    private var lastTime: TimeInterval = 0\n    func enableMonitor() {\n        if link == nil {\n            link = CADisplayLink(target: self, selector: #selector(fpsInfoCalculate(_:)))\n            link?.add(to: RunLoop.main, forMode: .common)\n        } else {\n            link?.isPaused = false\n        }\n    }\n\n    func disableMonitor() {\n        if let link = link {\n            link.isPaused = true\n            link.invalidate()\n            self.link = nil\n            lastTime = 0\n            count = 0\n        }\n    }\n    \n    @objc\n    func fpsInfoCalculate(_ link: CADisplayLink) {\n        if lastTime == 0 {\n            lastTime = link.timestamp\n            return\n        }\n        count += 1\n        let delta = link.timestamp - lastTime\n        if delta >= 1 {\n            // 间隔超过 1 秒\n            lastTime = link.timestamp\n            let fps = Double(count) / delta\n            count = 0\n            let intFps = Int(fps + 0.5)\n            print(\"帧率：\\(intFps)\")\n        }\n    }\n}\n```\n`CADisplayLink` 实现的 FPS 在生产场景中只有指导意义，不能代表真实的 FPS。因为基于 `CADisplayLink` 实现的 FPS 无法完全检测出当前 **Core Animation** 的性能情况，只能检测出当前 **RunLoop** 的帧率。\n## 主线程卡顿监控 \n\n主线程卡顿监控方案的原理是 **通过子线程监控主线程的 RunLoop，判断两个状态区域之间的耗时是否达到一定阈值**。因为主线程绝大部分计算或绘制任务都是以 RunLoop 为单位发生。单次 RunLoop 如果时长超过 16ms，就会导致 UI 体验的卡顿。\n\n美团的移动端性能监控方案 Hertz 采用的就是这种方式。\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7%E6%B5%81%E7%A8%8B.png)\n\n首先我们需要了解一下 RunLoop 的原理。\n\n### RunLoop 定义\n\nRunLoop 是 iOS 事件响应与任务处理最核心的机制。当有持续的异步任务需求时，我们会创建一个独立的生命周期可控的线程。**RunLoop 就是控制线程生命周期并接收事件进行处理的机制**。\n\n### RunLoop 机制\n\n**主线程（有 RunLoop 的线程）几乎所有函数都从以下六个函数之一的函数调起：**\n\n1. `CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION`\n    1. CFRunloop is calling out to an abserver callback function\n    2. 用于向外部报告 RunLoop 当前状态的改变，框架中很多机制都由 RunLoopObserver 触发，如：CAAnimation\n2. `CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK`\n    1. CFRunloop is calling out to a block\n    2. 消息通知、非延迟的 perform、dispatch 调用、block 回调、KVO\n3. `CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE`\n    1. CFRunloop is servicing the main dispatch queue\n    2. 执行主队列上的任务\n4. `CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION`\n    1. CFRunloop is calling out to a timer callback function\n    2. 基于定时器的延迟的 perfrom，dispatch 调用\n5. `CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION`\n    1. CFRunloop is calling out to a source 0 perform function\n    2. 处理 App 内部事件、App自己负责管理（触发），如：`UIEvent`、`CFSocket`。普通函数调用，系统调用\n6. `CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION`\n    1. CFRunloop is calling out to a source 1 perform function\n    2. 由 RunLoop 和内核管理，Mach port 驱动，如：`CFMachPort`、`CFMessagePort`\n### RunLoop 运行时\n\n如下所示为 `CFRunLoop` 源码中的核心方法 `CFRunLoopRun` 简化后的主要逻辑。 \n\n```c++\nint32_t __CFRunLoopRun() {\n    // 1. 通知 Observers：即将进入 RunLoop\n    __CFRunLoopDoObservers(KCFRunLoopEntry);\n    \n    do {\n        // 2. 通知Observers：即将要处理 timer\n        __CFRunLoopDoObservers(kCFRunLoopBeforeTimers);\n        // 3. 通知Observers：即将要处理 source\n        __CFRunLoopDoObservers(kCFRunLoopBeforeSources);\n        \n        // 处理非延迟的主线程调用\n        __CFRunLoopDoBlocks();\n        // 处理 UIEvent 事件\n        __CFRunLoopDoSource0();\n    \n        // GCD dispatch main queue\n        CheckIfExistMessagesInMainDispatchQueue();\n    \n        // 4. 通知 Observers：即将进入休眠等待\n        __CFRunLoopDoObservers(kCFRunLoopBeforeWaiting);\n        \n        // 等待内核mach_msg事件\n        mach_port_t wakeUpPort = SleepAndWaitForWakingUpPorts();\n        \n        // mach_msg_trap\n        // 休眠中 Zzz...\n        // Received mach_msg, wake up\n        \n        // 5. 通知 Observers：从休眠等待中醒来\n        __CFRunLoopDoObservers(kCFRunLoopAfterWaiting);\n        \n        if (wakeUpPort == timerPort) {\n            // 处理因timer的唤醒\n            __CFRunLoopDoTimers();\n        } else if (wakeUpPort == mainDispatchQueuePort) {\n            // 处理异步方法唤醒，如：dispatch_async\n            __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__()\n        } else {\n            // UI 刷新，动画显示\n            __CFRunLoopDoSource1();\n        }\n        \n        // 再次确保是否有同步的方法需要调用\n        __CFRunLoopDoBlocks()\n    } while(!stop && !timeout);\n    \n    // 6. 通知 Observers：即将退出runloop\n    __CFRunLoopDoObservers(CFRunLoopExit);\n}\n```\nRunLoop 在运行时一直在向外部报告当前状态的更新，其状态定义如下：\n```c++\ntypedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {\n    kCFRunLoopEntry ,           // 进入 loop\n    kCFRunLoopBeforeTimers ,    // 触发 Timer 回调\n    kCFRunLoopBeforeSources ,   // 触发 Source0 回调\n    kCFRunLoopBeforeWaiting ,   // 等待 mach_port 消息\n    kCFRunLoopAfterWaiting ,    // 接收 mach_port 消息\n    kCFRunLoopExit ,            // 退出 loop\n    kCFRunLoopAllActivities     // loop 所有状态改变\n}\n```\n从 RunLoop 运行逻辑中，不难发现 NSRunLoop 调用方法主要在于两个状态区间：\n* `kCFRunLoopBeforeSources` 和 `kCFRunLoopBeforeWaiting` 之间\n* `kCFRunLoopAfterWaiting` 之后\n**如果这两个时间内耗时太久而无法进入下一步，可以线程受阻。如果这个线程时主线程，表现出来就是出现了卡顿。**\n\n### 代码实现\n\n我们可以通过 `CFRunLoopObserverRef` 实时获取 `NSRunLoop` 的状态。具体使用方法如下：\n\n首先创建一个 `CFRunLoopObserverContext` 观察者 `observer`。然后将观察者 `observer` 添加到主线程 RunLoop 的 `kCFRunLoopCommonModes` 模式下进行观察。\n\n```c++\n- (void)registerObserver {\n    CFRunLoopObserverContext context = {0,(__bridge void*)self,NULL,NULL};\n    CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault,\n                                                            kCFRunLoopAllActivities,\n                                                            YES,\n                                                            0,\n                                                            &runLoopObserverCallBack,\n                                                            &context);\n    CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);\n}\nstatic void runLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info) {\n    MyClass *object = (__bridge MyClass*)info;\n    object->activity = activity;\n}\n```\n \n然后，创建一个持续的子线程专门用来监控主线程的 RunLoop 状态。为了让计算更精确，需要让子线程更及时的获知主线程 RunLoop 状态变化，`dispatch_semaphore_t` 是一个不错的选择。另外，卡顿需要覆盖多次连续短时间卡顿和单次长时间卡顿两种情景，所以判定条件也需要做适当优化。优化后的代码实现如下所示：\n\n```c++\n- (void)registerObserver {\n    CFRunLoopObserverContext context = {0,(__bridge void*)self,NULL,NULL};\n    CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault,\n                                                            kCFRunLoopAllActivities,\n                                                            YES,\n                                                            0,\n                                                            &runLoopObserverCallBack,\n                                                            &context);\n    CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);\n    \n    // 创建信号\n    semaphore = dispatch_semaphore_create(0);\n    \n    // 在子线程监控时长\n    dispatch_async(dispatch_get_global_queue(0, 0), ^{\n        while (YES) {\n            // 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms)\n            long st = dispatch_semaphore_wait(semaphore, dispatch_time(DISPATCH_TIME_NOW, 50*NSEC_PER_MSEC));\n            if (st != 0) {\n                if (activity == kCFRunLoopBeforeSources || activity==kCFRunLoopAfterWaiting) {\n                    if (++timeoutCount < 5)\n                        continue;\n                    \n                    NSLog(@\"好像有点儿卡哦\");\n                }\n            }\n            timeoutCount = 0;\n        }\n    });\n}\nstatic void runLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info) {\n    MyClass *object = (__bridge MyClass*)info;\n    \n    // 记录状态值\n    object->activity = activity;\n    \n    // 发送信号\n    dispatch_semaphore_t semaphore = moniotr->semaphore;\n    dispatch_semaphore_signal(semaphore);\n}\n```\n 检测到卡顿时应该立刻获取卡顿的方法堆栈信息，并推送至服务端共开发者分析，从而解决卡顿问题。\n获取堆栈信息:\n\n**直接使用 PLCrashReporter 第三方开源库**\n\n```c++\nPLCrashReporterConfig *config = [[PLCrashReporterConfig alloc] initWithSignalHandlerType:PLCrashReporterSignalHandlerTypeBSD     \n                                                                   symbolicationStrategy:PLCrashReporterSymbolicationStrategyAll];\nPLCrashReporter *reporter = [[PLCrashReporter alloc] initWithConfiguration:config];\n// 获取数据\nNSData *lagData = [reporter generateLiveReport];\n// 转换成 PLCrashReport 对象\nPLCrashReport *lagReport = [[PLCrashReport alloc] initWithData:lagData error:NULL];\n// 进行字符串格式化处理\nNSString *lagReportString = [PLCrashReportTextFormatter stringValueForCrashReport:lagReport withTextFormat:PLCrashReportTextFormatiOS];\n// 将字符串上传服务器\nNSLog(@\"lag happen, detail below: \\n %@\",lagReportString);\n```\n \n[CADisplayLink](https://www.jianshu.com/p/c35a81c3b9eb)\n\n[Runloop](https://opensource.apple.com/source/CF/CF-1152.14/CFRunLoop.c.auto.html)\n\n[iOS 性能监控 SDK —— Wedjat（华狄特）开发过程的调研和整理](https://github.com/aozhimin/iOS-Monitor-Platform#fps)\n\n","source":"_posts/卡顿监控.md","raw":"---\ntitle: 卡顿监控\ndate: 2021-09-18 12:20:27\ncategories: \n- 性能\ntags:\n---\n\n## 为什么会卡顿\n\n### 图像显示原理\n \n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA%E5%8E%9F%E7%90%86.png)\n\n* 关于CPU和GPU都是通过总线连接起来的，在CPU当中输出的往往是一个位图，再经由总线在合适的时机传递个GPU\n* GPU拿到这个位图之后，会对这个位图的图层进行渲染，包括纹理的合成等\n* 之后会把这个结果放到帧缓冲区中，然后视频控制器会按照VSync信号逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器，达到最终的显示效果\n \n\n### CPU和GPU做的事情\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/CPU_GPU%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85.png) \n\n* 首先当我们创建一个UIView控件的时候，其中负责显示的CALayer\n* CALayer中有一个contents属性，就是我们最终要绘制到屏幕上的一个位图，比如说我们创建了一个UILabel，那么在contents里面就放了一个关于Hello world的文字位图\n* 然后系统会在一个合适的时机回调给我们一个drawRect:的方法，这个方法中我们可以去绘制一些自定义的内容\n* 绘制好了之后，最终会由Core Animation这个框架提交给GPU部分的OpenGL渲染管线，进行最终的位图的渲染，包括纹理合成等，然后显示在屏幕上 \n#### CPU\n\n**具体分为四个阶段**\n\n* **Layout**：这里主要涉及到一些UI布局，文本计算等，例如一个label的size\n* **Display**：绘制阶段，例如drawRect方法就在这一步骤中\n* **Prepare**：图片的编解码等操作在此步骤中\n* **Commit**：提交位图\n \n\n#### GPU渲染管线\n\n* **顶点着色**\n* **图元装配**\n* **光栅化**\n* **片段着色**\n* **片段处理**\n \n\n### UI卡顿、掉帧的原因\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E6%8E%89%E5%B8%A7%E5%8E%9F%E5%9B%A0.png) \n\n在显示器中是固定的频率，比如iOS中是每秒60帧（60FPS），即每帧16.7ms\n\n从上图中可以看出，每两个VSync信号之间有时间间隔（16.7ms），在这个时间内，CPU主线程计算布局，解码图片，创建视图，绘制文本，计算完成后将内容交给GPU，GPU变换，合成，渲染（详细可学习 OpenGL相关课程），放入帧缓冲区\n\n**假如16.7ms内，CPU和GPU没有来得及生产出一帧缓冲，那么这一帧会被丢弃，显示器就会保持不变，继续显示上一帧内容，这就将导致导致画面卡顿**\n\n \n\n所以无论CPU,GPU，哪个消耗时间过长，都会导致在16.7ms内无法生成一帧缓存\n\n## FPS 卡顿监控方案\n\nFPS 卡顿监控方案的原理是 **通过一段连续的 FPS 计算丢帧率来衡量当前页面绘制的质量**。\n\nFPS（Frames Per Second）是指画面每秒传输的帧数。每秒帧数越多，所显示的动画就越流畅，一般只要保持 FPS 在 50-60，App 就会有流畅的体验，反之会感觉到卡顿。\n\n### 相关系统原理\n\n`CADisplayLink` 是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。\n\n一旦 `CADisplayLink` 以特定的模式注册到 `runloop` 之后，每当屏幕需要刷新时，`runloop` 就会调用 `CADisplayLink` 绑定的 `target` 上的 `selector`，此时 `target` 可以读取到 `CADisplayLink` 的每次调用的时间戳，用来准备下一帧显示需要的数据。如：一个视频应用使用时间戳来计算下一帧要显示的视频数据。\n\n### 代码实现\n\n现阶段，常用的 FPS 监控几乎都是基于 `CADisplayLink` 实现的。\n\n```java\nfinal class FPSMonitor: NSObject {\n    private var timer: Timer?\n    private var link: CADisplayLink?\n    private var count: UInt = 0\n    private var lastTime: TimeInterval = 0\n    func enableMonitor() {\n        if link == nil {\n            link = CADisplayLink(target: self, selector: #selector(fpsInfoCalculate(_:)))\n            link?.add(to: RunLoop.main, forMode: .common)\n        } else {\n            link?.isPaused = false\n        }\n    }\n\n    func disableMonitor() {\n        if let link = link {\n            link.isPaused = true\n            link.invalidate()\n            self.link = nil\n            lastTime = 0\n            count = 0\n        }\n    }\n    \n    @objc\n    func fpsInfoCalculate(_ link: CADisplayLink) {\n        if lastTime == 0 {\n            lastTime = link.timestamp\n            return\n        }\n        count += 1\n        let delta = link.timestamp - lastTime\n        if delta >= 1 {\n            // 间隔超过 1 秒\n            lastTime = link.timestamp\n            let fps = Double(count) / delta\n            count = 0\n            let intFps = Int(fps + 0.5)\n            print(\"帧率：\\(intFps)\")\n        }\n    }\n}\n```\n`CADisplayLink` 实现的 FPS 在生产场景中只有指导意义，不能代表真实的 FPS。因为基于 `CADisplayLink` 实现的 FPS 无法完全检测出当前 **Core Animation** 的性能情况，只能检测出当前 **RunLoop** 的帧率。\n## 主线程卡顿监控 \n\n主线程卡顿监控方案的原理是 **通过子线程监控主线程的 RunLoop，判断两个状态区域之间的耗时是否达到一定阈值**。因为主线程绝大部分计算或绘制任务都是以 RunLoop 为单位发生。单次 RunLoop 如果时长超过 16ms，就会导致 UI 体验的卡顿。\n\n美团的移动端性能监控方案 Hertz 采用的就是这种方式。\n\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7%E6%B5%81%E7%A8%8B.png)\n\n首先我们需要了解一下 RunLoop 的原理。\n\n### RunLoop 定义\n\nRunLoop 是 iOS 事件响应与任务处理最核心的机制。当有持续的异步任务需求时，我们会创建一个独立的生命周期可控的线程。**RunLoop 就是控制线程生命周期并接收事件进行处理的机制**。\n\n### RunLoop 机制\n\n**主线程（有 RunLoop 的线程）几乎所有函数都从以下六个函数之一的函数调起：**\n\n1. `CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION`\n    1. CFRunloop is calling out to an abserver callback function\n    2. 用于向外部报告 RunLoop 当前状态的改变，框架中很多机制都由 RunLoopObserver 触发，如：CAAnimation\n2. `CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK`\n    1. CFRunloop is calling out to a block\n    2. 消息通知、非延迟的 perform、dispatch 调用、block 回调、KVO\n3. `CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE`\n    1. CFRunloop is servicing the main dispatch queue\n    2. 执行主队列上的任务\n4. `CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION`\n    1. CFRunloop is calling out to a timer callback function\n    2. 基于定时器的延迟的 perfrom，dispatch 调用\n5. `CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION`\n    1. CFRunloop is calling out to a source 0 perform function\n    2. 处理 App 内部事件、App自己负责管理（触发），如：`UIEvent`、`CFSocket`。普通函数调用，系统调用\n6. `CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION`\n    1. CFRunloop is calling out to a source 1 perform function\n    2. 由 RunLoop 和内核管理，Mach port 驱动，如：`CFMachPort`、`CFMessagePort`\n### RunLoop 运行时\n\n如下所示为 `CFRunLoop` 源码中的核心方法 `CFRunLoopRun` 简化后的主要逻辑。 \n\n```c++\nint32_t __CFRunLoopRun() {\n    // 1. 通知 Observers：即将进入 RunLoop\n    __CFRunLoopDoObservers(KCFRunLoopEntry);\n    \n    do {\n        // 2. 通知Observers：即将要处理 timer\n        __CFRunLoopDoObservers(kCFRunLoopBeforeTimers);\n        // 3. 通知Observers：即将要处理 source\n        __CFRunLoopDoObservers(kCFRunLoopBeforeSources);\n        \n        // 处理非延迟的主线程调用\n        __CFRunLoopDoBlocks();\n        // 处理 UIEvent 事件\n        __CFRunLoopDoSource0();\n    \n        // GCD dispatch main queue\n        CheckIfExistMessagesInMainDispatchQueue();\n    \n        // 4. 通知 Observers：即将进入休眠等待\n        __CFRunLoopDoObservers(kCFRunLoopBeforeWaiting);\n        \n        // 等待内核mach_msg事件\n        mach_port_t wakeUpPort = SleepAndWaitForWakingUpPorts();\n        \n        // mach_msg_trap\n        // 休眠中 Zzz...\n        // Received mach_msg, wake up\n        \n        // 5. 通知 Observers：从休眠等待中醒来\n        __CFRunLoopDoObservers(kCFRunLoopAfterWaiting);\n        \n        if (wakeUpPort == timerPort) {\n            // 处理因timer的唤醒\n            __CFRunLoopDoTimers();\n        } else if (wakeUpPort == mainDispatchQueuePort) {\n            // 处理异步方法唤醒，如：dispatch_async\n            __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__()\n        } else {\n            // UI 刷新，动画显示\n            __CFRunLoopDoSource1();\n        }\n        \n        // 再次确保是否有同步的方法需要调用\n        __CFRunLoopDoBlocks()\n    } while(!stop && !timeout);\n    \n    // 6. 通知 Observers：即将退出runloop\n    __CFRunLoopDoObservers(CFRunLoopExit);\n}\n```\nRunLoop 在运行时一直在向外部报告当前状态的更新，其状态定义如下：\n```c++\ntypedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {\n    kCFRunLoopEntry ,           // 进入 loop\n    kCFRunLoopBeforeTimers ,    // 触发 Timer 回调\n    kCFRunLoopBeforeSources ,   // 触发 Source0 回调\n    kCFRunLoopBeforeWaiting ,   // 等待 mach_port 消息\n    kCFRunLoopAfterWaiting ,    // 接收 mach_port 消息\n    kCFRunLoopExit ,            // 退出 loop\n    kCFRunLoopAllActivities     // loop 所有状态改变\n}\n```\n从 RunLoop 运行逻辑中，不难发现 NSRunLoop 调用方法主要在于两个状态区间：\n* `kCFRunLoopBeforeSources` 和 `kCFRunLoopBeforeWaiting` 之间\n* `kCFRunLoopAfterWaiting` 之后\n**如果这两个时间内耗时太久而无法进入下一步，可以线程受阻。如果这个线程时主线程，表现出来就是出现了卡顿。**\n\n### 代码实现\n\n我们可以通过 `CFRunLoopObserverRef` 实时获取 `NSRunLoop` 的状态。具体使用方法如下：\n\n首先创建一个 `CFRunLoopObserverContext` 观察者 `observer`。然后将观察者 `observer` 添加到主线程 RunLoop 的 `kCFRunLoopCommonModes` 模式下进行观察。\n\n```c++\n- (void)registerObserver {\n    CFRunLoopObserverContext context = {0,(__bridge void*)self,NULL,NULL};\n    CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault,\n                                                            kCFRunLoopAllActivities,\n                                                            YES,\n                                                            0,\n                                                            &runLoopObserverCallBack,\n                                                            &context);\n    CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);\n}\nstatic void runLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info) {\n    MyClass *object = (__bridge MyClass*)info;\n    object->activity = activity;\n}\n```\n \n然后，创建一个持续的子线程专门用来监控主线程的 RunLoop 状态。为了让计算更精确，需要让子线程更及时的获知主线程 RunLoop 状态变化，`dispatch_semaphore_t` 是一个不错的选择。另外，卡顿需要覆盖多次连续短时间卡顿和单次长时间卡顿两种情景，所以判定条件也需要做适当优化。优化后的代码实现如下所示：\n\n```c++\n- (void)registerObserver {\n    CFRunLoopObserverContext context = {0,(__bridge void*)self,NULL,NULL};\n    CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault,\n                                                            kCFRunLoopAllActivities,\n                                                            YES,\n                                                            0,\n                                                            &runLoopObserverCallBack,\n                                                            &context);\n    CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);\n    \n    // 创建信号\n    semaphore = dispatch_semaphore_create(0);\n    \n    // 在子线程监控时长\n    dispatch_async(dispatch_get_global_queue(0, 0), ^{\n        while (YES) {\n            // 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms)\n            long st = dispatch_semaphore_wait(semaphore, dispatch_time(DISPATCH_TIME_NOW, 50*NSEC_PER_MSEC));\n            if (st != 0) {\n                if (activity == kCFRunLoopBeforeSources || activity==kCFRunLoopAfterWaiting) {\n                    if (++timeoutCount < 5)\n                        continue;\n                    \n                    NSLog(@\"好像有点儿卡哦\");\n                }\n            }\n            timeoutCount = 0;\n        }\n    });\n}\nstatic void runLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info) {\n    MyClass *object = (__bridge MyClass*)info;\n    \n    // 记录状态值\n    object->activity = activity;\n    \n    // 发送信号\n    dispatch_semaphore_t semaphore = moniotr->semaphore;\n    dispatch_semaphore_signal(semaphore);\n}\n```\n 检测到卡顿时应该立刻获取卡顿的方法堆栈信息，并推送至服务端共开发者分析，从而解决卡顿问题。\n获取堆栈信息:\n\n**直接使用 PLCrashReporter 第三方开源库**\n\n```c++\nPLCrashReporterConfig *config = [[PLCrashReporterConfig alloc] initWithSignalHandlerType:PLCrashReporterSignalHandlerTypeBSD     \n                                                                   symbolicationStrategy:PLCrashReporterSymbolicationStrategyAll];\nPLCrashReporter *reporter = [[PLCrashReporter alloc] initWithConfiguration:config];\n// 获取数据\nNSData *lagData = [reporter generateLiveReport];\n// 转换成 PLCrashReport 对象\nPLCrashReport *lagReport = [[PLCrashReport alloc] initWithData:lagData error:NULL];\n// 进行字符串格式化处理\nNSString *lagReportString = [PLCrashReportTextFormatter stringValueForCrashReport:lagReport withTextFormat:PLCrashReportTextFormatiOS];\n// 将字符串上传服务器\nNSLog(@\"lag happen, detail below: \\n %@\",lagReportString);\n```\n \n[CADisplayLink](https://www.jianshu.com/p/c35a81c3b9eb)\n\n[Runloop](https://opensource.apple.com/source/CF/CF-1152.14/CFRunLoop.c.auto.html)\n\n[iOS 性能监控 SDK —— Wedjat（华狄特）开发过程的调研和整理](https://github.com/aozhimin/iOS-Monitor-Platform#fps)\n\n","slug":"卡顿监控","published":1,"updated":"2023-05-24T07:20:15.470Z","_id":"clhsmku7r00002gzr75r05qds","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么会卡顿\"><a href=\"#为什么会卡顿\" class=\"headerlink\" title=\"为什么会卡顿\"></a>为什么会卡顿</h2><h3 id=\"图像显示原理\"><a href=\"#图像显示原理\" class=\"headerlink\" title=\"图像显示原理\"></a>图像显示原理</h3><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA%E5%8E%9F%E7%90%86.png\"></p>\n<ul>\n<li>关于CPU和GPU都是通过总线连接起来的，在CPU当中输出的往往是一个位图，再经由总线在合适的时机传递个GPU</li>\n<li>GPU拿到这个位图之后，会对这个位图的图层进行渲染，包括纹理的合成等</li>\n<li>之后会把这个结果放到帧缓冲区中，然后视频控制器会按照VSync信号逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器，达到最终的显示效果</li>\n</ul>\n<h3 id=\"CPU和GPU做的事情\"><a href=\"#CPU和GPU做的事情\" class=\"headerlink\" title=\"CPU和GPU做的事情\"></a>CPU和GPU做的事情</h3><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/CPU_GPU%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85.png\"> </p>\n<ul>\n<li>首先当我们创建一个UIView控件的时候，其中负责显示的CALayer</li>\n<li>CALayer中有一个contents属性，就是我们最终要绘制到屏幕上的一个位图，比如说我们创建了一个UILabel，那么在contents里面就放了一个关于Hello world的文字位图</li>\n<li>然后系统会在一个合适的时机回调给我们一个drawRect:的方法，这个方法中我们可以去绘制一些自定义的内容</li>\n<li>绘制好了之后，最终会由Core Animation这个框架提交给GPU部分的OpenGL渲染管线，进行最终的位图的渲染，包括纹理合成等，然后显示在屏幕上 <h4 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h4></li>\n</ul>\n<p><strong>具体分为四个阶段</strong></p>\n<ul>\n<li><strong>Layout</strong>：这里主要涉及到一些UI布局，文本计算等，例如一个label的size</li>\n<li><strong>Display</strong>：绘制阶段，例如drawRect方法就在这一步骤中</li>\n<li><strong>Prepare</strong>：图片的编解码等操作在此步骤中</li>\n<li><strong>Commit</strong>：提交位图</li>\n</ul>\n<h4 id=\"GPU渲染管线\"><a href=\"#GPU渲染管线\" class=\"headerlink\" title=\"GPU渲染管线\"></a>GPU渲染管线</h4><ul>\n<li><strong>顶点着色</strong></li>\n<li><strong>图元装配</strong></li>\n<li><strong>光栅化</strong></li>\n<li><strong>片段着色</strong></li>\n<li><strong>片段处理</strong></li>\n</ul>\n<h3 id=\"UI卡顿、掉帧的原因\"><a href=\"#UI卡顿、掉帧的原因\" class=\"headerlink\" title=\"UI卡顿、掉帧的原因\"></a>UI卡顿、掉帧的原因</h3><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E6%8E%89%E5%B8%A7%E5%8E%9F%E5%9B%A0.png\"> </p>\n<p>在显示器中是固定的频率，比如iOS中是每秒60帧（60FPS），即每帧16.7ms</p>\n<p>从上图中可以看出，每两个VSync信号之间有时间间隔（16.7ms），在这个时间内，CPU主线程计算布局，解码图片，创建视图，绘制文本，计算完成后将内容交给GPU，GPU变换，合成，渲染（详细可学习 OpenGL相关课程），放入帧缓冲区</p>\n<p><strong>假如16.7ms内，CPU和GPU没有来得及生产出一帧缓冲，那么这一帧会被丢弃，显示器就会保持不变，继续显示上一帧内容，这就将导致导致画面卡顿</strong></p>\n<p>所以无论CPU,GPU，哪个消耗时间过长，都会导致在16.7ms内无法生成一帧缓存</p>\n<h2 id=\"FPS-卡顿监控方案\"><a href=\"#FPS-卡顿监控方案\" class=\"headerlink\" title=\"FPS 卡顿监控方案\"></a>FPS 卡顿监控方案</h2><p>FPS 卡顿监控方案的原理是 <strong>通过一段连续的 FPS 计算丢帧率来衡量当前页面绘制的质量</strong>。</p>\n<p>FPS（Frames Per Second）是指画面每秒传输的帧数。每秒帧数越多，所显示的动画就越流畅，一般只要保持 FPS 在 50-60，App 就会有流畅的体验，反之会感觉到卡顿。</p>\n<h3 id=\"相关系统原理\"><a href=\"#相关系统原理\" class=\"headerlink\" title=\"相关系统原理\"></a>相关系统原理</h3><p><code>CADisplayLink</code> 是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。</p>\n<p>一旦 <code>CADisplayLink</code> 以特定的模式注册到 <code>runloop</code> 之后，每当屏幕需要刷新时，<code>runloop</code> 就会调用 <code>CADisplayLink</code> 绑定的 <code>target</code> 上的 <code>selector</code>，此时 <code>target</code> 可以读取到 <code>CADisplayLink</code> 的每次调用的时间戳，用来准备下一帧显示需要的数据。如：一个视频应用使用时间戳来计算下一帧要显示的视频数据。</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>现阶段，常用的 FPS 监控几乎都是基于 <code>CADisplayLink</code> 实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FPSMonitor</span>: NSObject &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> timer: Timer?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> link: CADisplayLink?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> count: UInt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> lastTime: TimeInterval = <span class=\"number\">0</span></span><br><span class=\"line\">    func <span class=\"title function_\">enableMonitor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> link == nil &#123;</span><br><span class=\"line\">            link = CADisplayLink(target: self, selector: #selector(fpsInfoCalculate(_:)))</span><br><span class=\"line\">            link?.add(to: RunLoop.main, forMode: .common)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            link?.isPaused = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    func <span class=\"title function_\">disableMonitor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"type\">let</span> <span class=\"variable\">link</span> <span class=\"operator\">=</span> link &#123;</span><br><span class=\"line\">            link.isPaused = <span class=\"literal\">true</span></span><br><span class=\"line\">            link.invalidate()</span><br><span class=\"line\">            self.link = <span class=\"type\">nil</span></span><br><span class=\"line\">            <span class=\"variable\">lastTime</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">            count = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@objc</span></span><br><span class=\"line\">    func <span class=\"title function_\">fpsInfoCalculate</span><span class=\"params\">(_ link: CADisplayLink)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> lastTime == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            lastTime = link.timestamp</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"type\">let</span> <span class=\"variable\">delta</span> <span class=\"operator\">=</span> link.timestamp - lastTime</span><br><span class=\"line\">        <span class=\"keyword\">if</span> delta &gt;= <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 间隔超过 1 秒</span></span><br><span class=\"line\">            lastTime = link.timestamp</span><br><span class=\"line\">            <span class=\"type\">let</span> <span class=\"variable\">fps</span> <span class=\"operator\">=</span> Double(count) / <span class=\"type\">delta</span></span><br><span class=\"line\">            <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"type\">let</span> <span class=\"variable\">intFps</span> <span class=\"operator\">=</span> Int(fps + <span class=\"number\">0.5</span>)</span><br><span class=\"line\">            print(<span class=\"string\">&quot;帧率：\\(intFps)&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>CADisplayLink</code> 实现的 FPS 在生产场景中只有指导意义，不能代表真实的 FPS。因为基于 <code>CADisplayLink</code> 实现的 FPS 无法完全检测出当前 <strong>Core Animation</strong> 的性能情况，只能检测出当前 <strong>RunLoop</strong> 的帧率。</p>\n<h2 id=\"主线程卡顿监控\"><a href=\"#主线程卡顿监控\" class=\"headerlink\" title=\"主线程卡顿监控\"></a>主线程卡顿监控</h2><p>主线程卡顿监控方案的原理是 <strong>通过子线程监控主线程的 RunLoop，判断两个状态区域之间的耗时是否达到一定阈值</strong>。因为主线程绝大部分计算或绘制任务都是以 RunLoop 为单位发生。单次 RunLoop 如果时长超过 16ms，就会导致 UI 体验的卡顿。</p>\n<p>美团的移动端性能监控方案 Hertz 采用的就是这种方式。</p>\n<p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7%E6%B5%81%E7%A8%8B.png\"></p>\n<p>首先我们需要了解一下 RunLoop 的原理。</p>\n<h3 id=\"RunLoop-定义\"><a href=\"#RunLoop-定义\" class=\"headerlink\" title=\"RunLoop 定义\"></a>RunLoop 定义</h3><p>RunLoop 是 iOS 事件响应与任务处理最核心的机制。当有持续的异步任务需求时，我们会创建一个独立的生命周期可控的线程。<strong>RunLoop 就是控制线程生命周期并接收事件进行处理的机制</strong>。</p>\n<h3 id=\"RunLoop-机制\"><a href=\"#RunLoop-机制\" class=\"headerlink\" title=\"RunLoop 机制\"></a>RunLoop 机制</h3><p><strong>主线程（有 RunLoop 的线程）几乎所有函数都从以下六个函数之一的函数调起：</strong></p>\n<ol>\n<li><code>CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION</code><ol>\n<li>CFRunloop is calling out to an abserver callback function</li>\n<li>用于向外部报告 RunLoop 当前状态的改变，框架中很多机制都由 RunLoopObserver 触发，如：CAAnimation</li>\n</ol>\n</li>\n<li><code>CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK</code><ol>\n<li>CFRunloop is calling out to a block</li>\n<li>消息通知、非延迟的 perform、dispatch 调用、block 回调、KVO</li>\n</ol>\n</li>\n<li><code>CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE</code><ol>\n<li>CFRunloop is servicing the main dispatch queue</li>\n<li>执行主队列上的任务</li>\n</ol>\n</li>\n<li><code>CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION</code><ol>\n<li>CFRunloop is calling out to a timer callback function</li>\n<li>基于定时器的延迟的 perfrom，dispatch 调用</li>\n</ol>\n</li>\n<li><code>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION</code><ol>\n<li>CFRunloop is calling out to a source 0 perform function</li>\n<li>处理 App 内部事件、App自己负责管理（触发），如：<code>UIEvent</code>、<code>CFSocket</code>。普通函数调用，系统调用</li>\n</ol>\n</li>\n<li><code>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION</code><ol>\n<li>CFRunloop is calling out to a source 1 perform function</li>\n<li>由 RunLoop 和内核管理，Mach port 驱动，如：<code>CFMachPort</code>、<code>CFMessagePort</code><h3 id=\"RunLoop-运行时\"><a href=\"#RunLoop-运行时\" class=\"headerlink\" title=\"RunLoop 运行时\"></a>RunLoop 运行时</h3></li>\n</ol>\n</li>\n</ol>\n<p>如下所示为 <code>CFRunLoop</code> 源码中的核心方法 <code>CFRunLoopRun</code> 简化后的主要逻辑。 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int32_t</span> __CFRunLoopRun() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 通知 Observers：即将进入 RunLoop</span></span><br><span class=\"line\">    __CFRunLoopDoObservers(KCFRunLoopEntry);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 通知Observers：即将要处理 timer</span></span><br><span class=\"line\">        __CFRunLoopDoObservers(kCFRunLoopBeforeTimers);</span><br><span class=\"line\">        <span class=\"comment\">// 3. 通知Observers：即将要处理 source</span></span><br><span class=\"line\">        __CFRunLoopDoObservers(kCFRunLoopBeforeSources);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 处理非延迟的主线程调用</span></span><br><span class=\"line\">        __CFRunLoopDoBlocks();</span><br><span class=\"line\">        <span class=\"comment\">// 处理 UIEvent 事件</span></span><br><span class=\"line\">        __CFRunLoopDoSource0();</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// GCD dispatch main queue</span></span><br><span class=\"line\">        <span class=\"built_in\">CheckIfExistMessagesInMainDispatchQueue</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 4. 通知 Observers：即将进入休眠等待</span></span><br><span class=\"line\">        __CFRunLoopDoObservers(kCFRunLoopBeforeWaiting);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 等待内核mach_msg事件</span></span><br><span class=\"line\">        <span class=\"type\">mach_port_t</span> wakeUpPort = <span class=\"built_in\">SleepAndWaitForWakingUpPorts</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// mach_msg_trap</span></span><br><span class=\"line\">        <span class=\"comment\">// 休眠中 Zzz...</span></span><br><span class=\"line\">        <span class=\"comment\">// Received mach_msg, wake up</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 5. 通知 Observers：从休眠等待中醒来</span></span><br><span class=\"line\">        __CFRunLoopDoObservers(kCFRunLoopAfterWaiting);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wakeUpPort == timerPort) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理因timer的唤醒</span></span><br><span class=\"line\">            __CFRunLoopDoTimers();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (wakeUpPort == mainDispatchQueuePort) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理异步方法唤醒，如：dispatch_async</span></span><br><span class=\"line\">            __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// UI 刷新，动画显示</span></span><br><span class=\"line\">            __CFRunLoopDoSource1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 再次确保是否有同步的方法需要调用</span></span><br><span class=\"line\">        __CFRunLoopDoBlocks()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!stop &amp;&amp; !timeout);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 6. 通知 Observers：即将退出runloop</span></span><br><span class=\"line\">    __CFRunLoopDoObservers(CFRunLoopExit);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RunLoop 在运行时一直在向外部报告当前状态的更新，其状态定义如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">CF_OPTIONS</span><span class=\"params\">(CFOptionFlags, CFRunLoopActivity)</span> </span>&#123;</span><br><span class=\"line\">    kCFRunLoopEntry ,           <span class=\"comment\">// 进入 loop</span></span><br><span class=\"line\">    kCFRunLoopBeforeTimers ,    <span class=\"comment\">// 触发 Timer 回调</span></span><br><span class=\"line\">    kCFRunLoopBeforeSources ,   <span class=\"comment\">// 触发 Source0 回调</span></span><br><span class=\"line\">    kCFRunLoopBeforeWaiting ,   <span class=\"comment\">// 等待 mach_port 消息</span></span><br><span class=\"line\">    kCFRunLoopAfterWaiting ,    <span class=\"comment\">// 接收 mach_port 消息</span></span><br><span class=\"line\">    kCFRunLoopExit ,            <span class=\"comment\">// 退出 loop</span></span><br><span class=\"line\">    kCFRunLoopAllActivities     <span class=\"comment\">// loop 所有状态改变</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 RunLoop 运行逻辑中，不难发现 NSRunLoop 调用方法主要在于两个状态区间：</p>\n<ul>\n<li><code>kCFRunLoopBeforeSources</code> 和 <code>kCFRunLoopBeforeWaiting</code> 之间</li>\n<li><code>kCFRunLoopAfterWaiting</code> 之后</li>\n<li><em>如果这两个时间内耗时太久而无法进入下一步，可以线程受阻。如果这个线程时主线程，表现出来就是出现了卡顿。</em>*</li>\n</ul>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>我们可以通过 <code>CFRunLoopObserverRef</code> 实时获取 <code>NSRunLoop</code> 的状态。具体使用方法如下：</p>\n<p>首先创建一个 <code>CFRunLoopObserverContext</code> 观察者 <code>observer</code>。然后将观察者 <code>observer</code> 添加到主线程 RunLoop 的 <code>kCFRunLoopCommonModes</code> 模式下进行观察。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)registerObserver &#123;</span><br><span class=\"line\">    CFRunLoopObserverContext context = &#123;<span class=\"number\">0</span>,(__bridge <span class=\"type\">void</span>*)self,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    CFRunLoopObserverRef observer = <span class=\"built_in\">CFRunLoopObserverCreate</span>(kCFAllocatorDefault,</span><br><span class=\"line\">                                                            kCFRunLoopAllActivities,</span><br><span class=\"line\">                                                            YES,</span><br><span class=\"line\">                                                            <span class=\"number\">0</span>,</span><br><span class=\"line\">                                                            &amp;runLoopObserverCallBack,</span><br><span class=\"line\">                                                            &amp;context);</span><br><span class=\"line\">    <span class=\"built_in\">CFRunLoopAddObserver</span>(<span class=\"built_in\">CFRunLoopGetMain</span>(), observer, kCFRunLoopCommonModes);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">runLoopObserverCallBack</span><span class=\"params\">(CFRunLoopObserverRef observer, CFRunLoopActivity activity, <span class=\"type\">void</span> *info)</span> </span>&#123;</span><br><span class=\"line\">    MyClass *object = (__bridge MyClass*)info;</span><br><span class=\"line\">    object-&gt;activity = activity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，创建一个持续的子线程专门用来监控主线程的 RunLoop 状态。为了让计算更精确，需要让子线程更及时的获知主线程 RunLoop 状态变化，<code>dispatch_semaphore_t</code> 是一个不错的选择。另外，卡顿需要覆盖多次连续短时间卡顿和单次长时间卡顿两种情景，所以判定条件也需要做适当优化。优化后的代码实现如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)registerObserver &#123;</span><br><span class=\"line\">    CFRunLoopObserverContext context = &#123;<span class=\"number\">0</span>,(__bridge <span class=\"type\">void</span>*)self,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    CFRunLoopObserverRef observer = <span class=\"built_in\">CFRunLoopObserverCreate</span>(kCFAllocatorDefault,</span><br><span class=\"line\">                                                            kCFRunLoopAllActivities,</span><br><span class=\"line\">                                                            YES,</span><br><span class=\"line\">                                                            <span class=\"number\">0</span>,</span><br><span class=\"line\">                                                            &amp;runLoopObserverCallBack,</span><br><span class=\"line\">                                                            &amp;context);</span><br><span class=\"line\">    <span class=\"built_in\">CFRunLoopAddObserver</span>(<span class=\"built_in\">CFRunLoopGetMain</span>(), observer, kCFRunLoopCommonModes);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建信号</span></span><br><span class=\"line\">    semaphore = <span class=\"built_in\">dispatch_semaphore_create</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在子线程监控时长</span></span><br><span class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"built_in\">dispatch_get_global_queue</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (YES) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms)</span></span><br><span class=\"line\">            <span class=\"type\">long</span> st = <span class=\"built_in\">dispatch_semaphore_wait</span>(semaphore, <span class=\"built_in\">dispatch_time</span>(DISPATCH_TIME_NOW, <span class=\"number\">50</span>*NSEC_PER_MSEC));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (st != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (activity == kCFRunLoopBeforeSources || activity==kCFRunLoopAfterWaiting) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (++timeoutCount &lt; <span class=\"number\">5</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"built_in\">NSLog</span>(@<span class=\"string\">&quot;好像有点儿卡哦&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            timeoutCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">runLoopObserverCallBack</span><span class=\"params\">(CFRunLoopObserverRef observer, CFRunLoopActivity activity, <span class=\"type\">void</span> *info)</span> </span>&#123;</span><br><span class=\"line\">    MyClass *object = (__bridge MyClass*)info;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 记录状态值</span></span><br><span class=\"line\">    object-&gt;activity = activity;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 发送信号</span></span><br><span class=\"line\">    <span class=\"type\">dispatch_semaphore_t</span> semaphore = moniotr-&gt;semaphore;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_semaphore_signal</span>(semaphore);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 检测到卡顿时应该立刻获取卡顿的方法堆栈信息，并推送至服务端共开发者分析，从而解决卡顿问题。<br>获取堆栈信息:</p>\n<p><strong>直接使用 PLCrashReporter 第三方开源库</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PLCrashReporterConfig *config = [[PLCrashReporterConfig alloc] initWithSignalHandlerType:PLCrashReporterSignalHandlerTypeBSD     </span><br><span class=\"line\">                                                                   symbolicationStrategy:PLCrashReporterSymbolicationStrategyAll];</span><br><span class=\"line\">PLCrashReporter *reporter = [[PLCrashReporter alloc] initWithConfiguration:config];</span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">NSData *lagData = [reporter generateLiveReport];</span><br><span class=\"line\"><span class=\"comment\">// 转换成 PLCrashReport 对象</span></span><br><span class=\"line\">PLCrashReport *lagReport = [[PLCrashReport alloc] initWithData:lagData error:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\"><span class=\"comment\">// 进行字符串格式化处理</span></span><br><span class=\"line\">NSString *lagReportString = [PLCrashReportTextFormatter stringValueForCrashReport:lagReport withTextFormat:PLCrashReportTextFormatiOS];</span><br><span class=\"line\"><span class=\"comment\">// 将字符串上传服务器</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(@<span class=\"string\">&quot;lag happen, detail below: \\n %@&quot;</span>,lagReportString);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.jianshu.com/p/c35a81c3b9eb\">CADisplayLink</a></p>\n<p><a href=\"https://opensource.apple.com/source/CF/CF-1152.14/CFRunLoop.c.auto.html\">Runloop</a></p>\n<p><a href=\"https://github.com/aozhimin/iOS-Monitor-Platform#fps\">iOS 性能监控 SDK —— Wedjat（华狄特）开发过程的调研和整理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么会卡顿\"><a href=\"#为什么会卡顿\" class=\"headerlink\" title=\"为什么会卡顿\"></a>为什么会卡顿</h2><h3 id=\"图像显示原理\"><a href=\"#图像显示原理\" class=\"headerlink\" title=\"图像显示原理\"></a>图像显示原理</h3><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA%E5%8E%9F%E7%90%86.png\"></p>\n<ul>\n<li>关于CPU和GPU都是通过总线连接起来的，在CPU当中输出的往往是一个位图，再经由总线在合适的时机传递个GPU</li>\n<li>GPU拿到这个位图之后，会对这个位图的图层进行渲染，包括纹理的合成等</li>\n<li>之后会把这个结果放到帧缓冲区中，然后视频控制器会按照VSync信号逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器，达到最终的显示效果</li>\n</ul>\n<h3 id=\"CPU和GPU做的事情\"><a href=\"#CPU和GPU做的事情\" class=\"headerlink\" title=\"CPU和GPU做的事情\"></a>CPU和GPU做的事情</h3><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/CPU_GPU%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85.png\"> </p>\n<ul>\n<li>首先当我们创建一个UIView控件的时候，其中负责显示的CALayer</li>\n<li>CALayer中有一个contents属性，就是我们最终要绘制到屏幕上的一个位图，比如说我们创建了一个UILabel，那么在contents里面就放了一个关于Hello world的文字位图</li>\n<li>然后系统会在一个合适的时机回调给我们一个drawRect:的方法，这个方法中我们可以去绘制一些自定义的内容</li>\n<li>绘制好了之后，最终会由Core Animation这个框架提交给GPU部分的OpenGL渲染管线，进行最终的位图的渲染，包括纹理合成等，然后显示在屏幕上 <h4 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h4></li>\n</ul>\n<p><strong>具体分为四个阶段</strong></p>\n<ul>\n<li><strong>Layout</strong>：这里主要涉及到一些UI布局，文本计算等，例如一个label的size</li>\n<li><strong>Display</strong>：绘制阶段，例如drawRect方法就在这一步骤中</li>\n<li><strong>Prepare</strong>：图片的编解码等操作在此步骤中</li>\n<li><strong>Commit</strong>：提交位图</li>\n</ul>\n<h4 id=\"GPU渲染管线\"><a href=\"#GPU渲染管线\" class=\"headerlink\" title=\"GPU渲染管线\"></a>GPU渲染管线</h4><ul>\n<li><strong>顶点着色</strong></li>\n<li><strong>图元装配</strong></li>\n<li><strong>光栅化</strong></li>\n<li><strong>片段着色</strong></li>\n<li><strong>片段处理</strong></li>\n</ul>\n<h3 id=\"UI卡顿、掉帧的原因\"><a href=\"#UI卡顿、掉帧的原因\" class=\"headerlink\" title=\"UI卡顿、掉帧的原因\"></a>UI卡顿、掉帧的原因</h3><p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E6%8E%89%E5%B8%A7%E5%8E%9F%E5%9B%A0.png\"> </p>\n<p>在显示器中是固定的频率，比如iOS中是每秒60帧（60FPS），即每帧16.7ms</p>\n<p>从上图中可以看出，每两个VSync信号之间有时间间隔（16.7ms），在这个时间内，CPU主线程计算布局，解码图片，创建视图，绘制文本，计算完成后将内容交给GPU，GPU变换，合成，渲染（详细可学习 OpenGL相关课程），放入帧缓冲区</p>\n<p><strong>假如16.7ms内，CPU和GPU没有来得及生产出一帧缓冲，那么这一帧会被丢弃，显示器就会保持不变，继续显示上一帧内容，这就将导致导致画面卡顿</strong></p>\n<p>所以无论CPU,GPU，哪个消耗时间过长，都会导致在16.7ms内无法生成一帧缓存</p>\n<h2 id=\"FPS-卡顿监控方案\"><a href=\"#FPS-卡顿监控方案\" class=\"headerlink\" title=\"FPS 卡顿监控方案\"></a>FPS 卡顿监控方案</h2><p>FPS 卡顿监控方案的原理是 <strong>通过一段连续的 FPS 计算丢帧率来衡量当前页面绘制的质量</strong>。</p>\n<p>FPS（Frames Per Second）是指画面每秒传输的帧数。每秒帧数越多，所显示的动画就越流畅，一般只要保持 FPS 在 50-60，App 就会有流畅的体验，反之会感觉到卡顿。</p>\n<h3 id=\"相关系统原理\"><a href=\"#相关系统原理\" class=\"headerlink\" title=\"相关系统原理\"></a>相关系统原理</h3><p><code>CADisplayLink</code> 是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。</p>\n<p>一旦 <code>CADisplayLink</code> 以特定的模式注册到 <code>runloop</code> 之后，每当屏幕需要刷新时，<code>runloop</code> 就会调用 <code>CADisplayLink</code> 绑定的 <code>target</code> 上的 <code>selector</code>，此时 <code>target</code> 可以读取到 <code>CADisplayLink</code> 的每次调用的时间戳，用来准备下一帧显示需要的数据。如：一个视频应用使用时间戳来计算下一帧要显示的视频数据。</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>现阶段，常用的 FPS 监控几乎都是基于 <code>CADisplayLink</code> 实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FPSMonitor</span>: NSObject &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> timer: Timer?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> link: CADisplayLink?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> count: UInt = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> lastTime: TimeInterval = <span class=\"number\">0</span></span><br><span class=\"line\">    func <span class=\"title function_\">enableMonitor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> link == nil &#123;</span><br><span class=\"line\">            link = CADisplayLink(target: self, selector: #selector(fpsInfoCalculate(_:)))</span><br><span class=\"line\">            link?.add(to: RunLoop.main, forMode: .common)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            link?.isPaused = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    func <span class=\"title function_\">disableMonitor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"type\">let</span> <span class=\"variable\">link</span> <span class=\"operator\">=</span> link &#123;</span><br><span class=\"line\">            link.isPaused = <span class=\"literal\">true</span></span><br><span class=\"line\">            link.invalidate()</span><br><span class=\"line\">            self.link = <span class=\"type\">nil</span></span><br><span class=\"line\">            <span class=\"variable\">lastTime</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">            count = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@objc</span></span><br><span class=\"line\">    func <span class=\"title function_\">fpsInfoCalculate</span><span class=\"params\">(_ link: CADisplayLink)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> lastTime == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            lastTime = link.timestamp</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"type\">let</span> <span class=\"variable\">delta</span> <span class=\"operator\">=</span> link.timestamp - lastTime</span><br><span class=\"line\">        <span class=\"keyword\">if</span> delta &gt;= <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 间隔超过 1 秒</span></span><br><span class=\"line\">            lastTime = link.timestamp</span><br><span class=\"line\">            <span class=\"type\">let</span> <span class=\"variable\">fps</span> <span class=\"operator\">=</span> Double(count) / <span class=\"type\">delta</span></span><br><span class=\"line\">            <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"type\">let</span> <span class=\"variable\">intFps</span> <span class=\"operator\">=</span> Int(fps + <span class=\"number\">0.5</span>)</span><br><span class=\"line\">            print(<span class=\"string\">&quot;帧率：\\(intFps)&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>CADisplayLink</code> 实现的 FPS 在生产场景中只有指导意义，不能代表真实的 FPS。因为基于 <code>CADisplayLink</code> 实现的 FPS 无法完全检测出当前 <strong>Core Animation</strong> 的性能情况，只能检测出当前 <strong>RunLoop</strong> 的帧率。</p>\n<h2 id=\"主线程卡顿监控\"><a href=\"#主线程卡顿监控\" class=\"headerlink\" title=\"主线程卡顿监控\"></a>主线程卡顿监控</h2><p>主线程卡顿监控方案的原理是 <strong>通过子线程监控主线程的 RunLoop，判断两个状态区域之间的耗时是否达到一定阈值</strong>。因为主线程绝大部分计算或绘制任务都是以 RunLoop 为单位发生。单次 RunLoop 如果时长超过 16ms，就会导致 UI 体验的卡顿。</p>\n<p>美团的移动端性能监控方案 Hertz 采用的就是这种方式。</p>\n<p><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7/%E5%8D%A1%E9%A1%BF%E7%9B%91%E6%8E%A7%E6%B5%81%E7%A8%8B.png\"></p>\n<p>首先我们需要了解一下 RunLoop 的原理。</p>\n<h3 id=\"RunLoop-定义\"><a href=\"#RunLoop-定义\" class=\"headerlink\" title=\"RunLoop 定义\"></a>RunLoop 定义</h3><p>RunLoop 是 iOS 事件响应与任务处理最核心的机制。当有持续的异步任务需求时，我们会创建一个独立的生命周期可控的线程。<strong>RunLoop 就是控制线程生命周期并接收事件进行处理的机制</strong>。</p>\n<h3 id=\"RunLoop-机制\"><a href=\"#RunLoop-机制\" class=\"headerlink\" title=\"RunLoop 机制\"></a>RunLoop 机制</h3><p><strong>主线程（有 RunLoop 的线程）几乎所有函数都从以下六个函数之一的函数调起：</strong></p>\n<ol>\n<li><code>CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION</code><ol>\n<li>CFRunloop is calling out to an abserver callback function</li>\n<li>用于向外部报告 RunLoop 当前状态的改变，框架中很多机制都由 RunLoopObserver 触发，如：CAAnimation</li>\n</ol>\n</li>\n<li><code>CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK</code><ol>\n<li>CFRunloop is calling out to a block</li>\n<li>消息通知、非延迟的 perform、dispatch 调用、block 回调、KVO</li>\n</ol>\n</li>\n<li><code>CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE</code><ol>\n<li>CFRunloop is servicing the main dispatch queue</li>\n<li>执行主队列上的任务</li>\n</ol>\n</li>\n<li><code>CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION</code><ol>\n<li>CFRunloop is calling out to a timer callback function</li>\n<li>基于定时器的延迟的 perfrom，dispatch 调用</li>\n</ol>\n</li>\n<li><code>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION</code><ol>\n<li>CFRunloop is calling out to a source 0 perform function</li>\n<li>处理 App 内部事件、App自己负责管理（触发），如：<code>UIEvent</code>、<code>CFSocket</code>。普通函数调用，系统调用</li>\n</ol>\n</li>\n<li><code>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION</code><ol>\n<li>CFRunloop is calling out to a source 1 perform function</li>\n<li>由 RunLoop 和内核管理，Mach port 驱动，如：<code>CFMachPort</code>、<code>CFMessagePort</code><h3 id=\"RunLoop-运行时\"><a href=\"#RunLoop-运行时\" class=\"headerlink\" title=\"RunLoop 运行时\"></a>RunLoop 运行时</h3></li>\n</ol>\n</li>\n</ol>\n<p>如下所示为 <code>CFRunLoop</code> 源码中的核心方法 <code>CFRunLoopRun</code> 简化后的主要逻辑。 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int32_t</span> __CFRunLoopRun() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 通知 Observers：即将进入 RunLoop</span></span><br><span class=\"line\">    __CFRunLoopDoObservers(KCFRunLoopEntry);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 通知Observers：即将要处理 timer</span></span><br><span class=\"line\">        __CFRunLoopDoObservers(kCFRunLoopBeforeTimers);</span><br><span class=\"line\">        <span class=\"comment\">// 3. 通知Observers：即将要处理 source</span></span><br><span class=\"line\">        __CFRunLoopDoObservers(kCFRunLoopBeforeSources);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 处理非延迟的主线程调用</span></span><br><span class=\"line\">        __CFRunLoopDoBlocks();</span><br><span class=\"line\">        <span class=\"comment\">// 处理 UIEvent 事件</span></span><br><span class=\"line\">        __CFRunLoopDoSource0();</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// GCD dispatch main queue</span></span><br><span class=\"line\">        <span class=\"built_in\">CheckIfExistMessagesInMainDispatchQueue</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 4. 通知 Observers：即将进入休眠等待</span></span><br><span class=\"line\">        __CFRunLoopDoObservers(kCFRunLoopBeforeWaiting);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 等待内核mach_msg事件</span></span><br><span class=\"line\">        <span class=\"type\">mach_port_t</span> wakeUpPort = <span class=\"built_in\">SleepAndWaitForWakingUpPorts</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// mach_msg_trap</span></span><br><span class=\"line\">        <span class=\"comment\">// 休眠中 Zzz...</span></span><br><span class=\"line\">        <span class=\"comment\">// Received mach_msg, wake up</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 5. 通知 Observers：从休眠等待中醒来</span></span><br><span class=\"line\">        __CFRunLoopDoObservers(kCFRunLoopAfterWaiting);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wakeUpPort == timerPort) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理因timer的唤醒</span></span><br><span class=\"line\">            __CFRunLoopDoTimers();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (wakeUpPort == mainDispatchQueuePort) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理异步方法唤醒，如：dispatch_async</span></span><br><span class=\"line\">            __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// UI 刷新，动画显示</span></span><br><span class=\"line\">            __CFRunLoopDoSource1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 再次确保是否有同步的方法需要调用</span></span><br><span class=\"line\">        __CFRunLoopDoBlocks()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!stop &amp;&amp; !timeout);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 6. 通知 Observers：即将退出runloop</span></span><br><span class=\"line\">    __CFRunLoopDoObservers(CFRunLoopExit);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RunLoop 在运行时一直在向外部报告当前状态的更新，其状态定义如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">CF_OPTIONS</span><span class=\"params\">(CFOptionFlags, CFRunLoopActivity)</span> </span>&#123;</span><br><span class=\"line\">    kCFRunLoopEntry ,           <span class=\"comment\">// 进入 loop</span></span><br><span class=\"line\">    kCFRunLoopBeforeTimers ,    <span class=\"comment\">// 触发 Timer 回调</span></span><br><span class=\"line\">    kCFRunLoopBeforeSources ,   <span class=\"comment\">// 触发 Source0 回调</span></span><br><span class=\"line\">    kCFRunLoopBeforeWaiting ,   <span class=\"comment\">// 等待 mach_port 消息</span></span><br><span class=\"line\">    kCFRunLoopAfterWaiting ,    <span class=\"comment\">// 接收 mach_port 消息</span></span><br><span class=\"line\">    kCFRunLoopExit ,            <span class=\"comment\">// 退出 loop</span></span><br><span class=\"line\">    kCFRunLoopAllActivities     <span class=\"comment\">// loop 所有状态改变</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 RunLoop 运行逻辑中，不难发现 NSRunLoop 调用方法主要在于两个状态区间：</p>\n<ul>\n<li><code>kCFRunLoopBeforeSources</code> 和 <code>kCFRunLoopBeforeWaiting</code> 之间</li>\n<li><code>kCFRunLoopAfterWaiting</code> 之后</li>\n<li><em>如果这两个时间内耗时太久而无法进入下一步，可以线程受阻。如果这个线程时主线程，表现出来就是出现了卡顿。</em>*</li>\n</ul>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>我们可以通过 <code>CFRunLoopObserverRef</code> 实时获取 <code>NSRunLoop</code> 的状态。具体使用方法如下：</p>\n<p>首先创建一个 <code>CFRunLoopObserverContext</code> 观察者 <code>observer</code>。然后将观察者 <code>observer</code> 添加到主线程 RunLoop 的 <code>kCFRunLoopCommonModes</code> 模式下进行观察。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)registerObserver &#123;</span><br><span class=\"line\">    CFRunLoopObserverContext context = &#123;<span class=\"number\">0</span>,(__bridge <span class=\"type\">void</span>*)self,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    CFRunLoopObserverRef observer = <span class=\"built_in\">CFRunLoopObserverCreate</span>(kCFAllocatorDefault,</span><br><span class=\"line\">                                                            kCFRunLoopAllActivities,</span><br><span class=\"line\">                                                            YES,</span><br><span class=\"line\">                                                            <span class=\"number\">0</span>,</span><br><span class=\"line\">                                                            &amp;runLoopObserverCallBack,</span><br><span class=\"line\">                                                            &amp;context);</span><br><span class=\"line\">    <span class=\"built_in\">CFRunLoopAddObserver</span>(<span class=\"built_in\">CFRunLoopGetMain</span>(), observer, kCFRunLoopCommonModes);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">runLoopObserverCallBack</span><span class=\"params\">(CFRunLoopObserverRef observer, CFRunLoopActivity activity, <span class=\"type\">void</span> *info)</span> </span>&#123;</span><br><span class=\"line\">    MyClass *object = (__bridge MyClass*)info;</span><br><span class=\"line\">    object-&gt;activity = activity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，创建一个持续的子线程专门用来监控主线程的 RunLoop 状态。为了让计算更精确，需要让子线程更及时的获知主线程 RunLoop 状态变化，<code>dispatch_semaphore_t</code> 是一个不错的选择。另外，卡顿需要覆盖多次连续短时间卡顿和单次长时间卡顿两种情景，所以判定条件也需要做适当优化。优化后的代码实现如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)registerObserver &#123;</span><br><span class=\"line\">    CFRunLoopObserverContext context = &#123;<span class=\"number\">0</span>,(__bridge <span class=\"type\">void</span>*)self,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    CFRunLoopObserverRef observer = <span class=\"built_in\">CFRunLoopObserverCreate</span>(kCFAllocatorDefault,</span><br><span class=\"line\">                                                            kCFRunLoopAllActivities,</span><br><span class=\"line\">                                                            YES,</span><br><span class=\"line\">                                                            <span class=\"number\">0</span>,</span><br><span class=\"line\">                                                            &amp;runLoopObserverCallBack,</span><br><span class=\"line\">                                                            &amp;context);</span><br><span class=\"line\">    <span class=\"built_in\">CFRunLoopAddObserver</span>(<span class=\"built_in\">CFRunLoopGetMain</span>(), observer, kCFRunLoopCommonModes);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建信号</span></span><br><span class=\"line\">    semaphore = <span class=\"built_in\">dispatch_semaphore_create</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在子线程监控时长</span></span><br><span class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"built_in\">dispatch_get_global_queue</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (YES) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms)</span></span><br><span class=\"line\">            <span class=\"type\">long</span> st = <span class=\"built_in\">dispatch_semaphore_wait</span>(semaphore, <span class=\"built_in\">dispatch_time</span>(DISPATCH_TIME_NOW, <span class=\"number\">50</span>*NSEC_PER_MSEC));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (st != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (activity == kCFRunLoopBeforeSources || activity==kCFRunLoopAfterWaiting) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (++timeoutCount &lt; <span class=\"number\">5</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"built_in\">NSLog</span>(@<span class=\"string\">&quot;好像有点儿卡哦&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            timeoutCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">runLoopObserverCallBack</span><span class=\"params\">(CFRunLoopObserverRef observer, CFRunLoopActivity activity, <span class=\"type\">void</span> *info)</span> </span>&#123;</span><br><span class=\"line\">    MyClass *object = (__bridge MyClass*)info;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 记录状态值</span></span><br><span class=\"line\">    object-&gt;activity = activity;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 发送信号</span></span><br><span class=\"line\">    <span class=\"type\">dispatch_semaphore_t</span> semaphore = moniotr-&gt;semaphore;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_semaphore_signal</span>(semaphore);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 检测到卡顿时应该立刻获取卡顿的方法堆栈信息，并推送至服务端共开发者分析，从而解决卡顿问题。<br>获取堆栈信息:</p>\n<p><strong>直接使用 PLCrashReporter 第三方开源库</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PLCrashReporterConfig *config = [[PLCrashReporterConfig alloc] initWithSignalHandlerType:PLCrashReporterSignalHandlerTypeBSD     </span><br><span class=\"line\">                                                                   symbolicationStrategy:PLCrashReporterSymbolicationStrategyAll];</span><br><span class=\"line\">PLCrashReporter *reporter = [[PLCrashReporter alloc] initWithConfiguration:config];</span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">NSData *lagData = [reporter generateLiveReport];</span><br><span class=\"line\"><span class=\"comment\">// 转换成 PLCrashReport 对象</span></span><br><span class=\"line\">PLCrashReport *lagReport = [[PLCrashReport alloc] initWithData:lagData error:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\"><span class=\"comment\">// 进行字符串格式化处理</span></span><br><span class=\"line\">NSString *lagReportString = [PLCrashReportTextFormatter stringValueForCrashReport:lagReport withTextFormat:PLCrashReportTextFormatiOS];</span><br><span class=\"line\"><span class=\"comment\">// 将字符串上传服务器</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(@<span class=\"string\">&quot;lag happen, detail below: \\n %@&quot;</span>,lagReportString);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.jianshu.com/p/c35a81c3b9eb\">CADisplayLink</a></p>\n<p><a href=\"https://opensource.apple.com/source/CF/CF-1152.14/CFRunLoop.c.auto.html\">Runloop</a></p>\n<p><a href=\"https://github.com/aozhimin/iOS-Monitor-Platform#fps\">iOS 性能监控 SDK —— Wedjat（华狄特）开发过程的调研和整理</a></p>\n"},{"title":"CPU & 内存监控","date":"2021-03-24T12:12:32.000Z","_content":"\n## CPU\n\nCPU 是移动设备最重要的计算资源，设计糟糕的应用可能会造成 CPU 持续以高负载运行，一方面会导致用户使用过程遭遇卡顿；另一方面也会导致手机发热发烫，电量被快速消耗完，严重影响用户体验。\n\n### 相关系统原理\n\niOS 是基于 Apple Darwin 内核，由 kernel、XNU 和 Runtime 组成，XNU（X is not UNIX） 是 Darwin 的内核，一个混合内核，由 Mach 微内核和 BSD 组成。Mach 内核是轻量级的平台，只能完成操作系统最基本的职责，如：进程和线程、虚拟内存管理、任务调度、进程通信和消息传递机制。其他的工作，如文件操作和设备访问，都是由 BSD 层实现。\n\n事实上，Mach 并不能识别 UNIX 中的所有进程，而是采用一种稍微不同的方式，使用了比进程更轻量级的概念：**任务（Task）**。经典的 UNIX 采用了自上而下的方式：最基本的对象是进程，然后进一步划分为一个或多个线程；Mach 则采用了自底向上的方式：最基本的单元是线程，一个或多个线程包含在一个任务中。\n\n>**线程：**线程定义了 Mach 中最小的执行单元。线程表示的是底层的机器寄存器状态以及各种调度统计数据，其从设计上提供了调度所需要的大量信息。\n>**任务：**任务是一种容器对象，虚拟内存空间和其他资源都是通过这个容器对象管理的。这些资源包括设备和其他句柄。资源进一步被抽象为端口。因此，资源的共享实际上相当于允许对对应端口进行访问。\n严格来说，Mach 的任务并不是其它操作系统中所谓的进程，因为 Mach 作为一个微内核的操作系统，并没有提供“进程”的逻辑，而只提供了最基本的实现。在 BSD 模型中，这两个概念有一对一的简单映射，每个 BSD 进程（即 OS X 进程）都在底层关联了一个 Mach 任务对象。实现这种映射的方法是指定一个透明的指针 `bsd_info`，Mach 对 `bsd_info` 完全无知。Mach 将内核也用任务表示（全局范围称为 `kernel_task`），尽管该任务没有对应的 PID，但可以想象 PID 为 0。\n\n下图所示为权威著作《OS X Internal: A System Approach》中提供的 Mach OS X 中进程子系统组成的概念图。与 Mac OS X 类似，iOS 的线程技术也是基于 Mach 线程技术实现的。\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/CPU%26%E5%86%85%E5%AD%98%E7%9B%91%E6%8E%A7/image.png)\n\n Mach 层中的 `thread_basic_info` 结构体的定义：\n\n```c++\n struct thread_basic_info {\n        time_value_t    user_time;      // 用户运行时长\n        time_value_t    system_time;    // 系统运行时长\n        integer_t       cpu_usage;      // CPU 使用率\n        policy_t        policy;         // 调度策略\n        integer_t       run_state;      // 运行状态\n        integer_t       flags;          // 各种标记\n        integer_t       suspend_count;  // 暂停线程的计数\n        integer_t       sleep_time;     // 休眠时间\n};\n```\n   \n### APP 的 CPU 占用率\n\n对于app使用率的获取，网上的方案还是比较统一的。\n\n1. 使用task_threads函数，获取当前App行程中所有的线程列表。\n2. 对于第一步中获取的线程列表进行遍历，通过thread_info函数获取每一个非闲置线程的cpu使用率，进行相加。\n3. 使用vm_deallocate函数释放资源。\n如下所示为 **CPU 占用率** 的代码实现：\n\n```c++\n+ (CGFloat)cpuUsageForApp {\n    kern_return_t kr;\n    thread_array_t         thread_list;\n    mach_msg_type_number_t thread_count;\n    thread_info_data_t     thinfo;\n    mach_msg_type_number_t thread_info_count;\n    thread_basic_info_t basic_info_th;\n    \n    // get threads in the task\n    //  获取当前进程中 线程列表\n    kr = task_threads(mach_task_self(), &thread_list, &thread_count);\n    if (kr != KERN_SUCCESS)\n        return -1;\n \n    float tot_cpu = 0;\n    \n    for (int j = 0; j < thread_count; j++) {\n        thread_info_count = THREAD_INFO_MAX;\n        //获取每一个线程信息\n        kr = thread_info(thread_list[j], THREAD_BASIC_INFO,\n                         (thread_info_t)thinfo, &thread_info_count);\n        if (kr != KERN_SUCCESS)\n            return -1;\n        \n        basic_info_th = (thread_basic_info_t)thinfo;\n        if (!(basic_info_th->flags & TH_FLAGS_IDLE)) {\n            // cpu_usage : Scaled cpu usage percentage. The scale factor is TH_USAGE_SCALE.\n            //宏定义TH_USAGE_SCALE返回CPU处理总频率：\n            tot_cpu += basic_info_th->cpu_usage / (float)TH_USAGE_SCALE;\n        }\n        \n    } // for each thread\n    \n    // 注意方法最后要调用 vm_deallocate，防止出现内存泄漏\n    kr = vm_deallocate(mach_task_self(), (vm_offset_t)thread_list, thread_count * sizeof(thread_t));\n    assert(kr == KERN_SUCCESS);\n    \n    return tot_cpu;\n}\n```\n\n## Memory\n\n### 相关系统原理\n\n内存是有限且系统共享的资源，一个程序占用越多，系统和其他程序所能用的就越少。程序启动前都需要先加载到内存中，并且在程序运行过程中的数据操作也会占用一定的内存资源。减少内存占用也能同时减少其对 CPU 时间维度上的消耗，从而使不仅使 App 以及整个系统也都能表现的更好。\n\nMacOS 和 iOS 都采用了虚拟内存技术来突破物理内存的大小限制，每个进程都有一段由多个大小相同的页（Page）所构成的逻辑地址空间。处理器和内存管理单元（MMU，Memory Management Unit）维护着由逻辑地址到物理地址的 **页面映射表**（简称 **页表**），当程序访问逻辑内存地址时，由 MMU 根据页表将逻辑地址转换为真实的物理地址。在早期的苹果设备中，每个页的大小为 4KB；基于 A7 和 A8 处理器的系统为 64 位程序提供了 16KB 的虚拟内存分页和 4KB 的物理内存分页；在 A9 之后，虚拟内存和物理内存的分页大小都达到了 16KB。\n\n虚拟内存分页（Virtual Page，VP）有两种类型：\n\n1. Clean：指能够被系统清理出内存且在需要时能重新加载的数据，包括：\n    1. 内存映射文件\n    2. Frameworks 中的 __DATA_CONST 部分\n    3. 应用的二进制可执行文件\n2. Dirty：指不能被系统回收的内存占用，包括：\n    1. 所有堆上的对象\n    2. 图片解码缓冲数据\n    3. Framework 中的 **DATA 和**DATA_DIRTY 部分\n由于内存容量和读写寿命的限制，iOS 上没有 Disk Swap 机制，取而代之使用 **Compressed Memory** 技术。 Disk Swap 是指在 macOS 以及一些其他桌面操作系统中，当内存可用资源紧张时，系统将内存中的内容写入磁盘中的backing store（Swapping out），并且在需要访问时从磁盘中再读入 RAM（Swapping in）。与大多数 UNIX 系统不同的是，macOS 没有预先分配磁盘中的一部分作为 backing store，而是利用引导分区所有可用的磁盘空间。\n\n苹果最初只是公开了从 OS X Mavericks 开始使用 Compressed Memory 技术，但 iOS 系统也从 iOS 7 开始悄悄地使用。\n\nCompressed Memory 技术在内存紧张时能够将最近使用过的内存占用压缩至原有大小的一半以下，并且能够在需要时解压复用。它在节省内存的同时提高了系统的响应速度，其特点可以归结为：\n\n* 减少了不活跃内存占用\n* 改善电源效率，通过压缩减少磁盘 IO 带来的损耗\n* 压缩/解压非常快，能够尽可能减少 CPU 的时间开销\n* 支持多核操作\n本质上，Compressed Memory 也是 Dirty Memory。因此，**memory footprint = dirty size + compressed size**，这也是我们需要并且能够尝试去减少的内存占用。\n\n### App 使用的内存\n\nmach_task_basic_info 结构体存储了 Mach task 的内存使用信息，其中 resident_size 就是应用使用的物理内存大小，virtual_size 是虚拟内存大小。\n\n```c++\n#define MACH_TASK_BASIC_INFO     20         /* always 64-bit basic info */\nstruct mach_task_basic_info {\n        mach_vm_size_t  virtual_size;       /* virtual memory size (bytes) */\n        mach_vm_size_t  resident_size;      /* resident memory size (bytes) */\n        mach_vm_size_t  resident_size_max;  /* maximum resident memory size (bytes) */\n        time_value_t    user_time;          /* total user run time for\n                                               terminated threads */\n        time_value_t    system_time;        /* total system run time for\n                                               terminated threads */\n        policy_t        policy;             /* default policy for new threads */\n        integer_t       suspend_count;      /* suspend count for task */\n};\n```\ntask_info API 根据指定的 flavor 类型返回 target_task 的信息。\n```c++\nkern_return_t task_info\n(\n    task_name_t target_task,\n    task_flavor_t flavor,\n    task_info_t task_info_out,\n    mach_msg_type_number_t *task_info_outCnt\n);\n```\n于是得到获取当前 App Memory 的使用情况\n```c++\n- (NSUInteger)getResidentMemory\n{\n    struct mach_task_basic_info info;\n    mach_msg_type_number_t count = MACH_TASK_BASIC_INFO_COUNT;\n    int r = task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)& info, & count);\n    if (r == KERN_SUCCESS)\n    {\n        return info.resident_size;\n    }\n    else\n    {\n        return -1;\n    }\n}\n```\n将上述代码采集到的 App RAM 的使用值与 Xcode 的 Debug Gauges 的 memory 对比，会发现代码会与 Debug Gauges 显示的值存在差异，有时甚至会差几百 MB，那么究竟怎样才能获取到应用使用的真实内存值呢？\n我们先来看看 WebKit 源码中是怎样使用的，在 [MemoryFootprintCocoa.cpp](https://github.com/WebKit/webkit/blob/52bc6f0a96a062cb0eb76e9a81497183dc87c268/Source/WTF/wtf/cocoa/MemoryFootprintCocoa.cpp) 文件中，代码如下：\n\n```c++\nsize_t memoryFootprint()\n{\n    task_vm_info_data_t vmInfo;\n    mach_msg_type_number_t count = TASK_VM_INFO_COUNT;\n    kern_return_t result = task_info(mach_task_self(), TASK_VM_INFO, (task_info_t) &vmInfo, &count);\n    if (result != KERN_SUCCESS)\n        return 0;\n    return static_cast<size_t>(vmInfo.phys_footprint);\n}\n```\n可以看到代码使用的不是 resident_size，而是 phys_footprint，phys_footprint 同样是 task_info 的成员变量。\n当我们将获取内存的实现从 resident_size 换成 phys_footprint 时，于是代码获取的内存值就和 Xcode Debug Gauges 一致了。\n\n```c++\n- (NSUInteger)getApplicationUsedMemory\n{\n    struct mach_task_basic_info info;\n    mach_msg_type_number_t count = MACH_TASK_BASIC_INFO_COUNT;\n    int r = task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)& info, & count);\n    if (r == KERN_SUCCESS)\n    {\n        return info.phys_footprint;\n    }\n    else\n    {\n        return -1;\n    }\n}\n```\n### 获取设备总内存：\n\n```c++\n\n+ (NSUInteger)totalMemoryForDevice{\n    return [NSProcessInfo processInfo].physicalMemory/1024/1024;\n}\n```\n\n[DoKit](https://github.com/didi/DoKit)\n[GT](https://github.com/Tencent/GT)\n[iOS-System-Services](https://github.com/Shmoopi/iOS-System-Services)\n[kern_memorystatus](https://github.com/apple/darwin-xnu/blob/0a798f6738bc1db01281fc08ae024145e84df927/bsd/kern/kern_memorystatus.c)\n[NeteaseAPM iOS SDK](https://www.infoq.cn/article/netease-ios-sdk-neteaseapm-technology-share/)[CPU-Dasher-for-iOS](https://github.com/zenny-chen/CPU-Dasher-for-iOS)\n[HookCppInitilizers](https://github.com/everettjf/Yolo/blob/master/HookCppInitilizers/hook_cpp_init.mm)\n[a-method-of-hook-objective-c-load](https://everettjf.github.io/2017/01/06/a-method-of-hook-objective-c-load/)\n[TimeProfiler](https://github.com/maniackk/TimeProfiler/tree/master)\n[objc-file.mm](https://github.com/tripleCC/Laboratory/blob/5c084263d79973805649b89d166b50751045e937/AppleSources/objc4-750/runtime/objc-file.mm#L32-L47)\n\n\n","source":"_posts/CPU & 内存监控.md","raw":"---\ntitle: CPU & 内存监控\ndate: 2021-03-24 20:12:32\ncategories: \n- 性能\ntags:\n---\n\n## CPU\n\nCPU 是移动设备最重要的计算资源，设计糟糕的应用可能会造成 CPU 持续以高负载运行，一方面会导致用户使用过程遭遇卡顿；另一方面也会导致手机发热发烫，电量被快速消耗完，严重影响用户体验。\n\n### 相关系统原理\n\niOS 是基于 Apple Darwin 内核，由 kernel、XNU 和 Runtime 组成，XNU（X is not UNIX） 是 Darwin 的内核，一个混合内核，由 Mach 微内核和 BSD 组成。Mach 内核是轻量级的平台，只能完成操作系统最基本的职责，如：进程和线程、虚拟内存管理、任务调度、进程通信和消息传递机制。其他的工作，如文件操作和设备访问，都是由 BSD 层实现。\n\n事实上，Mach 并不能识别 UNIX 中的所有进程，而是采用一种稍微不同的方式，使用了比进程更轻量级的概念：**任务（Task）**。经典的 UNIX 采用了自上而下的方式：最基本的对象是进程，然后进一步划分为一个或多个线程；Mach 则采用了自底向上的方式：最基本的单元是线程，一个或多个线程包含在一个任务中。\n\n>**线程：**线程定义了 Mach 中最小的执行单元。线程表示的是底层的机器寄存器状态以及各种调度统计数据，其从设计上提供了调度所需要的大量信息。\n>**任务：**任务是一种容器对象，虚拟内存空间和其他资源都是通过这个容器对象管理的。这些资源包括设备和其他句柄。资源进一步被抽象为端口。因此，资源的共享实际上相当于允许对对应端口进行访问。\n严格来说，Mach 的任务并不是其它操作系统中所谓的进程，因为 Mach 作为一个微内核的操作系统，并没有提供“进程”的逻辑，而只提供了最基本的实现。在 BSD 模型中，这两个概念有一对一的简单映射，每个 BSD 进程（即 OS X 进程）都在底层关联了一个 Mach 任务对象。实现这种映射的方法是指定一个透明的指针 `bsd_info`，Mach 对 `bsd_info` 完全无知。Mach 将内核也用任务表示（全局范围称为 `kernel_task`），尽管该任务没有对应的 PID，但可以想象 PID 为 0。\n\n下图所示为权威著作《OS X Internal: A System Approach》中提供的 Mach OS X 中进程子系统组成的概念图。与 Mac OS X 类似，iOS 的线程技术也是基于 Mach 线程技术实现的。\n![](https://raw.githubusercontent.com/shijianmei/blog_Images/main/CPU%26%E5%86%85%E5%AD%98%E7%9B%91%E6%8E%A7/image.png)\n\n Mach 层中的 `thread_basic_info` 结构体的定义：\n\n```c++\n struct thread_basic_info {\n        time_value_t    user_time;      // 用户运行时长\n        time_value_t    system_time;    // 系统运行时长\n        integer_t       cpu_usage;      // CPU 使用率\n        policy_t        policy;         // 调度策略\n        integer_t       run_state;      // 运行状态\n        integer_t       flags;          // 各种标记\n        integer_t       suspend_count;  // 暂停线程的计数\n        integer_t       sleep_time;     // 休眠时间\n};\n```\n   \n### APP 的 CPU 占用率\n\n对于app使用率的获取，网上的方案还是比较统一的。\n\n1. 使用task_threads函数，获取当前App行程中所有的线程列表。\n2. 对于第一步中获取的线程列表进行遍历，通过thread_info函数获取每一个非闲置线程的cpu使用率，进行相加。\n3. 使用vm_deallocate函数释放资源。\n如下所示为 **CPU 占用率** 的代码实现：\n\n```c++\n+ (CGFloat)cpuUsageForApp {\n    kern_return_t kr;\n    thread_array_t         thread_list;\n    mach_msg_type_number_t thread_count;\n    thread_info_data_t     thinfo;\n    mach_msg_type_number_t thread_info_count;\n    thread_basic_info_t basic_info_th;\n    \n    // get threads in the task\n    //  获取当前进程中 线程列表\n    kr = task_threads(mach_task_self(), &thread_list, &thread_count);\n    if (kr != KERN_SUCCESS)\n        return -1;\n \n    float tot_cpu = 0;\n    \n    for (int j = 0; j < thread_count; j++) {\n        thread_info_count = THREAD_INFO_MAX;\n        //获取每一个线程信息\n        kr = thread_info(thread_list[j], THREAD_BASIC_INFO,\n                         (thread_info_t)thinfo, &thread_info_count);\n        if (kr != KERN_SUCCESS)\n            return -1;\n        \n        basic_info_th = (thread_basic_info_t)thinfo;\n        if (!(basic_info_th->flags & TH_FLAGS_IDLE)) {\n            // cpu_usage : Scaled cpu usage percentage. The scale factor is TH_USAGE_SCALE.\n            //宏定义TH_USAGE_SCALE返回CPU处理总频率：\n            tot_cpu += basic_info_th->cpu_usage / (float)TH_USAGE_SCALE;\n        }\n        \n    } // for each thread\n    \n    // 注意方法最后要调用 vm_deallocate，防止出现内存泄漏\n    kr = vm_deallocate(mach_task_self(), (vm_offset_t)thread_list, thread_count * sizeof(thread_t));\n    assert(kr == KERN_SUCCESS);\n    \n    return tot_cpu;\n}\n```\n\n## Memory\n\n### 相关系统原理\n\n内存是有限且系统共享的资源，一个程序占用越多，系统和其他程序所能用的就越少。程序启动前都需要先加载到内存中，并且在程序运行过程中的数据操作也会占用一定的内存资源。减少内存占用也能同时减少其对 CPU 时间维度上的消耗，从而使不仅使 App 以及整个系统也都能表现的更好。\n\nMacOS 和 iOS 都采用了虚拟内存技术来突破物理内存的大小限制，每个进程都有一段由多个大小相同的页（Page）所构成的逻辑地址空间。处理器和内存管理单元（MMU，Memory Management Unit）维护着由逻辑地址到物理地址的 **页面映射表**（简称 **页表**），当程序访问逻辑内存地址时，由 MMU 根据页表将逻辑地址转换为真实的物理地址。在早期的苹果设备中，每个页的大小为 4KB；基于 A7 和 A8 处理器的系统为 64 位程序提供了 16KB 的虚拟内存分页和 4KB 的物理内存分页；在 A9 之后，虚拟内存和物理内存的分页大小都达到了 16KB。\n\n虚拟内存分页（Virtual Page，VP）有两种类型：\n\n1. Clean：指能够被系统清理出内存且在需要时能重新加载的数据，包括：\n    1. 内存映射文件\n    2. Frameworks 中的 __DATA_CONST 部分\n    3. 应用的二进制可执行文件\n2. Dirty：指不能被系统回收的内存占用，包括：\n    1. 所有堆上的对象\n    2. 图片解码缓冲数据\n    3. Framework 中的 **DATA 和**DATA_DIRTY 部分\n由于内存容量和读写寿命的限制，iOS 上没有 Disk Swap 机制，取而代之使用 **Compressed Memory** 技术。 Disk Swap 是指在 macOS 以及一些其他桌面操作系统中，当内存可用资源紧张时，系统将内存中的内容写入磁盘中的backing store（Swapping out），并且在需要访问时从磁盘中再读入 RAM（Swapping in）。与大多数 UNIX 系统不同的是，macOS 没有预先分配磁盘中的一部分作为 backing store，而是利用引导分区所有可用的磁盘空间。\n\n苹果最初只是公开了从 OS X Mavericks 开始使用 Compressed Memory 技术，但 iOS 系统也从 iOS 7 开始悄悄地使用。\n\nCompressed Memory 技术在内存紧张时能够将最近使用过的内存占用压缩至原有大小的一半以下，并且能够在需要时解压复用。它在节省内存的同时提高了系统的响应速度，其特点可以归结为：\n\n* 减少了不活跃内存占用\n* 改善电源效率，通过压缩减少磁盘 IO 带来的损耗\n* 压缩/解压非常快，能够尽可能减少 CPU 的时间开销\n* 支持多核操作\n本质上，Compressed Memory 也是 Dirty Memory。因此，**memory footprint = dirty size + compressed size**，这也是我们需要并且能够尝试去减少的内存占用。\n\n### App 使用的内存\n\nmach_task_basic_info 结构体存储了 Mach task 的内存使用信息，其中 resident_size 就是应用使用的物理内存大小，virtual_size 是虚拟内存大小。\n\n```c++\n#define MACH_TASK_BASIC_INFO     20         /* always 64-bit basic info */\nstruct mach_task_basic_info {\n        mach_vm_size_t  virtual_size;       /* virtual memory size (bytes) */\n        mach_vm_size_t  resident_size;      /* resident memory size (bytes) */\n        mach_vm_size_t  resident_size_max;  /* maximum resident memory size (bytes) */\n        time_value_t    user_time;          /* total user run time for\n                                               terminated threads */\n        time_value_t    system_time;        /* total system run time for\n                                               terminated threads */\n        policy_t        policy;             /* default policy for new threads */\n        integer_t       suspend_count;      /* suspend count for task */\n};\n```\ntask_info API 根据指定的 flavor 类型返回 target_task 的信息。\n```c++\nkern_return_t task_info\n(\n    task_name_t target_task,\n    task_flavor_t flavor,\n    task_info_t task_info_out,\n    mach_msg_type_number_t *task_info_outCnt\n);\n```\n于是得到获取当前 App Memory 的使用情况\n```c++\n- (NSUInteger)getResidentMemory\n{\n    struct mach_task_basic_info info;\n    mach_msg_type_number_t count = MACH_TASK_BASIC_INFO_COUNT;\n    int r = task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)& info, & count);\n    if (r == KERN_SUCCESS)\n    {\n        return info.resident_size;\n    }\n    else\n    {\n        return -1;\n    }\n}\n```\n将上述代码采集到的 App RAM 的使用值与 Xcode 的 Debug Gauges 的 memory 对比，会发现代码会与 Debug Gauges 显示的值存在差异，有时甚至会差几百 MB，那么究竟怎样才能获取到应用使用的真实内存值呢？\n我们先来看看 WebKit 源码中是怎样使用的，在 [MemoryFootprintCocoa.cpp](https://github.com/WebKit/webkit/blob/52bc6f0a96a062cb0eb76e9a81497183dc87c268/Source/WTF/wtf/cocoa/MemoryFootprintCocoa.cpp) 文件中，代码如下：\n\n```c++\nsize_t memoryFootprint()\n{\n    task_vm_info_data_t vmInfo;\n    mach_msg_type_number_t count = TASK_VM_INFO_COUNT;\n    kern_return_t result = task_info(mach_task_self(), TASK_VM_INFO, (task_info_t) &vmInfo, &count);\n    if (result != KERN_SUCCESS)\n        return 0;\n    return static_cast<size_t>(vmInfo.phys_footprint);\n}\n```\n可以看到代码使用的不是 resident_size，而是 phys_footprint，phys_footprint 同样是 task_info 的成员变量。\n当我们将获取内存的实现从 resident_size 换成 phys_footprint 时，于是代码获取的内存值就和 Xcode Debug Gauges 一致了。\n\n```c++\n- (NSUInteger)getApplicationUsedMemory\n{\n    struct mach_task_basic_info info;\n    mach_msg_type_number_t count = MACH_TASK_BASIC_INFO_COUNT;\n    int r = task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)& info, & count);\n    if (r == KERN_SUCCESS)\n    {\n        return info.phys_footprint;\n    }\n    else\n    {\n        return -1;\n    }\n}\n```\n### 获取设备总内存：\n\n```c++\n\n+ (NSUInteger)totalMemoryForDevice{\n    return [NSProcessInfo processInfo].physicalMemory/1024/1024;\n}\n```\n\n[DoKit](https://github.com/didi/DoKit)\n[GT](https://github.com/Tencent/GT)\n[iOS-System-Services](https://github.com/Shmoopi/iOS-System-Services)\n[kern_memorystatus](https://github.com/apple/darwin-xnu/blob/0a798f6738bc1db01281fc08ae024145e84df927/bsd/kern/kern_memorystatus.c)\n[NeteaseAPM iOS SDK](https://www.infoq.cn/article/netease-ios-sdk-neteaseapm-technology-share/)[CPU-Dasher-for-iOS](https://github.com/zenny-chen/CPU-Dasher-for-iOS)\n[HookCppInitilizers](https://github.com/everettjf/Yolo/blob/master/HookCppInitilizers/hook_cpp_init.mm)\n[a-method-of-hook-objective-c-load](https://everettjf.github.io/2017/01/06/a-method-of-hook-objective-c-load/)\n[TimeProfiler](https://github.com/maniackk/TimeProfiler/tree/master)\n[objc-file.mm](https://github.com/tripleCC/Laboratory/blob/5c084263d79973805649b89d166b50751045e937/AppleSources/objc4-750/runtime/objc-file.mm#L32-L47)\n\n\n","slug":"CPU & 内存监控","published":1,"updated":"2023-05-24T07:17:32.896Z","_id":"cli1dgn8g00009szr0lfu873l","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><p>CPU 是移动设备最重要的计算资源，设计糟糕的应用可能会造成 CPU 持续以高负载运行，一方面会导致用户使用过程遭遇卡顿；另一方面也会导致手机发热发烫，电量被快速消耗完，严重影响用户体验。</p>\n<h3 id=\"相关系统原理\"><a href=\"#相关系统原理\" class=\"headerlink\" title=\"相关系统原理\"></a>相关系统原理</h3><p>iOS 是基于 Apple Darwin 内核，由 kernel、XNU 和 Runtime 组成，XNU（X is not UNIX） 是 Darwin 的内核，一个混合内核，由 Mach 微内核和 BSD 组成。Mach 内核是轻量级的平台，只能完成操作系统最基本的职责，如：进程和线程、虚拟内存管理、任务调度、进程通信和消息传递机制。其他的工作，如文件操作和设备访问，都是由 BSD 层实现。</p>\n<p>事实上，Mach 并不能识别 UNIX 中的所有进程，而是采用一种稍微不同的方式，使用了比进程更轻量级的概念：<strong>任务（Task）</strong>。经典的 UNIX 采用了自上而下的方式：最基本的对象是进程，然后进一步划分为一个或多个线程；Mach 则采用了自底向上的方式：最基本的单元是线程，一个或多个线程包含在一个任务中。</p>\n<blockquote>\n<p><strong>线程：</strong>线程定义了 Mach 中最小的执行单元。线程表示的是底层的机器寄存器状态以及各种调度统计数据，其从设计上提供了调度所需要的大量信息。<br><strong>任务：</strong>任务是一种容器对象，虚拟内存空间和其他资源都是通过这个容器对象管理的。这些资源包括设备和其他句柄。资源进一步被抽象为端口。因此，资源的共享实际上相当于允许对对应端口进行访问。<br>严格来说，Mach 的任务并不是其它操作系统中所谓的进程，因为 Mach 作为一个微内核的操作系统，并没有提供“进程”的逻辑，而只提供了最基本的实现。在 BSD 模型中，这两个概念有一对一的简单映射，每个 BSD 进程（即 OS X 进程）都在底层关联了一个 Mach 任务对象。实现这种映射的方法是指定一个透明的指针 <code>bsd_info</code>，Mach 对 <code>bsd_info</code> 完全无知。Mach 将内核也用任务表示（全局范围称为 <code>kernel_task</code>），尽管该任务没有对应的 PID，但可以想象 PID 为 0。</p>\n</blockquote>\n<p>下图所示为权威著作《OS X Internal: A System Approach》中提供的 Mach OS X 中进程子系统组成的概念图。与 Mac OS X 类似，iOS 的线程技术也是基于 Mach 线程技术实现的。<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/CPU%26%E5%86%85%E5%AD%98%E7%9B%91%E6%8E%A7/image.png\"></p>\n<p> Mach 层中的 <code>thread_basic_info</code> 结构体的定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">struct</span> <span class=\"title class_\">thread_basic_info</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">time_value_t</span>    user_time;      <span class=\"comment\">// 用户运行时长</span></span><br><span class=\"line\">        <span class=\"type\">time_value_t</span>    system_time;    <span class=\"comment\">// 系统运行时长</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       cpu_usage;      <span class=\"comment\">// CPU 使用率</span></span><br><span class=\"line\">        <span class=\"type\">policy_t</span>        policy;         <span class=\"comment\">// 调度策略</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       run_state;      <span class=\"comment\">// 运行状态</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       flags;          <span class=\"comment\">// 各种标记</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       suspend_count;  <span class=\"comment\">// 暂停线程的计数</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       sleep_time;     <span class=\"comment\">// 休眠时间</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"APP-的-CPU-占用率\"><a href=\"#APP-的-CPU-占用率\" class=\"headerlink\" title=\"APP 的 CPU 占用率\"></a>APP 的 CPU 占用率</h3><p>对于app使用率的获取，网上的方案还是比较统一的。</p>\n<ol>\n<li>使用task_threads函数，获取当前App行程中所有的线程列表。</li>\n<li>对于第一步中获取的线程列表进行遍历，通过thread_info函数获取每一个非闲置线程的cpu使用率，进行相加。</li>\n<li>使用vm_deallocate函数释放资源。<br>如下所示为 <strong>CPU 占用率</strong> 的代码实现：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (CGFloat)cpuUsageForApp &#123;</span><br><span class=\"line\">    <span class=\"type\">kern_return_t</span> kr;</span><br><span class=\"line\">    <span class=\"type\">thread_array_t</span>         thread_list;</span><br><span class=\"line\">    <span class=\"type\">mach_msg_type_number_t</span> thread_count;</span><br><span class=\"line\">    <span class=\"type\">thread_info_data_t</span>     thinfo;</span><br><span class=\"line\">    <span class=\"type\">mach_msg_type_number_t</span> thread_info_count;</span><br><span class=\"line\">    <span class=\"type\">thread_basic_info_t</span> basic_info_th;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// get threads in the task</span></span><br><span class=\"line\">    <span class=\"comment\">//  获取当前进程中 线程列表</span></span><br><span class=\"line\">    kr = <span class=\"built_in\">task_threads</span>(<span class=\"built_in\">mach_task_self</span>(), &amp;thread_list, &amp;thread_count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (kr != KERN_SUCCESS)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">float</span> tot_cpu = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; thread_count; j++) &#123;</span><br><span class=\"line\">        thread_info_count = THREAD_INFO_MAX;</span><br><span class=\"line\">        <span class=\"comment\">//获取每一个线程信息</span></span><br><span class=\"line\">        kr = <span class=\"built_in\">thread_info</span>(thread_list[j], THREAD_BASIC_INFO,</span><br><span class=\"line\">                         (<span class=\"type\">thread_info_t</span>)thinfo, &amp;thread_info_count);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (kr != KERN_SUCCESS)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        basic_info_th = (<span class=\"type\">thread_basic_info_t</span>)thinfo;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(basic_info_th-&gt;flags &amp; TH_FLAGS_IDLE)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// cpu_usage : Scaled cpu usage percentage. The scale factor is TH_USAGE_SCALE.</span></span><br><span class=\"line\">            <span class=\"comment\">//宏定义TH_USAGE_SCALE返回CPU处理总频率：</span></span><br><span class=\"line\">            tot_cpu += basic_info_th-&gt;cpu_usage / (<span class=\"type\">float</span>)TH_USAGE_SCALE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"comment\">// for each thread</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 注意方法最后要调用 vm_deallocate，防止出现内存泄漏</span></span><br><span class=\"line\">    kr = <span class=\"built_in\">vm_deallocate</span>(<span class=\"built_in\">mach_task_self</span>(), (<span class=\"type\">vm_offset_t</span>)thread_list, thread_count * <span class=\"built_in\">sizeof</span>(<span class=\"type\">thread_t</span>));</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(kr == KERN_SUCCESS);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot_cpu;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h2><h3 id=\"相关系统原理-1\"><a href=\"#相关系统原理-1\" class=\"headerlink\" title=\"相关系统原理\"></a>相关系统原理</h3><p>内存是有限且系统共享的资源，一个程序占用越多，系统和其他程序所能用的就越少。程序启动前都需要先加载到内存中，并且在程序运行过程中的数据操作也会占用一定的内存资源。减少内存占用也能同时减少其对 CPU 时间维度上的消耗，从而使不仅使 App 以及整个系统也都能表现的更好。</p>\n<p>MacOS 和 iOS 都采用了虚拟内存技术来突破物理内存的大小限制，每个进程都有一段由多个大小相同的页（Page）所构成的逻辑地址空间。处理器和内存管理单元（MMU，Memory Management Unit）维护着由逻辑地址到物理地址的 <strong>页面映射表</strong>（简称 <strong>页表</strong>），当程序访问逻辑内存地址时，由 MMU 根据页表将逻辑地址转换为真实的物理地址。在早期的苹果设备中，每个页的大小为 4KB；基于 A7 和 A8 处理器的系统为 64 位程序提供了 16KB 的虚拟内存分页和 4KB 的物理内存分页；在 A9 之后，虚拟内存和物理内存的分页大小都达到了 16KB。</p>\n<p>虚拟内存分页（Virtual Page，VP）有两种类型：</p>\n<ol>\n<li>Clean：指能够被系统清理出内存且在需要时能重新加载的数据，包括：<ol>\n<li>内存映射文件</li>\n<li>Frameworks 中的 __DATA_CONST 部分</li>\n<li>应用的二进制可执行文件</li>\n</ol>\n</li>\n<li>Dirty：指不能被系统回收的内存占用，包括：<ol>\n<li>所有堆上的对象</li>\n<li>图片解码缓冲数据</li>\n<li>Framework 中的 <strong>DATA 和</strong>DATA_DIRTY 部分<br>由于内存容量和读写寿命的限制，iOS 上没有 Disk Swap 机制，取而代之使用 <strong>Compressed Memory</strong> 技术。 Disk Swap 是指在 macOS 以及一些其他桌面操作系统中，当内存可用资源紧张时，系统将内存中的内容写入磁盘中的backing store（Swapping out），并且在需要访问时从磁盘中再读入 RAM（Swapping in）。与大多数 UNIX 系统不同的是，macOS 没有预先分配磁盘中的一部分作为 backing store，而是利用引导分区所有可用的磁盘空间。</li>\n</ol>\n</li>\n</ol>\n<p>苹果最初只是公开了从 OS X Mavericks 开始使用 Compressed Memory 技术，但 iOS 系统也从 iOS 7 开始悄悄地使用。</p>\n<p>Compressed Memory 技术在内存紧张时能够将最近使用过的内存占用压缩至原有大小的一半以下，并且能够在需要时解压复用。它在节省内存的同时提高了系统的响应速度，其特点可以归结为：</p>\n<ul>\n<li>减少了不活跃内存占用</li>\n<li>改善电源效率，通过压缩减少磁盘 IO 带来的损耗</li>\n<li>压缩/解压非常快，能够尽可能减少 CPU 的时间开销</li>\n<li>支持多核操作<br>本质上，Compressed Memory 也是 Dirty Memory。因此，<strong>memory footprint = dirty size + compressed size</strong>，这也是我们需要并且能够尝试去减少的内存占用。</li>\n</ul>\n<h3 id=\"App-使用的内存\"><a href=\"#App-使用的内存\" class=\"headerlink\" title=\"App 使用的内存\"></a>App 使用的内存</h3><p>mach_task_basic_info 结构体存储了 Mach task 的内存使用信息，其中 resident_size 就是应用使用的物理内存大小，virtual_size 是虚拟内存大小。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MACH_TASK_BASIC_INFO     20         <span class=\"comment\">/* always 64-bit basic info */</span></span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">mach_task_basic_info</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">mach_vm_size_t</span>  virtual_size;       <span class=\"comment\">/* virtual memory size (bytes) */</span></span><br><span class=\"line\">        <span class=\"type\">mach_vm_size_t</span>  resident_size;      <span class=\"comment\">/* resident memory size (bytes) */</span></span><br><span class=\"line\">        <span class=\"type\">mach_vm_size_t</span>  resident_size_max;  <span class=\"comment\">/* maximum resident memory size (bytes) */</span></span><br><span class=\"line\">        <span class=\"type\">time_value_t</span>    user_time;          <span class=\"comment\">/* total user run time for</span></span><br><span class=\"line\"><span class=\"comment\">                                               terminated threads */</span></span><br><span class=\"line\">        <span class=\"type\">time_value_t</span>    system_time;        <span class=\"comment\">/* total system run time for</span></span><br><span class=\"line\"><span class=\"comment\">                                               terminated threads */</span></span><br><span class=\"line\">        <span class=\"type\">policy_t</span>        policy;             <span class=\"comment\">/* default policy for new threads */</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       suspend_count;      <span class=\"comment\">/* suspend count for task */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>task_info API 根据指定的 flavor 类型返回 target_task 的信息。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">kern_return_t</span> <span class=\"title\">task_info</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">task_name_t</span> target_task,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">task_flavor_t</span> flavor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">task_info_t</span> task_info_out,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">mach_msg_type_number_t</span> *task_info_outCnt</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>于是得到获取当前 App Memory 的使用情况</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSUInteger)getResidentMemory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">mach_task_basic_info</span> info;</span><br><span class=\"line\">    <span class=\"type\">mach_msg_type_number_t</span> count = MACH_TASK_BASIC_INFO_COUNT;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = <span class=\"built_in\">task_info</span>(<span class=\"built_in\">mach_task_self</span>(), MACH_TASK_BASIC_INFO, (<span class=\"type\">task_info_t</span>)&amp; info, &amp; count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == KERN_SUCCESS)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> info.resident_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将上述代码采集到的 App RAM 的使用值与 Xcode 的 Debug Gauges 的 memory 对比，会发现代码会与 Debug Gauges 显示的值存在差异，有时甚至会差几百 MB，那么究竟怎样才能获取到应用使用的真实内存值呢？<br>我们先来看看 WebKit 源码中是怎样使用的，在 <a href=\"https://github.com/WebKit/webkit/blob/52bc6f0a96a062cb0eb76e9a81497183dc87c268/Source/WTF/wtf/cocoa/MemoryFootprintCocoa.cpp\">MemoryFootprintCocoa.cpp</a> 文件中，代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">memoryFootprint</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">task_vm_info_data_t</span> vmInfo;</span><br><span class=\"line\">    <span class=\"type\">mach_msg_type_number_t</span> count = TASK_VM_INFO_COUNT;</span><br><span class=\"line\">    <span class=\"type\">kern_return_t</span> result = <span class=\"built_in\">task_info</span>(<span class=\"built_in\">mach_task_self</span>(), TASK_VM_INFO, (<span class=\"type\">task_info_t</span>) &amp;vmInfo, &amp;count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result != KERN_SUCCESS)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">size_t</span>&gt;(vmInfo.phys_footprint);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到代码使用的不是 resident_size，而是 phys_footprint，phys_footprint 同样是 task_info 的成员变量。<br>当我们将获取内存的实现从 resident_size 换成 phys_footprint 时，于是代码获取的内存值就和 Xcode Debug Gauges 一致了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSUInteger)getApplicationUsedMemory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">mach_task_basic_info</span> info;</span><br><span class=\"line\">    <span class=\"type\">mach_msg_type_number_t</span> count = MACH_TASK_BASIC_INFO_COUNT;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = <span class=\"built_in\">task_info</span>(<span class=\"built_in\">mach_task_self</span>(), MACH_TASK_BASIC_INFO, (<span class=\"type\">task_info_t</span>)&amp; info, &amp; count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == KERN_SUCCESS)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> info.phys_footprint;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取设备总内存：\"><a href=\"#获取设备总内存：\" class=\"headerlink\" title=\"获取设备总内存：\"></a>获取设备总内存：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">+ (NSUInteger)totalMemoryForDevice&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [NSProcessInfo processInfo].physicalMemory/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/didi/DoKit\">DoKit</a><br><a href=\"https://github.com/Tencent/GT\">GT</a><br><a href=\"https://github.com/Shmoopi/iOS-System-Services\">iOS-System-Services</a><br><a href=\"https://github.com/apple/darwin-xnu/blob/0a798f6738bc1db01281fc08ae024145e84df927/bsd/kern/kern_memorystatus.c\">kern_memorystatus</a><br><a href=\"https://www.infoq.cn/article/netease-ios-sdk-neteaseapm-technology-share/\">NeteaseAPM iOS SDK</a><a href=\"https://github.com/zenny-chen/CPU-Dasher-for-iOS\">CPU-Dasher-for-iOS</a><br><a href=\"https://github.com/everettjf/Yolo/blob/master/HookCppInitilizers/hook_cpp_init.mm\">HookCppInitilizers</a><br><a href=\"https://everettjf.github.io/2017/01/06/a-method-of-hook-objective-c-load/\">a-method-of-hook-objective-c-load</a><br><a href=\"https://github.com/maniackk/TimeProfiler/tree/master\">TimeProfiler</a><br><a href=\"https://github.com/tripleCC/Laboratory/blob/5c084263d79973805649b89d166b50751045e937/AppleSources/objc4-750/runtime/objc-file.mm#L32-L47\">objc-file.mm</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><p>CPU 是移动设备最重要的计算资源，设计糟糕的应用可能会造成 CPU 持续以高负载运行，一方面会导致用户使用过程遭遇卡顿；另一方面也会导致手机发热发烫，电量被快速消耗完，严重影响用户体验。</p>\n<h3 id=\"相关系统原理\"><a href=\"#相关系统原理\" class=\"headerlink\" title=\"相关系统原理\"></a>相关系统原理</h3><p>iOS 是基于 Apple Darwin 内核，由 kernel、XNU 和 Runtime 组成，XNU（X is not UNIX） 是 Darwin 的内核，一个混合内核，由 Mach 微内核和 BSD 组成。Mach 内核是轻量级的平台，只能完成操作系统最基本的职责，如：进程和线程、虚拟内存管理、任务调度、进程通信和消息传递机制。其他的工作，如文件操作和设备访问，都是由 BSD 层实现。</p>\n<p>事实上，Mach 并不能识别 UNIX 中的所有进程，而是采用一种稍微不同的方式，使用了比进程更轻量级的概念：<strong>任务（Task）</strong>。经典的 UNIX 采用了自上而下的方式：最基本的对象是进程，然后进一步划分为一个或多个线程；Mach 则采用了自底向上的方式：最基本的单元是线程，一个或多个线程包含在一个任务中。</p>\n<blockquote>\n<p><strong>线程：</strong>线程定义了 Mach 中最小的执行单元。线程表示的是底层的机器寄存器状态以及各种调度统计数据，其从设计上提供了调度所需要的大量信息。<br><strong>任务：</strong>任务是一种容器对象，虚拟内存空间和其他资源都是通过这个容器对象管理的。这些资源包括设备和其他句柄。资源进一步被抽象为端口。因此，资源的共享实际上相当于允许对对应端口进行访问。<br>严格来说，Mach 的任务并不是其它操作系统中所谓的进程，因为 Mach 作为一个微内核的操作系统，并没有提供“进程”的逻辑，而只提供了最基本的实现。在 BSD 模型中，这两个概念有一对一的简单映射，每个 BSD 进程（即 OS X 进程）都在底层关联了一个 Mach 任务对象。实现这种映射的方法是指定一个透明的指针 <code>bsd_info</code>，Mach 对 <code>bsd_info</code> 完全无知。Mach 将内核也用任务表示（全局范围称为 <code>kernel_task</code>），尽管该任务没有对应的 PID，但可以想象 PID 为 0。</p>\n</blockquote>\n<p>下图所示为权威著作《OS X Internal: A System Approach》中提供的 Mach OS X 中进程子系统组成的概念图。与 Mac OS X 类似，iOS 的线程技术也是基于 Mach 线程技术实现的。<br><img src=\"https://raw.githubusercontent.com/shijianmei/blog_Images/main/CPU%26%E5%86%85%E5%AD%98%E7%9B%91%E6%8E%A7/image.png\"></p>\n<p> Mach 层中的 <code>thread_basic_info</code> 结构体的定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">struct</span> <span class=\"title class_\">thread_basic_info</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">time_value_t</span>    user_time;      <span class=\"comment\">// 用户运行时长</span></span><br><span class=\"line\">        <span class=\"type\">time_value_t</span>    system_time;    <span class=\"comment\">// 系统运行时长</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       cpu_usage;      <span class=\"comment\">// CPU 使用率</span></span><br><span class=\"line\">        <span class=\"type\">policy_t</span>        policy;         <span class=\"comment\">// 调度策略</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       run_state;      <span class=\"comment\">// 运行状态</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       flags;          <span class=\"comment\">// 各种标记</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       suspend_count;  <span class=\"comment\">// 暂停线程的计数</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       sleep_time;     <span class=\"comment\">// 休眠时间</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"APP-的-CPU-占用率\"><a href=\"#APP-的-CPU-占用率\" class=\"headerlink\" title=\"APP 的 CPU 占用率\"></a>APP 的 CPU 占用率</h3><p>对于app使用率的获取，网上的方案还是比较统一的。</p>\n<ol>\n<li>使用task_threads函数，获取当前App行程中所有的线程列表。</li>\n<li>对于第一步中获取的线程列表进行遍历，通过thread_info函数获取每一个非闲置线程的cpu使用率，进行相加。</li>\n<li>使用vm_deallocate函数释放资源。<br>如下所示为 <strong>CPU 占用率</strong> 的代码实现：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (CGFloat)cpuUsageForApp &#123;</span><br><span class=\"line\">    <span class=\"type\">kern_return_t</span> kr;</span><br><span class=\"line\">    <span class=\"type\">thread_array_t</span>         thread_list;</span><br><span class=\"line\">    <span class=\"type\">mach_msg_type_number_t</span> thread_count;</span><br><span class=\"line\">    <span class=\"type\">thread_info_data_t</span>     thinfo;</span><br><span class=\"line\">    <span class=\"type\">mach_msg_type_number_t</span> thread_info_count;</span><br><span class=\"line\">    <span class=\"type\">thread_basic_info_t</span> basic_info_th;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// get threads in the task</span></span><br><span class=\"line\">    <span class=\"comment\">//  获取当前进程中 线程列表</span></span><br><span class=\"line\">    kr = <span class=\"built_in\">task_threads</span>(<span class=\"built_in\">mach_task_self</span>(), &amp;thread_list, &amp;thread_count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (kr != KERN_SUCCESS)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">float</span> tot_cpu = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; thread_count; j++) &#123;</span><br><span class=\"line\">        thread_info_count = THREAD_INFO_MAX;</span><br><span class=\"line\">        <span class=\"comment\">//获取每一个线程信息</span></span><br><span class=\"line\">        kr = <span class=\"built_in\">thread_info</span>(thread_list[j], THREAD_BASIC_INFO,</span><br><span class=\"line\">                         (<span class=\"type\">thread_info_t</span>)thinfo, &amp;thread_info_count);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (kr != KERN_SUCCESS)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        basic_info_th = (<span class=\"type\">thread_basic_info_t</span>)thinfo;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(basic_info_th-&gt;flags &amp; TH_FLAGS_IDLE)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// cpu_usage : Scaled cpu usage percentage. The scale factor is TH_USAGE_SCALE.</span></span><br><span class=\"line\">            <span class=\"comment\">//宏定义TH_USAGE_SCALE返回CPU处理总频率：</span></span><br><span class=\"line\">            tot_cpu += basic_info_th-&gt;cpu_usage / (<span class=\"type\">float</span>)TH_USAGE_SCALE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"comment\">// for each thread</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 注意方法最后要调用 vm_deallocate，防止出现内存泄漏</span></span><br><span class=\"line\">    kr = <span class=\"built_in\">vm_deallocate</span>(<span class=\"built_in\">mach_task_self</span>(), (<span class=\"type\">vm_offset_t</span>)thread_list, thread_count * <span class=\"built_in\">sizeof</span>(<span class=\"type\">thread_t</span>));</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(kr == KERN_SUCCESS);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot_cpu;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h2><h3 id=\"相关系统原理-1\"><a href=\"#相关系统原理-1\" class=\"headerlink\" title=\"相关系统原理\"></a>相关系统原理</h3><p>内存是有限且系统共享的资源，一个程序占用越多，系统和其他程序所能用的就越少。程序启动前都需要先加载到内存中，并且在程序运行过程中的数据操作也会占用一定的内存资源。减少内存占用也能同时减少其对 CPU 时间维度上的消耗，从而使不仅使 App 以及整个系统也都能表现的更好。</p>\n<p>MacOS 和 iOS 都采用了虚拟内存技术来突破物理内存的大小限制，每个进程都有一段由多个大小相同的页（Page）所构成的逻辑地址空间。处理器和内存管理单元（MMU，Memory Management Unit）维护着由逻辑地址到物理地址的 <strong>页面映射表</strong>（简称 <strong>页表</strong>），当程序访问逻辑内存地址时，由 MMU 根据页表将逻辑地址转换为真实的物理地址。在早期的苹果设备中，每个页的大小为 4KB；基于 A7 和 A8 处理器的系统为 64 位程序提供了 16KB 的虚拟内存分页和 4KB 的物理内存分页；在 A9 之后，虚拟内存和物理内存的分页大小都达到了 16KB。</p>\n<p>虚拟内存分页（Virtual Page，VP）有两种类型：</p>\n<ol>\n<li>Clean：指能够被系统清理出内存且在需要时能重新加载的数据，包括：<ol>\n<li>内存映射文件</li>\n<li>Frameworks 中的 __DATA_CONST 部分</li>\n<li>应用的二进制可执行文件</li>\n</ol>\n</li>\n<li>Dirty：指不能被系统回收的内存占用，包括：<ol>\n<li>所有堆上的对象</li>\n<li>图片解码缓冲数据</li>\n<li>Framework 中的 <strong>DATA 和</strong>DATA_DIRTY 部分<br>由于内存容量和读写寿命的限制，iOS 上没有 Disk Swap 机制，取而代之使用 <strong>Compressed Memory</strong> 技术。 Disk Swap 是指在 macOS 以及一些其他桌面操作系统中，当内存可用资源紧张时，系统将内存中的内容写入磁盘中的backing store（Swapping out），并且在需要访问时从磁盘中再读入 RAM（Swapping in）。与大多数 UNIX 系统不同的是，macOS 没有预先分配磁盘中的一部分作为 backing store，而是利用引导分区所有可用的磁盘空间。</li>\n</ol>\n</li>\n</ol>\n<p>苹果最初只是公开了从 OS X Mavericks 开始使用 Compressed Memory 技术，但 iOS 系统也从 iOS 7 开始悄悄地使用。</p>\n<p>Compressed Memory 技术在内存紧张时能够将最近使用过的内存占用压缩至原有大小的一半以下，并且能够在需要时解压复用。它在节省内存的同时提高了系统的响应速度，其特点可以归结为：</p>\n<ul>\n<li>减少了不活跃内存占用</li>\n<li>改善电源效率，通过压缩减少磁盘 IO 带来的损耗</li>\n<li>压缩/解压非常快，能够尽可能减少 CPU 的时间开销</li>\n<li>支持多核操作<br>本质上，Compressed Memory 也是 Dirty Memory。因此，<strong>memory footprint = dirty size + compressed size</strong>，这也是我们需要并且能够尝试去减少的内存占用。</li>\n</ul>\n<h3 id=\"App-使用的内存\"><a href=\"#App-使用的内存\" class=\"headerlink\" title=\"App 使用的内存\"></a>App 使用的内存</h3><p>mach_task_basic_info 结构体存储了 Mach task 的内存使用信息，其中 resident_size 就是应用使用的物理内存大小，virtual_size 是虚拟内存大小。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MACH_TASK_BASIC_INFO     20         <span class=\"comment\">/* always 64-bit basic info */</span></span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">mach_task_basic_info</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">mach_vm_size_t</span>  virtual_size;       <span class=\"comment\">/* virtual memory size (bytes) */</span></span><br><span class=\"line\">        <span class=\"type\">mach_vm_size_t</span>  resident_size;      <span class=\"comment\">/* resident memory size (bytes) */</span></span><br><span class=\"line\">        <span class=\"type\">mach_vm_size_t</span>  resident_size_max;  <span class=\"comment\">/* maximum resident memory size (bytes) */</span></span><br><span class=\"line\">        <span class=\"type\">time_value_t</span>    user_time;          <span class=\"comment\">/* total user run time for</span></span><br><span class=\"line\"><span class=\"comment\">                                               terminated threads */</span></span><br><span class=\"line\">        <span class=\"type\">time_value_t</span>    system_time;        <span class=\"comment\">/* total system run time for</span></span><br><span class=\"line\"><span class=\"comment\">                                               terminated threads */</span></span><br><span class=\"line\">        <span class=\"type\">policy_t</span>        policy;             <span class=\"comment\">/* default policy for new threads */</span></span><br><span class=\"line\">        <span class=\"type\">integer_t</span>       suspend_count;      <span class=\"comment\">/* suspend count for task */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>task_info API 根据指定的 flavor 类型返回 target_task 的信息。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">kern_return_t</span> <span class=\"title\">task_info</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">task_name_t</span> target_task,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">task_flavor_t</span> flavor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">task_info_t</span> task_info_out,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">mach_msg_type_number_t</span> *task_info_outCnt</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>于是得到获取当前 App Memory 的使用情况</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSUInteger)getResidentMemory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">mach_task_basic_info</span> info;</span><br><span class=\"line\">    <span class=\"type\">mach_msg_type_number_t</span> count = MACH_TASK_BASIC_INFO_COUNT;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = <span class=\"built_in\">task_info</span>(<span class=\"built_in\">mach_task_self</span>(), MACH_TASK_BASIC_INFO, (<span class=\"type\">task_info_t</span>)&amp; info, &amp; count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == KERN_SUCCESS)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> info.resident_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将上述代码采集到的 App RAM 的使用值与 Xcode 的 Debug Gauges 的 memory 对比，会发现代码会与 Debug Gauges 显示的值存在差异，有时甚至会差几百 MB，那么究竟怎样才能获取到应用使用的真实内存值呢？<br>我们先来看看 WebKit 源码中是怎样使用的，在 <a href=\"https://github.com/WebKit/webkit/blob/52bc6f0a96a062cb0eb76e9a81497183dc87c268/Source/WTF/wtf/cocoa/MemoryFootprintCocoa.cpp\">MemoryFootprintCocoa.cpp</a> 文件中，代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">memoryFootprint</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">task_vm_info_data_t</span> vmInfo;</span><br><span class=\"line\">    <span class=\"type\">mach_msg_type_number_t</span> count = TASK_VM_INFO_COUNT;</span><br><span class=\"line\">    <span class=\"type\">kern_return_t</span> result = <span class=\"built_in\">task_info</span>(<span class=\"built_in\">mach_task_self</span>(), TASK_VM_INFO, (<span class=\"type\">task_info_t</span>) &amp;vmInfo, &amp;count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result != KERN_SUCCESS)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">size_t</span>&gt;(vmInfo.phys_footprint);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到代码使用的不是 resident_size，而是 phys_footprint，phys_footprint 同样是 task_info 的成员变量。<br>当我们将获取内存的实现从 resident_size 换成 phys_footprint 时，于是代码获取的内存值就和 Xcode Debug Gauges 一致了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSUInteger)getApplicationUsedMemory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">mach_task_basic_info</span> info;</span><br><span class=\"line\">    <span class=\"type\">mach_msg_type_number_t</span> count = MACH_TASK_BASIC_INFO_COUNT;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = <span class=\"built_in\">task_info</span>(<span class=\"built_in\">mach_task_self</span>(), MACH_TASK_BASIC_INFO, (<span class=\"type\">task_info_t</span>)&amp; info, &amp; count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == KERN_SUCCESS)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> info.phys_footprint;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取设备总内存：\"><a href=\"#获取设备总内存：\" class=\"headerlink\" title=\"获取设备总内存：\"></a>获取设备总内存：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">+ (NSUInteger)totalMemoryForDevice&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [NSProcessInfo processInfo].physicalMemory/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/didi/DoKit\">DoKit</a><br><a href=\"https://github.com/Tencent/GT\">GT</a><br><a href=\"https://github.com/Shmoopi/iOS-System-Services\">iOS-System-Services</a><br><a href=\"https://github.com/apple/darwin-xnu/blob/0a798f6738bc1db01281fc08ae024145e84df927/bsd/kern/kern_memorystatus.c\">kern_memorystatus</a><br><a href=\"https://www.infoq.cn/article/netease-ios-sdk-neteaseapm-technology-share/\">NeteaseAPM iOS SDK</a><a href=\"https://github.com/zenny-chen/CPU-Dasher-for-iOS\">CPU-Dasher-for-iOS</a><br><a href=\"https://github.com/everettjf/Yolo/blob/master/HookCppInitilizers/hook_cpp_init.mm\">HookCppInitilizers</a><br><a href=\"https://everettjf.github.io/2017/01/06/a-method-of-hook-objective-c-load/\">a-method-of-hook-objective-c-load</a><br><a href=\"https://github.com/maniackk/TimeProfiler/tree/master\">TimeProfiler</a><br><a href=\"https://github.com/tripleCC/Laboratory/blob/5c084263d79973805649b89d166b50751045e937/AppleSources/objc4-750/runtime/objc-file.mm#L32-L47\">objc-file.mm</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clgq3fgxm0000knzrhlva3v80","category_id":"clgw57t0f0000u6zr4sg45l75","_id":"clgw57t0h0001u6zra4s619l8"},{"post_id":"clgw2g7zr00004qzrcqwceh38","category_id":"clgw57t0f0000u6zr4sg45l75","_id":"clgw57yzc0002u6zr6t7k8lhp"},{"post_id":"clgqa2ioe00005szrf6zm5bk5","category_id":"clgw57t0f0000u6zr4sg45l75","_id":"clgw584ve0003u6zr4p3y4e5d"},{"post_id":"clgw5f3zc0001vqzrhsgf8f09","category_id":"clgw5f3ze0002vqzrg8rwck74","_id":"clgw5f3ze0003vqzrg5g6crmo"},{"post_id":"clgxae0uc0000ghzr5wch03vh","category_id":"cli1da3vk00006szrfp1v4bm5","_id":"cli1da3vm00036szr9q1xhdh0"},{"post_id":"clgxae0ue0001ghzrar9ia699","category_id":"cli1da3vk00006szrfp1v4bm5","_id":"cli1da3vn00046szr157g279v"},{"post_id":"clhbvo7xc00009lzrhkymdb99","category_id":"cli1da3vm00026szrc3ap5vw5","_id":"cli1da3vn00056szrclrp1mof"},{"post_id":"cli1dgn8g00009szr0lfu873l","category_id":"cli1dh7nj00029szr688a0clf","_id":"cli1dh7nk00039szrhsn74zft"},{"post_id":"clhsmku7r00002gzr75r05qds","category_id":"cli1dh7nj00029szr688a0clf","_id":"cli1dkce60000euzrh62d3lg3"}],"PostTag":[],"Tag":[]}}